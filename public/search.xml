<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>look at my new keyboard!!</title>
      <link href="/blog/look-at-my-new-keyboard/"/>
      <url>/blog/look-at-my-new-keyboard/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://s2.loli.net/2024/05/30/RzloOHq4KsZtJyT.jpg" alt="Rainy 75 + corn cob keycaps" /><figcaption>Rainy 75 + corn cob keycaps</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/hello%20i%20try%20to%20use%20this%20keyboard/"/>
      <url>/blog/hello%20i%20try%20to%20use%20this%20keyboard/</url>
      
        <content type="html"><![CDATA[<p>hello i try to use this keyboard.</p><p>it sounds ok.</p><p>but it is really slight</p><p>i mean i cannot type in a strong way otherwise it will be i don't know.</p><p>it sounds ok and feels ok to me</p><p>well all the keys are correct no?</p><p>qwertyuiop[];'zxcvbnm,./A</p><p>The right shift is just right to me</p><p>then I have the arrow keys</p><p>it is good</p><p>then there're several useful commonly used function keys</p><p>such as delete home end pgup pgdn</p><p>这个键盘打字挺开心说真的</p><p>还可以的就是打字好像不是特别好</p><p>我是说我自己打字不是很好</p><p>不过还行</p><p>不知道在说什么</p><p>没事</p><p>不重要</p><p>准备读一下论文？</p><p>angela让读的</p><p>这个噼里啪啦的声音 但是说实话真的在认真打字工作的时候并不会注意到它</p><p>不过一旦注意到还是很开心的</p><p>hello 老婆你好我是小霖，为了让你的输入法认识我，我决定多打几遍小霖小霖是小霖，嘿嘿。弟弟在外面怎么突然没声音了咧，妈妈咋突然不说话了？话说既然永远都玩不到四个人一起玩的游戏，你是不是把你的手柄可以拿回来了因为不想把你的手柄弄脏了</p><p>那我等你现在去拿 不可以远程吗</p><p>哭哭哭哭、、、、、、、、</p><p>很糟糕、、、、、、、、</p><p>哭哭哭哭哭哭、、、、、、 算了！</p><p>看狼姐吧！</p><p>​ 就是就是计算机加思索 你你你你你您寄几啊就是你的苏你你你你你你你好我是朱珈印你是谁你是小霖我的小霖宝</p><p>哈哈哈哈咕咕咕咕嘻嘻写成</p><p>我多打几个不同的字</p><p>但是我有点不知道说什么</p><p>哈哈哈哈</p><p>床前明月光</p><p>疑是地上霜</p><p>举头望明月</p><p>低头思故乡</p><p>飞流直下三千尺</p><p>疑似银河落九天</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Borges and AI 读后感</title>
      <link href="/blog/Reading-Borges-and-AI/"/>
      <url>/blog/Reading-Borges-and-AI/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://arxiv.org/abs/2310.01425" class="uri">https://arxiv.org/abs/2310.01425</a></p><p>作者：<a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Bottou,+L">Léon Bottou</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Schölkopf,+B">Bernhard Schölkopf</a></p><p>发表： Arxiv</p><hr /><p>首先我们可以用博尔赫斯的“小径分叉的花园”的隐喻，来类比大语言模型。人们做出一个选择的时候，所付出的代价是放弃了其他所有可能的选择。那如果把所有可能的选择完全考虑进来，就能得到一个充满无数可能性分叉的花园。这个花园，就可以类比“完美语言模型”。它包含了所有可能的人类语言的组合。当它在聊天框输出一串文字的时候，就像是从分叉的小径中选择其中一条一样，或者是人类做出一个选择的时候一样。未被选择的词语构成了其他的分叉。“语言模型”这个全包的概念，是完美的，包含了所有语言的可能性。</p><p>实际上，“完美语言模型”就像一本预言书，里面包含了所有我们想要听到的话、可能听到的话。唯一能影响它输出的内容的，就是和它展开对话的那个人。我们用prompt作为引子来引导语言模型的生成，这其实就是对无限的可能性施加限制，prompt完全决定了语言模型的输出。</p><p>我们可以先从“幻觉”这个所谓的问题讨论起。其实这不是“幻觉”，而是一种“虚构”，是从人类语言中所有有可能的分叉中，适当地挑选出可能性高的那些，借用了一些合理的逻辑，虚构了另一套合理的故事。“完美的语言模型”，倒不如说是一个“虚构小说机器”。</p><p>一类人认为有一些大逆不道的话永远不该存在，所以要求审查LLM；更多的另一类人是希望LLM真的像智能一样为人服务、创造价值，所以要在必要的场合说必要的话。两者为了各自的目的，都希望对LLM这种本身不包含任何是非对错评判偏差的“完美语言模型”进行剪枝，去掉不想要的部分。所用的手段就是用人工精挑细选的语料来微调，或者叫human feedback。</p><p>实际上这种审查有很多的问题。最大的问题是，有了“虚构小说机器”之后，它对我们人类文化的影响比想象中大，我们会依赖它来塑造我们的知识和对未来的想象，因此它会影响整个人类的文化。当来到这个层次后，“审查”，或者说“净化”，就变得危险了，因为谁都想把自己的那一套强加在LLM之上，可是谁的标准才是真的标准呢，或者我们真的能有真正的“净化”标准吗？</p><p>“在未来，几乎每个人都使用语言模型来丰富他们的思维，对语言模型所写内容的控制权将成为对我们所思考内容的控制权。如此强大的力量能存在而不被滥用吗？</p><p>“有些人担心小说机器是一种无所不知的人工智能，可能会比我们活得更久；然而，更黑暗的诱惑是让我们的思想屈服于这个现代的皮提亚，不受真理和意图的影响，但却可以被他人操纵。如果我们一直把小说机器误认为是可以减轻我们思考负担的人工智能，那么语言模型无休止的喋喋不休会让我们像苦苦挣扎的图书馆员一样疯狂。然而，作为小说机器，它们的故事可以丰富我们的生活，帮助我们重温过去，了解现在，甚至瞥见未来。”</p><p>作者最后说，人们发明的这种“机器”，不仅能写故事，而且可以写故事的所有变体，这是人类历史上一个重要的里程碑，堪比印刷机的发明。或者，甚至可以比作早在印刷或书写被发明之前的，在洞穴壁画之前就出现的，一种塑造人类的艺术：讲故事的艺术。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Score-based generative model</title>
      <link href="/blog/Score-based-generative-model/"/>
      <url>/blog/Score-based-generative-model/</url>
      
        <content type="html"><![CDATA[<blockquote><p>references:</p><p><a href="https://yang-song.net/blog/2021/score/" class="uri">https://yang-song.net/blog/2021/score/</a></p><p><a href="https://deeplearning.neuromatch.io/tutorials/W2D4_GenerativeModels/student/W2D4_Tutorial2.html#" class="uri">https://deeplearning.neuromatch.io/tutorials/W2D4_GenerativeModels/student/W2D4_Tutorial2.html#</a></p><p><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/" class="uri">https://lilianweng.github.io/posts/2021-07-11-diffusion-models/</a></p></blockquote><h1 id="score-based-models-v.s.-diffusion-models">Score-based models v.s. diffusion models</h1><ul><li>一开始两者独立发展，所以有不同的理论依据和术语</li><li>最后两者殊途同归：得到一样的模型</li></ul><h1 id="score-function">Score function</h1><ol type="1"><li>生成模型可以归类为两类：<ol type="1"><li>显式的，基于likelihood的模型，比如autoregressive，normalizing flow，VAE。这些方法通过近似最大似然来建模概率密度分布。问题是，为了计算likelihood，需要一个normalizing constant这个量，它要么是未知的，要么要想尽办法通过其他的限制来估计或者消除。所以这类模型比较复杂。</li><li>隐式的，直接建模一个概率分布的sample process，而不是概率分布本身。比如GAN。但是它需要对抗学习，这比较不稳定，而且可能有模式坍塌的问题。</li></ol></li><li>Score function和第一类相关，它也是建模likelihood——但不是它本身，而是跟它相关的一个量，即 Stein score function。这样的一个神奇好处是，可以直接消除normalizing constant这个量。 <img src="https://s2.loli.net/2024/04/12/rGvERP3W1gXV964.png" /> <em>（图中，等高线表示一个概率分布，箭头表示它的分数场。score-based model就是建模这些分数场)</em></li><li>具体一点来说：<ol type="1"><li>假设给定一个数据集 <span class="math inline">\({x_1,x_2,...,x_N}\)</span>，每个数据都是从一个未知的数据分布 <span class="math inline">\(p(x)\)</span> 采样。我们用一个生成模型来生成新的数据，这些数据都是从这个分布中采样的</li><li>我们要想办法表示这个概率分布。前面说的基于likelihood的模型是这么做的：直接建模这个概率密度函数： <span class="math display">\[ p_\theta(x)=\frac{e^{-f_\theta(x)}}{Z_\theta} \]</span> 其中这个 <span class="math inline">\(Z_\theta&gt;0\)</span> 就是依赖于 <span class="math inline">\(\theta\)</span> 的那个normalizing constant了。 这个 <span class="math inline">\(p_\theta(x)\)</span> 训练的目标函数就是最大log-likelihood： <span class="math display">\[  \max_\theta\sum^N_{i=1}\log p_\theta(x_i) \]</span></li><li>前面说了，问题就是 <span class="math inline">\(Z_\theta\)</span> 很难估计。为了避开估计它，我们的神经网络不再直接估计概率分布，而是估计它的分数（概率密度函数的log的梯度）： <span class="math display">\[s_\theta(x)=\nabla_x\log p(x)=-\nabla_x f_\theta(x)-\nabla_x\log Z_\theta = -\nabla_x f_\theta(x)\]</span> 去掉了 <span class="math inline">\(Z_\theta\)</span>！</li><li>训练的目标函数是 <strong>Fisher divergence</strong>： <span class="math display">\[ \mathbb E_{p(x)}[\|\nabla_x\log p(x)-s_\theta(x)\|^2_2] \]</span></li><li>现在的问题就是，上式中的 <span class="math inline">\(\nabla_x\log p(x)\)</span>未知。但是很好解决，一种叫<strong>score matching</strong>的方法可以直接最小化 <strong>Fisher divergence</strong>，不需要知道真实的score。</li><li>最后的问题就是得到了这个 score function 之后，怎么从中采样新的数据了。<strong>Langevin dynamics</strong> 提出了一种迭代式的采样方法，就是和diffusion的步骤一模一样的。相当于从空间中任意一个位置初始化，然后顺着score function往高概率密度的方向优化，足够多的步骤之后就到了峰值处。</li></ol></li></ol><h1 id="关-noise-什么事">关 noise 什么事？</h1><p>是这样的，前面提到的方法已经讲清楚了神经网络建模和目标函数。但是假如直接拿着数据集（比如图像）让网络学习的话，效果并不好。因为这个score function在低概率密度的区域样本很少，学得也很不好。</p><p><img src="https://s2.loli.net/2024/04/12/6cuXBCoHShsMiaO.png" /></p><p>为了解决这个问题，我们才往数据中加 noise，在被噪声扰动后的数据集上训练网络。这些扰动后的数据点极大地扩充了数据集，最主要的是能填充那些低概率密度的分布区域。</p><p>大的噪声破坏数据分布，小的噪声不够填充低概率密度区域。所以就用多尺度的噪声。也就是diffusion model的前向过程了。</p><p>总体来说，score-based model就是在这些噪声扰动后的数据集上训练的。训练的时候，噪声的尺度当然也可以作为一个已知量输入，也就是noise conditional <span class="math inline">\(s_\theta(x,i)\)</span></p><h1 id="diffusion-models">diffusion models</h1><p>to read：<a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/" class="uri">https://lilianweng.github.io/posts/2021-07-11-diffusion-models/</a></p><p>从diffusion models的角度解释整个模型</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generative model </tag>
            
            <tag> diffusion model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Learning Locally Editable Virtual Humans</title>
      <link href="/blog/Reading-Learning-Locally-Editable-Virtual-Humans/"/>
      <url>/blog/Reading-Learning-Locally-Editable-Virtual-Humans/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://files.ait.ethz.ch/projects/custom-humans/paper.pdf" class="uri">https://files.ait.ethz.ch/projects/custom-humans/paper.pdf</a></p><p>作者：Hsuan-I Ho, Lixin Xue, Jie Song, Otmar Hilliges。ETH</p><p>发表： CVPR23</p><p>链接： <a href="https://custom-humans.github.io/" class="uri">https://custom-humans.github.io/</a></p><hr /><h2 id="why">Why：</h2><ol type="1"><li>3D数字人现在很热门</li><li>传统方法中，重建好一个3D数字人之后，不知道怎么编辑和定制它</li><li>所以想搞一个方法，既能创建3D数字人，又能在创建完成后对它进行定制化</li></ol><h2 id="what">What：</h2><ol type="1"><li>这个方法允许在不同的3D人之间部分地迁移几何和外貌细节，还能在改变人的姿势的时候保留一致的局部细节</li><li>具体一点说，是把NeRF和LBS-articulated（铰接）的mesh模型的优点结合起来：NeRF很灵活，有很强的建模能力；mesh模型可以变形，并且可以被完全显式地控制</li><li>再具体一点，是提出了一个混合的3D人体representation，允许跨不同主体进行局部编辑；然后提出了一整套的生成这种3D数字人的流程，既能拟合没见过的3D扫描人数据，也能随机采样生成新的个体；另外还提出一个大尺度高质量3D扫描人体数据集</li></ol><h2 id="how">How：</h2><p><img src="https://s2.loli.net/2023/12/12/3MfkXdqwn1rpeF8.png" /></p><ol type="1"><li><p>混合的3D人体representation：</p><ol type="1"><li><p>有一个可学习的特征codebook，包含<span class="math inline">\(M\times 2F\)</span>个特征，其中<span class="math inline">\(F\)</span>个是几何特征，另外<span class="math inline">\(F\)</span>个是外貌特征。给定一个human mesh，mesh有M个顶点（M很大，一万多），每个顶点跟codebook中的特征显式地一一对应。</p></li><li><p>当NeRF渲染时，给定空间中一个query点，提取局部的特征：</p><figure><img src="https://s2.loli.net/2023/12/12/RL3ehZ6nuGq12B4.png" alt="image-20231212173121173" /><figcaption>image-20231212173121173</figcaption></figure><ol type="1"><li>找出mesh顶点中离它最近的3个顶点，对这3个顶点对应的特征用barycentric interpolation（重心插值法？）得到插值后的特征</li><li>还需要把全局坐标转换成局部坐标，这么做是为了让局部与全局解耦，方便在后续更改人体pose的时候不影响局部的细节。转换方式：还是根据mesh顶点中离它最近的3个顶点组成的三角形，直接用<span class="math inline">\((u,v)\)</span>表示query点投影到三角形平面上的点在三角形中的位置，然后再加上一个<span class="math inline">\(d\)</span>表示query点距离三角形平面的距离，以及一个<span class="math inline">\(\textbf n\)</span>表示距离的方向</li><li>decoder，或者说renderer，不是单独一个NeRF，而是分成了两个独立的，一个是SDF field，一个是rgb field。论文里说这样能方便用3D loss显式地监督这两个网络。后面的实验证明如果不解耦这两个网络的话，效果会差很多</li><li>那么最后给到这两个neural fields的输入，就是<span class="math inline">\(\textbf f_s/\textbf f_c,(u,v,d),\textbf n\)</span>，分别是几何特征或者颜色特征、局部坐标、方向</li></ol></li></ol></li><li><p>采样个体样本时，有两种方式：</p><ol type="1"><li>直接采样已有的个体样本。训练的时候，针对每个个体样本，都是单独学习一个codebook。假如有N个ground truth人体，那codebook实际上是有<span class="math inline">\(N\times M\times 2F\)</span>这么多维度。想要采样其中一个个体，直接从N个样本中取一个entry就好了</li><li>生成全新的样本？用PCA。具体说，是创建一个新的D维的codebook（<span class="math inline">\(D\times 2MF\)</span>），这D个维度是对N个人体样本拟合出的PCA系数。生成随机新人体样本的时候，只要简单随机生成D个PCA参数，然后乘以利用这个新codebook算好的特征向量就好了</li></ol></li><li><p>训练过程</p><ol type="1"><li>给定一个扫描的3D人体（高质量、很细节的mesh），用其他现有工具把一个SMPL mesh和它对齐，得到相应的pose和shape参数。</li><li>用M个扫描的3D人体，分别训练特征codebook的M个entries。</li><li>三方面的loss：<ol type="1"><li>3D loss，包括rgb loss和sdf loss；</li><li>2D adversarial loss，这里是用前面提到的PCA采样方法，得到随机生成的人体，渲染成2D图像；然后用相同的相机视角用任意gt 3D人体扫描得到2D图像，然后用StyleGAN辨别这两张真假图像。这里的用意是，不需要严格相同的gt监督，就可以对PCA得到的生成样本进行监督，这样的监督又能传播到全部训练样本上，应该是能很好地提升模型的泛化性能。实验结果看这个loss还挺重要的。</li><li>简单的对特征的正则项，让特征符合高斯分布</li></ol></li></ol></li><li><p>一些编辑方式</p><figure><img src="https://s2.loli.net/2023/12/12/Xh6aIN3q7OgzGrl.png" alt="image-20231212175622543" /><figcaption>image-20231212175622543</figcaption></figure><ol type="1"><li><p>初始化：采样一个3D数字人样本。也就是前面提到的两种采样方式，可以采样已有的，也可以采样全新生成的</p></li><li><p>optimize特征，拟合一个3D扫描人体。用到的是3D loss</p></li><li><p>跨个体的特征编辑：简单粗暴，先用Blender选择人体局部对应的顶点，然后把想要的样本的codebook中的那部分特征交换到目标的codebook来</p></li><li><p>绘制材质：拿到渲染后的2D图像后，可以直接对2D图像进行一些绘制，然后再用它监督训练codebook。后面的实验结果看上去效果还不错，但limitation说不能很好地拟合过于高精度的细节</p><figure><img src="https://s2.loli.net/2023/12/12/b3nCjQsoRNuwcTg.png" alt="image-20231212180508779" /><figcaption>image-20231212180508779</figcaption></figure></li><li><p>更换人体姿势：这个representation本身是由一个SMPL mesh加一个codebook组成的；只要对SMPL mesh的参数进行修改，就能直接改变姿势了</p></li></ol></li><li><p>实验</p><ol type="1"><li>用了自己提出的CustomHumans以及THuman2.0数据集来训练模型；用SIZER数据集来测试对没见过的人体扫描的拟合性能</li><li>用chamfer distance、normal consistency、f-score来衡量拟合性能；结果挺好</li><li>展示了编辑性能，看起来挺好</li><li>ablation study：值得深究<img src="https://s2.loli.net/2023/12/12/gwQCR6b2dvLpAz8.png" alt="image-20231212175727556" /></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D Computer Vision </tag>
            
            <tag> 3D Reconstruction </tag>
            
            <tag> 3D Human </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Neural Capture of Animatable 3D Human from Monocular Video</title>
      <link href="/blog/Reading-Neural-Capture-of-Animatable-3D-Human-from-Monocular-Video/"/>
      <url>/blog/Reading-Neural-Capture-of-Animatable-3D-Human-from-Monocular-Video/</url>
      
        <content type="html"><![CDATA[<p>论文地址：</p><p>作者：Gusi Te, Xiu Li, Xiao Li, Jinglu Wang, Wei Hu, and Yan Lu</p><p>发表： ECCV 2022</p><p>链接： <a href="https://arxiv.org/abs/2208.08728" class="uri">https://arxiv.org/abs/2208.08728</a></p><hr /><h2 id="why">Why：</h2><ol type="1"><li>之前的3D人体重建工作一般需要多视角视频，或者额外的3D几何信息。这篇工作以单视角视频为输入</li><li>之前的工作建模出来的3D人体很难泛化到新的pose</li><li>之前的工作都只能解决一部分的问题：基于参数化人体模型的方法对appearance的表示精度有限；基于NeRF的方法的appearance效果好，但是要么只关注于NeRF场本身的构建，要么需要精确的3D mesh作为先验。</li></ol><h2 id="what">What：</h2><ol type="1"><li>提出一个从单视角视频重建animatable的3D人体的方法</li><li>表示方法是把 dynamic NeRF 和一个 human mesh （SMPL）相结合。这个 dynamic NeRF 的输入是一些嵌入到mesh 顶点的局部信息，这样，当需要表现一个人不同的姿势的时候，本质上是对这个 canonical space 的静态NeRF进行deformation。<strong>这里的关键问题是如何设计这个局部信息，来让查询observation space中的任意一点的时候，都能够良好地deform到canonical space，从而找到静态NeRF里正确的点</strong></li><li>在优化过程中，首先借用别的工具初始化一个mesh pose，然后逐帧地同时 finetune mesh pose 和 NeRF</li></ol><h2 id="how">How：</h2><h3 id="query-embedding-for-nerf">Query embedding for NeRF</h3><figure><img src="https://s2.loli.net/2023/11/24/IFWcdEZDfquSVNJ.png" alt="image-20231124051120340" /><figcaption>image-20231124051120340</figcaption></figure><p>精髓就在图里了：</p><ol type="1"><li><p>人体的表现形式是我们熟悉的：首先有一个由pose参数<span class="math inline">\(\theta\)</span>驱动的SMPL mesh，以及一个mesh-guided NeRF，后者的输入是对应query ray上的3D points的embedding</p></li><li><p>Query embedding的具体构成：</p><ol type="1"><li>最直观的 Latent Code：存储在每一个mesh顶点上，表示的是appearance信息。对于一个query point，会找到mesh顶点中K nearest neighbors所对应的latent codes</li><li>被称为 Deformation Guidance：其实是在<strong>canonical space</strong>中，刚刚用到的那些KNN顶点的坐标（用inverse LBS得到），以及query point相对于mesh表面投影点的方向。这个信息能够指导deformation field，所以叫guidance</li><li>另一方面还有 Deformation Priors：是在<strong>observation space</strong>中，query point相对于刚刚用到的那些KNN顶点的距离。文中说这是用来防止deformation field落入local minima的，所以叫做priors</li></ol></li><li><figure><img src="https://s2.loli.net/2023/11/24/2d4HiJucZTotBxP.png" alt="image-20231124052407094" /><figcaption>image-20231124052407094</figcaption></figure><p>文中特意用上图强调了这里需要用到K近邻顶点，而不是单个最近的顶点。因为如果只用单个最近的顶点（图a），就不能提供不同的deformation pattern 的信息；而（b）里加上了K-NN distance之后，就能有这个deformation pattern信息了。（我有点疑惑什么是deformation pattern，就是这个表面的凹凸性吗？）</p></li></ol><h3 id="训练过程">训练过程</h3><ol type="1"><li>首先借用别的工具初始化一个mesh pose。但是这个pose不够精准，还需要finetune。文中提到这里直接是finetune per-frame pose parameter，而不用per-vertex offset，因为后者可能容易过拟合到local minima（？有点疑惑，我以为用pose parameter或许是有利于在后续用temporal consistency之类的，但是好像并没有用到；那pose param相比之下就是一个更不精准而已？）</li><li>训练时逐帧地同时 finetune mesh pose 和 NeRF。loss很直观：<ol type="1"><li>NeRF渲染图和原视频帧的L2 loss</li><li>正则 <span class="math inline">\(\|\theta-\theta^0\|^2_2\)</span>，是为了让每帧的pose finetune不至于太偏离初始估计</li></ol></li></ol><h3 id="实验">实验</h3><ol type="1"><li>训练要在v100上60小时；数据集用到People-Snapshot、DoubleFusion、ZJU-MoCap、Human3.6M；指标用PSNR和SSIM</li><li>在2022，没有什么能直接对比的其他工作，跟需要多视角视频输入的AniNeRF、底层架构很不同的A-NeRF、mesh-based 的方法VideoAvatar比了三下，比他们都好</li></ol><figure><img src="https://s2.loli.net/2023/11/24/r4V68kqj9HBdaxD.png" alt="image-20231124054314933" /><figcaption>image-20231124054314933</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D Computer Vision </tag>
            
            <tag> Human Reconstruction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KL散度 （Kullback-Leibler Divergence，相对熵）</title>
      <link href="/blog/KL%E6%95%A3%E5%BA%A6-%EF%BC%88Kullback-Leibler-Divergence,%E7%9B%B8%E5%AF%B9%E7%86%B5%EF%BC%89/"/>
      <url>/blog/KL%E6%95%A3%E5%BA%A6-%EF%BC%88Kullback-Leibler-Divergence,%E7%9B%B8%E5%AF%B9%E7%86%B5%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>References:</p><p><a href="https://zhuanlan.zhihu.com/p/45131536" class="uri">https://zhuanlan.zhihu.com/p/45131536</a></p><p><a href="https://hsinjhao.github.io/2019/05/22/KL-DivergenceIntroduction/" class="uri">https://hsinjhao.github.io/2019/05/22/KL-DivergenceIntroduction/</a></p><p><a href="https://www.jiqizhixin.com/articles/2018-05-29-2" class="uri">https://www.jiqizhixin.com/articles/2018-05-29-2</a></p></blockquote><h1 id="含义">含义</h1><ul><li>一句话：KL散度可以用来<strong>衡量两个分布之间的差异/匹配程度</strong>。但它并不是一个真正的度量或者距离，因为它不具有对称性。</li><li>广义的散度指的是一类运算，它将矢量空间上的一个矢量场对应到一个标量场上，通俗的讲，就是输入一组矢量，返回一个标量。</li><li>在统计学意义上来说，KL散度可以用来衡量两个分布之间的差异程度。若两者差异越小，KL散度越小，反之亦反。当两分布一致时，其KL散度为0。正是因为其可以衡量两个分布之间的差异，所以在VAE、EM、GAN中均有使用到KL散度。</li><li>在信息论中，其可理解为编码系统对信息进行编码时所需要的平均附加信息量。</li></ul><h1 id="定义">定义</h1><p><img src="https://s2.loli.net/2024/04/12/yDOmFUz2IMvjCbh.png" /></p><h3 id="理解熵">理解熵</h3><ul><li>熵是用来表示信息量。</li><li>首先，我们考虑一个离散的随机变量 <span class="math inline">\(x\)</span> 。当我们观察到这个变量的一个具体值的时候，我们接收到了多少信息呢？</li><li>信息量可以被看成在学习 <span class="math inline">\(x\)</span> 的值的时候的“惊讶程度”。如果有人告诉我们一个相当不可能的事件发生了，我们收到的信息要多于我们被告知某个很可能发生的事件发生时收到的信息。如果我们知道某件事情一定会发生，那么我们就不会接收到信息。于是，我们对于信息内容的度量将依赖于概率分布<span class="math inline">\(p(x)\)</span> ，因此我们想要寻找一个函数<span class="math inline">\(h(x)\)</span> ，它是概率<span class="math inline">\(p(x)\)</span>的单调递增函数，表达了信息的内容。 <span class="math inline">\(h(.)\)</span> 的形式可以这样寻找：如果我们有两个不相关的事件 x 和 y ，那么我们观察到两个事件同时发生时获得的信息应该等于观察到事件各自发生时获得的信息之和，即 <span class="math inline">\(h(x)+h(y)=h(x,y)\)</span> 。两个不相关事件是统计独立的，因此<span class="math inline">\(p(x)p(y)=p(x,y)\)</span>。根据这两个关系，很容易看出<span class="math inline">\(h(.)\)</span>一定与<span class="math inline">\(p(.)\)</span> 的对数有关。因此，我们有： <span class="math display">\[ h(x)=-\log p(x)\]</span> 其中，负号确保了信息一定是正数或者是零。注意，低概率事件<span class="math inline">\(x\)</span> 对应于高的信息量。</li><li>现在假设一个发送者想传输一个<strong>随机变量</strong>的值给接收者。这个过程中，他们传输的<strong>平均信息量</strong>通可以通过求上式关于概率分布 p(x) 的期望得到。这个期望值就是熵Entropy： <span class="math display">\[  H[x]=-\sum_x p(x)\log p(x)\]</span></li><li>它是这个随机变量的平均信息量。</li></ul><h2 id="kl散度的性质">KL散度的性质</h2><ol type="1"><li><span class="math inline">\(D_{KL}(p||q)&gt;=0\)</span>， 当且仅当<span class="math inline">\(p(x)=q(x)\)</span>时取等号</li><li>不满足对称性，即<span class="math inline">\(D_KL(p||q)\neq D_KL(q||p)\)</span></li></ol><h1 id="讨论">讨论</h1><ul><li>KL散度是不对称的。因此不能作为一个距离度量，在使用时往往有一些问题。</li><li>那么就可以用<span class="math inline">\(\alpha\)</span>-散度。KL散度是它的一个特殊化。根据这个，还能算出一个对称的Hellinger距离，它的平方根是一个合法的距离度量</li><li>还可以推广到F散度：把KL散度公式中的<span class="math inline">\(\log\)</span>函数替换为任意的函数f，只要f满足这两个条件：<ol type="1"><li>f是一个凸函数</li><li><span class="math inline">\(f(1)=0\)</span> 此时F散度的表达式为： <span class="math display">\[  D_f(p\|q)=\int q(X)f(\frac{p(X)}{q(X)})dX\]</span> 当<span class="math inline">\(f(X)=X\log X\)</span>时，就是KL散度了。</li></ol></li><li>Bregman散度：这是从另一个角度来思考“距离”。最常见的均方欧氏距离，推广到任意维度的函数之间的距离，同样只是需要一个凸函数就能表达了。这个凸函数的取值，可以表示一大片不同的散度，都属于Bregman散度的特例</li><li>Wasserstein距离。这是用来解决一个问题的：如果两个分布离得太远，完全没有重叠，那么KL散度的值会失去意义。这在深度学习中意味着这一点梯度为0——梯度消失！ Wasserstein距离可以解决这种问题，也叫做Earth-Mover（推土机）距离：当我们希望把一堆土推移成另一堆土的形状和位置，推土代价定义为<strong>移动土的量*土移动的距离</strong>，这个代价就是两个分布的Wasserstein距离。 Wessertein距离相比KL散度和JS散度的<strong>优势</strong>在于：即使两个分布的支撑集没有重叠或者重叠非常少，仍然能反映两个分布的远近。WGAN就是Wasserstein距离比较经典的应用之一。</li></ul><h1 id="信息的压缩">信息的压缩</h1><ol type="1"><li>假如我们有一组样本，每个样本分别有不同的值。可以直接记下每个样本的信息。</li><li>也可以用这个样本的分布来表示同样的信息量。（每个取值的概率）</li><li>还可以用一个已知的分布来表示这个分布（比如均匀分布、二项分布、正态分布），只需要记下具体分布的参数。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Handy: Towards a high fidelity 3D hand shape and appearance model</title>
      <link href="/blog/Reading-Handy-Towards-a-high-fidelity-3D-hand-shape-and-appearance-model/"/>
      <url>/blog/Reading-Handy-Towards-a-high-fidelity-3D-hand-shape-and-appearance-model/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://rolpotamias.github.io/Handy/" class="uri">https://rolpotamias.github.io/Handy/</a></p><p>作者：Rolandos Alexandros Potamias, Stylianos Ploumpis, Stylianos Moschoglou, Vasileios Triantafyllou, Stefanos Zafeiriou. From Imperial College London and Cosmos.</p><p>发表： CVPR23</p><p>链接： <a href="https://github.com/rolpotamias/handy" class="uri">https://github.com/rolpotamias/handy</a></p><hr /><figure><img src="https://github.com/rolpotamias/handy/raw/main/figures/teaser_fig.png" alt="handy" /><figcaption>handy</figcaption></figure><blockquote><p>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</p></blockquote><p>Q：我感觉这个任务听起来还挺直观的，就是用GAN去训练外观，定义一些更多vertices的mesh template，用超级大量的样本去训练堆效果嘛？hand model的定义会有什么新意吗？我倒是想不出来。</p><p>A：确实很直观，hand model的定义没什么太大区别。贡献点主要在于：1. 很大很好很variant的新数据集，造成了很好的Handy 2. 用StyleGAN来学texture，而不是传统的PCA，得到的texture更高频细节，更好。</p><h2 id="why">Why：</h2><ol type="1"><li>VR AR发展，对人手的建模、追踪和重建的研究变得流行，因为手是一个重要的显示人的行为的东西</li><li>大部分工作基于MANO，只有很粗糙的low polygon count，而且只基于31个样本构建，distribution不够宽</li><li>大部分工作都忽略了材质的构建</li></ol><h2 id="what">What：</h2><ol type="1"><li>提出一个large-scale的hand model，包含了形状和外观，用超过1200个人类样本训练，样本有large diversity</li><li>构建Synthetic dataset，训练一个hand pose estimation网络，从单张图像中重建手</li><li>提出一个基于GAN的有高频细节的手的外观+形状重建方法，即使是in-the-wild的单视角图像作为输入</li></ol><p>读前疑问：</p><ol type="1"><li>看上去作者是用NeRF做了一个high fidelity的hand model。我不太清楚技术细节如何实现，尤其是nerf如何跟parametric model结合，如果训练一个nerf layer，让它可以根据单张输入图像infer一个新手。不知道我哪里来的误解，总之不是用的nerf诶……</li><li>fig 1 看上去效果有点假……似乎是皮肤反光率的问题，用的什么lighting representation呢？没什么representation，纯粹用PCA去掉了阴影成分</li><li>居然连皱纹、血管、指甲油也能出来，确实是高频细节了。有针对这些东西做特别的优化吗？还是全是那个style-based GAN的功劳，或者大样本量的功劳呢？真是大力出奇迹呀。还真就是GAN的功劳……？</li></ol><h2 id="how">How：</h2><h3 id="收集large-scale数据集">1. 收集large-scale数据集</h3><p>raw scan：3000 vertices meshes。1208个人，包括关于他们的meta data，比如性别，年龄，身高，种族等。这些人的diversity比较大</p><h3 id="形状重建">2. 形状重建</h3><ol type="1"><li>对齐3D scans 和 mesh template<ol type="1"><li>用了两组template，一个是低分辨率的MANO，它可以直接用进SMPL人体模型中，有778个顶点；一个是高分辨的template，有8407个顶点</li><li>获得稠密的correspondence的方法是：<ol type="1"><li>从多视角渲染这些raw scans，用MediaPipe来检测2D关键点</li><li>用linear triangulation来把2D关键点转换到3D；利用手指骨架到表面尖端的投影来检测指尖。</li><li>用3D关键点来把template和3D scans的表面对齐</li><li>用Non-rigid Iterative Closest Point algorithm (NICP)来registration，寻找稠密的顶点对应关系</li></ol></li></ol></li><li>转换成规范的张开手掌的姿势<ol type="1"><li>用PCA构建一个手部形状模型。</li><li>公式和MANO几乎一样，<span class="math inline">\(\beta\)</span> <span class="math inline">\(\theta\)</span> 两个参数，分别是形状和姿势参数。</li></ol></li></ol><h3 id="高分辨率外观模型">3. 高分辨率外观模型</h3><ol type="1"><li>叫一个图像学艺术家（😳）设计了一个UV template，把scans给unwrap成那样了</li><li>对UV textures进行预处理，去掉阴影和光照：用PCA来识别描述阴影的因素，然后把这些因素去掉。（PCA居然这么好用？！）</li><li>用一个图像处理步骤，将手部纹理映射到更自然的颜色，包括增加亮度，伽玛校正，以及调整色调。</li><li>训练过程：不像其他方法那样直接把外观空间映射到一个低频PCA域，而是用GAN来建模材质。学习率较小，0.001；一个正则权重50也很有效。（啊？这个GAN就这么一句带过吗？直接用的StyleGANv3？）</li></ol><h3 id="实验">实验</h3><ol type="1"><li>和MANO比hand model：<ol type="1"><li>更紧致，5个主成分表现90% variance，mano需要9个才行</li><li>泛化到数据集外的手的能力更强</li><li>特异性误差（specificity error）？衡量生成的手和ground truth的误差</li></ol></li><li>重建小孩的手，效果更好</li><li>从单张图像进行3D重建：<ol type="1"><li>生成数据集：用自己训的GAN模型生成30000张图像，为了更真实，渲染的手跟ShapeNet中的物体有交互，以及是和用SMPL表示的人放在一起的</li><li>模型直接参考3，14，16；加了一个预测材质参数的分支</li><li>loss：L2 between estimated and gt shape parameter， pose parameter，and 3D vertices； L1 between estimated and gt UV map；L1 between estimated and gt 2D image；LPIPS loss on two images</li><li>另外设计了in-the-wild数据集，用预训练的模型预测handy 姿势、形状和材质参数，然后只优化材质参数w来拟合材质。</li><li>优化函数包括L1 and LPIPS loss on two images，以及一个对w的L2正则。得到了改进的材质参数w‘之后，finetune回归网络。</li><li>为了定量评估所提出方法的纹理重建，我们向网络提供数据中使用的扫描设备的图像。gt UV map用的是之前registration后得到的。（我不理解诶，这样真的能跟HTML公平比较吗？一方面你的handy就是从这些数据中来的，当然能对in-distribution的东西拟合得更好啊？另一方面HTML生成的UV map和你的定义是一样的吗？这个gt UV map对它来说有用吗？）</li><li>结论是：handy+GAN能得到高频细节，甚至皱纹、戒指、纹身、指甲油、白癜风之类的；handy+PCA会过渡平滑，甚至对肤色的重建失败；HTML更不行。</li></ol></li><li>Test on FreiHand 刷新了指标，7.8 MPVPE and MPJPE……</li><li>从点云重建形状和姿势。降维打击了MANO和LISA，即使用Hand+MANO+10个PCA Components，也比其他方法好很多……</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D Computer Vision </tag>
            
            <tag> NeRF </tag>
            
            <tag> Hand </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT Applications to be explored</title>
      <link href="/blog/ChatGPT-Applications-to-be-explored/"/>
      <url>/blog/ChatGPT-Applications-to-be-explored/</url>
      
        <content type="html"><![CDATA[<p>今天逛 github，发现了一些很 amazing 的chatgpt applications，摘录一些感兴趣的精华在此。真是感慨：LLM 以来天天风云变幻，弄潮儿在前面兴风作浪，我在后面望其项背……</p><ol type="1"><li><p>(Useful) egoist / openai-proxy</p><p>用 Vercel 开一个小的 Proxy server，转发 gpt API，这样可以绕开有些国家地区的 IP 限制</p></li><li><p>BuilderIO / ai-shell</p><p>在命令行里使用 chatgpt，把自然语言转化成 Linux commands，命令是 <code>ai [texts]</code></p></li><li><p>eli64s / readme-ai</p><p>一个轻量的 script，根据 repository 生成酷炫的 readme 文件</p></li><li><p>efJerryYang / chatgpt-cli</p><p>命令行 chatgpt client</p></li><li><p>yufeikang / ai-cli</p><p>另一个命令行 chatgpt client（实测的时候再对比一下这俩）</p></li><li><p>mukulpatnaik / researchgpt</p><p>输入论文 PDF 文件，然后和 gpt 聊论文。一个用 Flask 开发的 web client 貌似，可以再仔细看一下咋实现的，挺有意思</p></li><li><p>(⭐️ Amazing) AntonOsika / gpt-engineer</p><p>很方便安装，pip install 就好了！直接通过描述 + AI 追问 + 补充细节，生成一个代码项目</p></li><li><p>(⭐️ Amazing) Yidadaa / ChatGPT-Next-Web</p><p>好像很实用的 web GUI！一键部署到 Vercel。我找这玩意主要是为了直接用 API 访问 GPT-4，就不用订阅每个月的 ChatGPT Plus 了，后者太贵了，也用不了那么多</p></li></ol><p><img src="https://s2.loli.net/2023/07/17/QU2X5ckaCmyJeGv.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Back to Homeland</title>
      <link href="/blog/Back-to-Homeland/"/>
      <url>/blog/Back-to-Homeland/</url>
      
        <content type="html"><![CDATA[<p>今天，恩施的傍晚似乎没有夕阳。天空是深蓝色，深山上有几只黑鸟掠过。厚重的狗叫声。我闻到一种使我感到悲戚的气味，或许是和过去某种悲戚的回忆联系起来。具体回忆内容倒也记不清。明天我要走了，我说要吃点辣的，去了南边又没有了。结果还是去吃了潮汕牛肉。妈妈今天比较易怒，我看得到她的伤感。</p><p>回国，这个词对我来说不算什么，身处国内的时候，自己是没有概念的。只有在国外的时候，才对国内有概念。这一点真是讽刺。国内的时间匆匆而过，以前会为了在国外多待几年而争取，争取到了又雀跃。现在真要待那么多年了，才感到自己正坐在什么飞驰而远去的列车上。</p><p>人生在世，奔头这个词，我是想解构它的。人活着不为了什么，活就活了。可是我分明在努力什么，在抓住些什么。嘴硬罢了，谁能超凡脱俗，没点惦念的东西？亲人，向往的某种生活，成就感，这就是我的奔头。只是：停在原地原来是一种幸运，也是一种特权。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>奶奶</title>
      <link href="/blog/Grandma/"/>
      <url>/blog/Grandma/</url>
      
        <content type="html"><![CDATA[<p>奶奶身体还好，但心态不好。健忘、固执，自闭，悲观。她几乎没有什么盼头了。她觉得活得失败，活得不好。她觉得如今脸上无光。她说：</p><p>我最痛恨别人，半熟不熟的人见面，跟你打招呼，问你家里近况怎么样。我很生气，简直想骂回去。可是你骂了吧，人家觉得你是神经病。可是我要怎么回答呢？我这两个儿子，一个工作都丢了，一个身体又那样不好。</p><p>我命苦啊。我从小家里穷，也没人管我。13岁就出去工作养活自己了。跟了你爷爷，过的都是苦日子。他一个月三十四块五角钱，二十块钱给他爸妈，雷打不动的。家里饭都吃不起了，也要给。剩下十四块五，十块钱给我，他留四块五。抽最差的烟，走得那么早。</p><p>我要管家里所有事。他什么也不管啊，一日三餐，他妈，两个儿子，去河边洗衣服。我还要上班。我每天都好累。</p><p>好不容易，日子稍微好一点了。他又走了！我那时简直恨他。</p><p>别看我现在这样，现在是我最轻松的日子。共产党给我发钱。所以我说，感谢共产党。我拿自己的钱，过自己的日子！就是记性不好。人活到连自理能力也没有了，还有什么意思。跟你爸说好了，到时候我死在这间屋子了，就火化。我都看得开。</p><p>死！我听到就眼泪直湍湍地流。奶奶说，不说这个了。她也抹眼泪。</p><p>奶奶一个月领三千多退休工资，自己省吃俭用，只花得了一千多。剩的，存在那，每年寒暑假我和妹妹去看她，她发给我们。</p><p>我说爸爸，你帮我把钱退给她。</p><p>爸爸说你拿着。她自己花不完，这钱不给你们，她拿着有什么用了？给了她安心。</p><p>我走的时候，她送出屋子，送到楼梯口。</p><p>我走远了，爸爸说，你回头再给奶奶挥挥手，你看她在阳台上看你呢。</p><p>我转头看到一簇花白的头发，远远的，很小。</p><p>能不能不要有离别呢？</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Solutions to Common Problems in Pytorch3D Rendering</title>
      <link href="/blog/Solutions-to-Common-Problems-in-Pytorch3D-Render/"/>
      <url>/blog/Solutions-to-Common-Problems-in-Pytorch3D-Render/</url>
      
        <content type="html"><![CDATA[<h1 id="pytorch3d-rendering-的一些疑难杂症">Pytorch3D Rendering 的一些疑难杂症</h1><p>有哪些？</p><ol type="1"><li>有了相机内参 K，而render又需要NDC坐标系，那要怎么定义相机？</li><li>图像的黄蓝色反了？</li><li>render 完的图像锯齿很严重？怎么抗锯齿（Antialiasing）？</li><li>皮肤表面反光太强，光滑得像镜面一样，怎样更自然？</li><li>怎么物体只剩半截，更远的部分似乎被截掉了？</li><li>没解决的问题：PBR（physical based rendering）</li></ol><span id="more"></span><h3 id="有了相机内参-k而render又需要ndc坐标系那要怎么定义相机">1. 有了相机内参 K，而render又需要NDC坐标系，那要怎么定义相机？</h3><p>这里的坑在于，camera本身支持任意坐标系，比如Freihand提供的是screen是224*224的相机坐标系。但是，render是默认NDC坐标系的！也就是normalized coordinate system，x和y是normalized到[-1,1]的。</p><p>一开始我直接把相机内参传给<code>PerspectiveCameras</code>，并且定义我的相机screen是224*224，像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cameras = PerspectiveCameras(K=ks, image_size=((<span class="number">224</span>,<span class="number">224</span>),))</span><br></pre></td></tr></table></figure><p>完全不报错，就是有问题：render 过后没东西在画面上。</p><h4 id="解决">解决：</h4><p>我最后在<a href="https://pytorch3d.org/docs/cameras">官方文档</a>找到不起眼的一句：</p><blockquote><p>The PyTorch3D renderer for both meshes and point clouds assumes that the camera transformed points, meaning the points passed as input to the rasterizer, are in PyTorch3D's NDC space.</p></blockquote><figure><img src="https://user-images.githubusercontent.com/669761/145090051-67b506d7-6d73-4826-a677-5873b7cb92ba.png" alt="（世界坐标系 -&gt; 相机坐标系 -&gt; ndc坐标系 -&gt; 图像坐标系）" /><figcaption>（世界坐标系 -&gt; 相机坐标系 -&gt; ndc坐标系 -&gt; 图像坐标系）</figcaption></figure><p>我一看，原来默认PerspectiveCameras是ndc坐标系的，<code>in_ndc = False</code> by default！</p><p>所以解决方法就是：</p><blockquote><p>Screen space camera parameters are common and for that case the user needs to set <code>in_ndc</code> to <code>False</code> and also provide the <code>image_size=(height, width)</code> of the screen, aka the image.</p></blockquote><p>那么加一个参数就好了，可是谁知道这问题困扰了我整整两三天：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cameras = PerspectiveCameras(K=ks, in_ndc=<span class="literal">False</span>, image_size=((<span class="number">224</span>,<span class="number">224</span>),))</span><br></pre></td></tr></table></figure><p>另外，我还找到了如下这个等价方法，是先把内参转到NDC坐标系，再传给<code>PerspectiveCameras</code>。（至于为什么探索到这个方法，在后面问题 3 里可以找到原因…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ndc_fcl_prp</span>(<span class="params">Ks</span>):</span></span><br><span class="line">        ndc_fx = Ks[:, <span class="number">0</span>, <span class="number">0</span>] * <span class="number">2</span> / <span class="number">224.0</span></span><br><span class="line">        ndc_fy = Ks[:, <span class="number">1</span>, <span class="number">1</span>] * <span class="number">2</span> / <span class="number">224.0</span></span><br><span class="line">        ndc_px = - (Ks[:, <span class="number">0</span>, <span class="number">2</span>] - <span class="number">112.0</span>) * <span class="number">2</span> / <span class="number">224.0</span></span><br><span class="line">        ndc_py = - (Ks[:, <span class="number">1</span>, <span class="number">2</span>] - <span class="number">112.0</span>) * <span class="number">2</span> / <span class="number">224.0</span></span><br><span class="line">        focal_length = torch.stack([ndc_fx, ndc_fy], dim=-<span class="number">1</span>)</span><br><span class="line">        principal_point = torch.stack([ndc_px, ndc_py], dim=-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> focal_length, principal_point</span><br><span class="line"></span><br><span class="line">fcl, prp = get_ndc_fcl_prp(Ks)</span><br><span class="line">cameras = PerspectiveCameras(focal_length=-fcl, principal_point=prp)</span><br></pre></td></tr></table></figure><p>注意<code>focal_length=-fcl</code>，这个负号是为什么呢？这是另一个坑了哈哈哈哈。</p><p>答案是：pytorch3d坐标系的convention和我的相机不一样，它是+X指向左，+Y指向上，+Z指向图像平面外。这其中有个上下左右镜像的关系。</p><h3 id="图像的黄蓝色反了">2. 图像的黄蓝色反了？</h3><p>cv2的图像是BGR（老生常谈了），pytorch3d的是RGB。如果图像的黄蓝色相反了，基本就是这个问题，需要翻转一下，可以用torch的<code>clip(dim=(2,))</code></p><h3 id="render-完的图像锯齿很严重怎么抗锯齿antialiasing">3. render 完的图像锯齿很严重？怎么抗锯齿（Antialiasing）？</h3><p>锯齿就是说像下图这样，物体的边缘很尖锐，像素点粒粒分明！</p><figure><img src="https://s2.loli.net/2023/04/23/6gx5DEXJK9uMGwS.png" alt="rand_4_skin_rendered_bad" /><figcaption>rand_4_skin_rendered_bad</figcaption></figure><p>下面是我抗锯齿处理后的效果，可以看见边缘柔和了很多：</p><figure><img src="https://s2.loli.net/2023/04/23/LAchPHVfImRtkDs.png" alt="rand_4_skin_rendered" /><figcaption>rand_4_skin_rendered</figcaption></figure><p>（我真的搞了一周这个问题……看看我的心路历程：</p><ol type="1"><li>是不是 camera 没有用 NDC，而是直接用224x224的坐标系，导致投影过程有损失？所以我试了先转换成 NDC 坐标系的相机，再render。答案是，没有影响。</li><li>是不是 Shader 的参数设置得不对，比如 <code>blur_radius</code> 和 <code>faces_per_pixel</code> 应该调大一些？这其实是一个很直观的想法了，甚至一个有经验的学长看了之后都告诉我应该是这个问题。可是当我疯狂调大这两个参数，发现并没有改变这个问题。blur_radius 只会让物体内部的材质更模糊，但是边缘的锯齿完全没改变。faces_per_pixel更是无益，几乎不影响效果。</li><li>是不是图像尺寸太小了（224x224），只能达到这么个效果？我首先测试了调大图像尺寸，到<code>1024x1024</code>，发现锯齿边缘的确是不明显了！可是我又看了相机拍摄的原始图像，虽然是有点模糊，但是不至于这么大的锯齿呀，肯定还有别的问题。）</li></ol><h4 id="解决-1">解决：</h4><p>终于，在这个issue里找到同样的问题：https://github.com/facebookresearch/pytorch3d/issues/399</p><p>解决方案是：</p><blockquote><p>render at a higher resolution and then use average pooling to reduce back to the target resolution</p></blockquote><p>居然这么暴力……不过issue里面有很详细的解释，也能理解，这就是render原理之外需要考虑的事情，甚至算不上什么bug。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">aa_factor = <span class="number">3</span> <span class="comment"># Anti-aliasing factor</span></span><br><span class="line">raster_settings_soft = RasterizationSettings(</span><br><span class="line">        image_size=<span class="number">224</span> * aa_factor, </span><br><span class="line">    )</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">images = renderer(mesh)</span><br><span class="line">images = images.permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># NHWC -&gt; NCHW</span></span><br><span class="line">images = F.avg_pool2d(images, kernel_size=aa_factor, stride=aa_factor)</span><br><span class="line">images = images.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)  <span class="comment"># NCHW -&gt; NHWC</span></span><br></pre></td></tr></table></figure><h3 id="皮肤表面反光太强光滑得像镜面一样怎样更自然">4. 皮肤表面反光太强，光滑得像镜面一样，怎样更自然？</h3><p>一开始，皮肤 render 出来像这样，跟陶瓷似的，像话吗：</p><figure><img src="https://s2.loli.net/2023/04/23/8NWzr7txYKyqRk6.png" alt="rand_4_skin_rendered_bad2" /><figcaption>rand_4_skin_rendered_bad2</figcaption></figure><p>改进后，效果这样，自然多了：</p><figure><img src="https://s2.loli.net/2023/04/23/4qHNOs58ZhEI6Ry.png" alt="rand_4_skin_rendered_big" /><figcaption>rand_4_skin_rendered_big</figcaption></figure><h4 id="解决-2">解决：</h4><p>其实搞清楚材质相关的一些参数就好了。主要来说，这个反光是由这两个量决定的：</p><ol type="1"><li><code>specular_color</code>: specular reflectivity of the material，指定镜面反射颜色，在表面有光泽和镜面般的地方看到的颜色。</li><li><code>shininess</code>：定义材质中镜面反射高光的焦点。 值通常介于 0 到 1000 之间，较高的值会产生紧密、集中的高光。</li></ol><p>注意这里是改物体material的这些参数。虽然lighting也有这些参数定义，但这是关于光源的，和这个反光没有关系。</p><p>所以修改很简单：定义materials类，调整<code>specular_color</code>。默认是<code>1,1,1</code>，就是纯白色；调成<code>0.2,0.2,0.2</code>比较适合人的皮肤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pytorch3d.renderer <span class="keyword">import</span> Materials</span><br><span class="line"></span><br><span class="line">materials = Materials(</span><br><span class="line">    specular_color=((<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>),), <span class="comment"># 默认是1,1,1，就是纯白色；测试发现调成0.2,0.2,0.2比较适合人的皮肤。</span></span><br><span class="line">    shininess=<span class="number">30</span>, <span class="comment"># 默认值是 64，看上去高光稍微有点聚集了，改成30的话略自然，差别不太明显</span></span><br><span class="line">)</span><br><span class="line"> renderer_p3d = MeshRenderer(</span><br><span class="line">    rasterizer=MeshRasterizer(),</span><br><span class="line">    shader=HardPhongShader(</span><br><span class="line">        materials=materials,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="怎么物体只剩半截更远的部分似乎被截掉了">5. 怎么物体只剩半截，更远的部分似乎被截掉了？</h3><p>还是一只手的模型，render 出来居然只有半个手背，距离相机更远的部分像是被截断了：</p><figure><img src="https://s2.loli.net/2023/04/23/imzqovVyWfnK3Fs.png" alt="rand_1_skin_rendered_half" /><figcaption>rand_1_skin_rendered_half</figcaption></figure><p>改进后，正常的效果应该是这样才对：</p><figure><img src="https://s2.loli.net/2023/04/23/gSJ5wm74RUjHODY.png" alt="rand_1_skin_rendered_full" /><figcaption>rand_1_skin_rendered_full</figcaption></figure><p>所以问题出在哪呢？的确是“更远的部分被截掉了”。我找到了<code>RasterizationSettings</code>里有这么一个相关的参数：</p><ul><li>z_clip_value: if not None, then triangles will be clipped (and possibly subdivided into smaller triangles) such that z &gt;= z_clip_value. This avoids camera projections that go to infinity as z-&gt;0. Default is None as clipping affects rasterization speed and should only be turned on if explicitly needed. See clip.py for all the extra computation that is required.</li></ul><p>可是问题不在这个参数上，因为它的默认值就是None，应该在后续都没有影响。</p><h4 id="解决-3">解决：</h4><p>经过仔细看源码，我发现问题出在<code>SoftPhongShader</code>……具体来说，在<code>shader.py</code> 第138-139行，<code>SoftPhongShader</code>的<code>forward</code>函数里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">znear = kwargs.get(<span class="string">&quot;znear&quot;</span>, <span class="built_in">getattr</span>(cameras, <span class="string">&quot;znear&quot;</span>, <span class="number">1.0</span>))</span><br><span class="line">zfar = kwargs.get(<span class="string">&quot;zfar&quot;</span>, <span class="built_in">getattr</span>(cameras, <span class="string">&quot;zfar&quot;</span>, <span class="number">100.0</span>))</span><br></pre></td></tr></table></figure><p>居然有一个默认的z范围[1,100]……………………所以其实是我的mesh的scale太大了，再加上相机的dist比较大，整个深度就超过zfar了。所以有两种方法，要么缩小一下mesh的尺度；要么不想改变原数据的话，在render的时候，把<code>znear</code> <code>zfar</code>参数额外传入，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">images = renderer(mesh, ..., znear=-<span class="number">2.0</span>, zfar=<span class="number">1000.0</span>)</span><br></pre></td></tr></table></figure><h3 id="没解决的问题pbrphysical-based-rendering">6. 没解决的问题：PBR（physical based rendering）</h3><p>我的数据中3D mesh的材质用了PBR（physical based rendering）。它提供三张贴图图像：diffuse map，specular map和normal map。</p><p>但是pytorch3d目前并不支持PBR inspired shading（see <a href="https://github.com/facebookresearch/pytorch3d/issues/174">issue</a>）。</p><p>所以目前我只能把diffuse map作为一般意义上的texture map，而忽略了specular map和normal map这两张图。</p><p>我不确定能不能自己实现这部分功能，比如自定义 <code>phong_shading</code>函数（参考<a href="https://github.com/facebookresearch/pytorch3d/issues/865">issue</a>）。但这有点超出我的能力范围和精力范围，所以暂时搁置了。如果能实现的话，PyTorch3D 似乎是欢迎contribution的（<a href="https://github.com/facebookresearch/pytorch3d/issues/174">issue</a>）</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> 3D Computer Vision </tag>
            
            <tag> Pytorch3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Camera projection with the pinhole model</title>
      <link href="/blog/Camera-Model-Notes/"/>
      <url>/blog/Camera-Model-Notes/</url>
      
        <content type="html"><![CDATA[<p>A camera is a mapping between the 3D world (object space) and a 2D image.</p><p>In general, the camera projection matrix P has 11 degrees of freedom: <span class="math display">\[P=K[R\ \ \ t]\]</span></p><table><thead><tr class="header"><th>Component</th><th># DOF</th><th>Elements</th><th>Known As</th></tr></thead><tbody><tr class="odd"><td>K</td><td>5</td><td><span class="math inline">\(f_x, f_y, s,p_x, p_y\)</span></td><td>Intrinsic Parameters; camera calibration matrix</td></tr><tr class="even"><td>R</td><td>3</td><td><span class="math inline">\(\alpha,\beta,\gamma\)</span></td><td>Extrinsic Parameters</td></tr><tr class="odd"><td>t (or <span class="math inline">\(\tilde{C}\)</span>)</td><td>3</td><td><span class="math inline">\((t_x,t_y,t_z)\)</span></td><td>Extrinsic Parameters</td></tr></tbody></table><p>3D world frame ----- R, t ----&gt; 3D camera frame ------ K -----&gt; 2D image</p><p>Explanation:</p><ul><li><p>P: Projective camera, maps 3D world points to 2D image points.</p></li><li><p>K: Camera calibration matrix, 3 x 3, <span class="math inline">\(x=K[I|0]X_{cam}\)</span>, given 3D points in camera coordinate frame <span class="math inline">\(X_{cam}\)</span>, we can project it into 2D points on image <span class="math inline">\(x\)</span>.</p><p><img src="https://s2.loli.net/2023/04/02/FEe9lM5t3TJKgyL.png" alt="K" style="zoom:50%;" /></p></li><li><p>R and t: Camera Rotation and Translation, rigid transformation. <span class="math inline">\(X_{cam}=( X,Y,Z,1)^T\)</span> is expressed in the camera coordinate frame. In general, 3D points are expressed in a different Euclidean coordinate frame, known as the <strong>world coordinate frame</strong>. The two frames are related via a rigid transformation (R, t).</p></li></ul><h3 id="some-other-terms-you-may-see">Some other terms you may see</h3><ul><li><p><strong>P</strong>: 3x4, homogeneous, camera projection matrix, <span class="math inline">\(P=diag(f,f,1)[I|0]\)</span>. P is K without considering <span class="math inline">\((x_{cam},y_{cam})\)</span> in the image. (In other words, it simplify <span class="math inline">\((p_x, p_y)=(0,0)\)</span>.</p><p><img src="https://s2.loli.net/2023/04/02/TlcW7QFhOAXK6sY.png" alt="P" style="zoom:50%;" /></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Academic Page in Jekyll + Blog in Hexo together</title>
      <link href="/blog/Configure-Academic-Page-in-Jekyll-Blog-in-Hexo-together/"/>
      <url>/blog/Configure-Academic-Page-in-Jekyll-Blog-in-Hexo-together/</url>
      
        <content type="html"><![CDATA[<h2 id="difficult-situations">Difficult situations:</h2><ol type="1"><li>The Academic page is powered by <a href="http://jekyllrb.com/">Jekyll</a>, while the blog website is powered by Hexo.</li><li>And they are maintained in two separated repositories on Github.</li><li>Besides <code>[username].github.io</code>, I have a domain <code>jyzhu.top</code>, and want to use my custom domain.</li><li>All in all, I hope to visit the academic page is at <a href="jyzhu.top" class="uri">jyzhu.top</a>, while visit the blog is at <a href="jyzhu.top/blog" class="uri">jyzhu.top/blog</a>.</li></ol><h2 id="now-lets-configure.">Now let's configure.</h2><ol type="1"><li><p>Rename the blog repo as <code>blog</code>; rename the academic page repo as <code>[username].github.io</code>.</p></li><li><p>Edit the blog's Hexo config file:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://jyzhu.top/blog</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog/</span></span><br></pre></td></tr></table></figure><p><em>While no need to move all the files into a subfolder <code>blog</code> of your repo.</em></p><p>The Jekyll config is simple. Nothing needs to specify.</p></li><li><p>Edit the Github repo settings. Set the academic repo's <strong>custom domain</strong> as <code>jyzhu.top</code>. A <code>CNAME</code> file will be automatically added in the root. Now obviously, the <code>jyzhu.top</code> successfully refers to the academic page.</p><p>Then you know what, everything is done! Because all other repos with github page turns on, are automatically mapped to subpaths of <code>[username].github.io</code> by Github. Then coz <code>[username].github.io</code> is mapped to <code>[url]</code>, everything will be there, including <code>[url]/blog</code> for the <code>blog</code> repo.</p></li></ol><h2 id="todo">TODO</h2><p>The <code>hexo-douban</code> plugin cannot render styles now. Need to fix.</p><p><em>Update</em>:</p><ol type="1"><li>updated hexo-douban to the latest version</li><li>edit the file path of <code>loading.gif</code> in the <code>index.js</code> of this plugin</li></ol><p>then it seems ok now.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>齐次坐标系</title>
      <link href="/blog/homogeneous-coordinates/"/>
      <url>/blog/homogeneous-coordinates/</url>
      
        <content type="html"><![CDATA[<h1 id="齐次坐标系">齐次坐标系</h1><p>之前不理解为什么要用一个和从小到大学的笛卡尔坐标系不同的齐次坐标系来表示东西，并且弄得很复杂；学了各种公式也很糊涂。现在终于明白了</p><h2 id="齐次坐标系的现实意义">齐次坐标系的现实意义</h2><p>就是用来表示现实世界中我们眼睛看到的样子：两条平行线在无限远处能相交。 <embed src="https://pic4.zhimg.com/80/v2-dc3c0223dd24d2084fcda13b2d0e60f3_1440w.webp" /></p><h2 id="齐次坐标系的本质">齐次坐标系的本质：</h2><p>就是用N+1维来代表N维坐标。</p><p>也就是说，原本二维空间的点<span class="math inline">\((X,Y)\)</span>，增加一个维度，用<span class="math inline">\((x,y,w)\)</span>来表示。把齐次坐标转换成笛卡尔坐标是很简单的，对前两个维度分别除以最后一个维度的值，就好了，即 <span class="math display">\[X=\frac x w,\  Y=\frac y w\\ (X,Y)=(\frac x w,\frac y w)\]</span> <embed src="https://pic2.zhimg.com/80/v2-da28eed57fda0fc6a06b7122be5f2a1d_1440w.webp" /></p><p>这样做就可以表示两条平行线在远处能相交了！why？</p><p>要解释这个，需要先解释一个齐次坐标系的特点：规模不变性（也是叫homogeneous这个名字的原因）。也就是说，对任意非零的k，<span class="math inline">\((x,y,w)\)</span>和<span class="math inline">\((kx,ky,kw)\)</span>都表示二维空间中同一个点<span class="math inline">\((\frac x w,\frac y w)\)</span>。（因为<span class="math inline">\(\frac{kx}{kw}=\frac xw\)</span>嘛。）</p><p>首先，用原本笛卡尔坐标系中的表示方法，无限远处的点会被表示成<span class="math inline">\((\infty,\infty)\)</span>，从而失去意义。但是我们发现用齐次坐标，我们就有了一个方法明确表示无限远处的任意点，即，<span class="math inline">\((x,y,0)\)</span>。（为什么？因为把它转换回笛卡尔坐标，会得到<span class="math inline">\((\frac x 0,\frac y 0)=(\infty,\infty)\)</span>）。</p><p>现在，用初中所学，联立两条直线的方程，得到的解是两条直线的交点。假如有两条平行线<span class="math inline">\(Ax+By+C=0\)</span>和<span class="math inline">\(Ax+By+D=0\)</span>，求交点，则 <span class="math display">\[\left\{\matrix{Ax+By+C=0 \\Ax+By+D=0}\right.\]</span> 在笛卡尔坐标系中，可知唯一解是<span class="math inline">\(C=D\)</span>，即两条线为同一条直线。</p><p>但是，如果把它换成齐次坐标，得到 <span class="math display">\[\left\{\matrix{A\frac x w+B\frac y w+C=0\\ A\frac x w + B\frac y w +D=0}\right.\]</span></p><p><span class="math display">\[\left\{\matrix{Ax+By+Cw=0\\Ax+By+Dw=0}\right.\]</span></p><p>当<span class="math inline">\(w=0\)</span>，上式变成<span class="math inline">\(Ax+By=0\)</span>，得到解<span class="math inline">\((x,-\frac {A}Bx,0)\)</span>。其实这里的x和y是什么不重要，重要的是w=0，意味着这是个无限远处的点。也就是说，两条平行线在无限远处相交了！甚至能明确求出交点！</p><blockquote><p>Reference:</p><p>http://www.songho.ca/math/homogeneous/homogeneous.html</p><p>https://zhuanlan.zhihu.com/p/373969867</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> 3D Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to NeRF</title>
      <link href="/blog/Introduction-to-NeRF/"/>
      <url>/blog/Introduction-to-NeRF/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h1 id="introduction-to-nerf">1. Introduction to NeRF</h1><h2 id="what-is-nerf">What is NeRF</h2><blockquote><p>Reference: Original NeRF paper; an online ariticle</p></blockquote><p>在已知视角下对场景进行一系列的捕获 (包括拍摄到的图像，以及每张图像对应的内外参)，合成新视角下的图像。</p><p>NeRF 想做这样一件事，不需要中间三维重建的过程，仅根据位姿内参和图像，直接合成新视角下的图像。为此 NeRF 引入了辐射场的概念，这在图形学中是非常重要的概念，在此我们给出渲染方程的定义：</p><p><embed src="https://pic1.zhimg.com/80/v2-1a80de23a422688b739f36828affb8ec_1440w.webp" /></p><p><embed src="https://pic4.zhimg.com/80/v2-c469e4968a3e6cf8ec7a81f816de4f87_1440w.webp" /></p><p>那么辐射和颜色是什么关系呢？简单讲就是，光就是电磁辐射，或者说是振荡的电磁场，光又有波长和频率，<span class="math inline">\(波长\times 频率=光速\)</span>，光的颜色是由频率决定的，大多数光是不可见的，人眼可见的光谱称为可见光谱，对应的频率就是我们认为的颜色：</p><p><embed src="https://pic1.zhimg.com/80/v2-381aa740f21b7eba1f896fd98dcc1308_1440w.webp" /></p><p><embed src="https://pic1.zhimg.com/80/v2-51bd3710b9f891c4c44fde12545e4fd4_1440w.webp" /></p><h3 id="implementation">Implementation</h3><h4 id="mlp-structure">MLP Structure</h4><ol type="1"><li>The net is constrained to be multi-view consistent by restricting the predicting of <span class="math inline">\(\sigma\)</span> to be independent of viewing direction</li><li>While the color <span class="math inline">\(\bold c\)</span> depends on both viewing direction and in-scene coordinate.</li></ol><p>How is this implemented?</p><p>The MLP is designed to be two-stages:</p><ol type="1"><li><span class="math inline">\(F_{\theta_1}(\bold x) = (\sigma, \text{&lt;256 dim features&gt;})\)</span></li><li><span class="math inline">\(F_{\theta_2}(\text{&lt;256 dim features&gt;}, \bold d)=\bold c\)</span></li></ol><h4 id="novel-view-synthesis">Novel view synthesis</h4><p>For each pixel, sample points along the camera ray through this pixel;</p><p>For each sampling point, compute local color and density;</p><p>Use volume rendering, an integral along the camera ray through pixels is used: <span class="math display">\[C(\bold r)=\int_{t_1}^{t_2} T(t)\cdot \sigma (\bold r(t))\cdot \bold c(\bold r(t),\bold d)\cdot dt \\T(t)=\exp (-\int_{t_1}^t \sigma(\bold r(u))\cdot du)\]</span> We can get the color C of the pixel.</p><p>This can be implemented by sampling approaches.</p><p>Now everything can be approximated: <span class="math display">\[\hat C(\bold r)=\sum_{i=1}^N \alpha_iT_i\bold c_i \\T_i=\exp (-\sum_{j=1}^{i-1}\sigma_i\delta_j) \\\alpha_i=1-\exp(\sigma_i\delta_i)\\\delta_i=\text{distance between sampling point i and i+1}\]</span></p><ul><li>Loss is just L2 on color of the pixels:</li></ul><p><span class="math display">\[L=\sum_{r\in R}\| \hat C(\bold r)-C_{gt}(\bold r)\|^2_2\]</span></p><h4 id="depth-regularization">Depth regularization</h4><p>Similar to the above formulas, expected depth can also be calculated, and can be used to regularize the depth smoothness.</p><h4 id="positional-encoding">Positional encoding</h4><p>It is required to greatly improve the fine detail results.</p><p>There are many other positional encoding techs, including trainable parametric, integral, and hierarchical variants</p><h3 id="sdf---signed-distance-function">SDF - Signed Distance Function</h3><p>SDF是一种计算图形学中定义距离的函数。SDF定义了空间中的点到隐式曲面的距离，该点在曲面内外决定了其SDF的正负性。</p><p>相较于其他像点云（point cloud）、体素（voxel）、面云（mesh）那样的经典3D模型表示方法，SDF有固定的数学方程，更关注物体的表面信息，具有可控的计算成本。</p><h2 id="features-of-nerf">Features of NeRF</h2><ul><li>Representation can be discrete or continuous. but the discrete representation will be a big one if you have more dimensions, e.g., 3 dim.<ul><li>Actually the Plenoxels try to use 3D grids to store the fields. Fast, however, too much memory.</li></ul></li><li>Neural Field has advantages:<ol type="1"><li>Compactness 紧致:</li><li>Regularization: nn itself as inductive bias makes it easy to learn</li><li>Domain Agonostic: cheap to add a dimension</li></ol></li><li>also problems<ul><li>Editability / Manipulability</li><li>Computational Complexity</li><li>Spectral Bias</li></ul></li></ul><h2 id="problem-formulation">Problem Formulation</h2><ul><li>Input: multiview images</li><li>Output: 3D Geometry and appearance</li><li>Objective:</li></ul><p><span class="math display">\[\arg \min_x\|y-F(x)\|+\lambda P(x)\]</span></p><p>y is multiview images, F is forward mapping, x is the desired 3D reconstruction.</p><p>F can be differentiable, then you can supervise this.</p><ul><li>nn本身就是某种constraints，你就不需要加太多handicraft constraints</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning NeRF</title>
      <link href="/blog/Learning-NeRF/"/>
      <url>/blog/Learning-NeRF/</url>
      
        <content type="html"><![CDATA[<h1 id="learning-nerf">Learning NeRF</h1><p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="reading-list">Reading List</h2><h3 id="classical">Classical</h3><ul><li><p>Mildenhall <em>et al.</em> introduced NeRF at ECCV 2020 in the now seminal <a href="https://www.matthewtancik.com/nerf">Neural Radiance Field paper</a>.</p><p>This is done by storing the density and radiance in a neural volumetric scene representation using MLPs and then rendering the volume to create new images.</p></li><li><p><a href="https://m-niemeyer.github.io/project-pages/giraffe/index.html">GIRAFFE</a>: Compositional Generative Neural Feature Fields</p></li></ul><h3 id="survey">Survey</h3><ul><li><a href="https://arxiv.org/abs/2004.03805">Apr 2020 - State of the Art on Neural Rendering</a></li></ul><h3 id="cvpr">2021CVPR</h3><p>2021年CVPR还有许多相关的精彩工作发表。例如，提升网络的泛化性：</p><ul><li><a href="https://alexyu.net/pixelnerf/">pixelNeRF</a>：将每个像素的特征向量而非像素本身作为输入，允许网络在不同场景的多视图图像上进行训练，学习场景先验，然后测试时直接接收一个或几个视图为输入合成新视图。</li><li><a href="https://ibrnet.github.io/">IBRNet</a>：学习一个适用于多种场景的通用视图插值函数，从而不用为每个新的场景都新学习一个模型才能渲染；且网络结构上用了另一个时髦的东西 Transformer。</li><li><a href="https://apchenstu.github.io/mvsnerf/">MVSNeRF</a>：训练一个具有泛化性能的先验网络，在推理的时候只用3张输入图片就重建一个新的场景。</li></ul><p>针对动态场景的NeRF:</p><ul><li><a href="https://nerfies.github.io/">Nerfies</a>：多使用了一个多层感知机来拟合形变的SE(3) field，从而建模帧间场景形变。Nerfies: Deformable Neural Radiance Fields</li><li><a href="https://www.albertpumarola.com/research/D-NeRF/index.html">D-NeRF</a>：多使用了一个多层感知机来拟合场景形变的displacement。</li><li><a href="https://link.zhihu.com/?target=http%3A//www.cs.cornell.edu/~zl548/NSFF/">Neural Scene Flow Fields</a>：多提出了一个scene flow fields来描述时序的场景形变。</li></ul><p>其他创新点：</p><ul><li><a href="https://kai-46.github.io/PhySG-website/">PhySG</a>：用球状高斯函数模拟BRDF（高级着色的上古神器）和环境光照，针对更复杂的光照环境，能处理非朗伯表面的反射。</li><li><a href="https://nex-mpi.github.io/">NeX</a>：用MPI（Multi-Plane Image ）代替NeRF的RGBσ作为网络的输出。</li></ul><h3 id="cvpr-1">2022 CVPR</h3><p><a href="https://ajayj.com/dreamfields">Zero-Shot Text-Guided Object Generation with <strong>Dream Fields</strong></a></p><h2 id="useful-references"><strong>Useful References:</strong></h2><blockquote><p><a href="https://markboss.me/post/nerf_at_eccv22/?continueFlag=55ed0f6189bcd6ca987e08764bcbe945">NeRF at ECCV22 - Mark Boss</a></p><p><a href="https://markboss.me/post/nerf_at_neurips22/">NeRF at NeurIPS 2022 - Mark Boss</a></p><p><a href="https://dellaert.github.io/NeRF22/">NeRF at CVPR 2022 - Frank Dellaert</a></p><p><a href="https://youtu.be/PeRRp1cFuH4">CVPR 2022 Tutorial on Neural Fields in Computer Vision</a></p></blockquote><p>Bigger to learn:</p><ul><li>[ ] Above NeRF: neural rendering</li><li>[ ] Related theories in graphics and computer vision</li><li>[ ] NeRF的一作Ben Mildenhall在SIGGRAPH 2021 Course <a href="https://www.youtube.com/watch%3Fv%3Dotly9jcZ0Jg">Advances in Neural Rendering</a>中从概率的角度推导了NeRF的体渲染公式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manipulate Neural Fields</title>
      <link href="/blog/Manipulate-Neural-Fields/"/>
      <url>/blog/Manipulate-Neural-Fields/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="manipulate-neural-fields">2.5. Manipulate Neural Fields</h2><p>Neural fields is ready to be a prime representation, similar as point clouds or meshes, that is able to be manipulated.</p><figure><img src="https://s2.loli.net/2023/01/12/okLGyeFmMvifhZW.png" alt="image-20221212211525928" /><figcaption>image-20221212211525928</figcaption></figure><p>You can either edit the input coordinates, or edit the parameters <span class="math inline">\(\theta\)</span>.</p><p>On the other axis, you can edit through an explicit geometry, or an implicit neural fields.</p><figure><img src="https://s2.loli.net/2023/01/12/S7HWcQPh1FtdJaw.png" alt="image-20221212213802209" /><figcaption>image-20221212213802209</figcaption></figure><p>The following examples 落在不同的象限。</p><h3 id="editing-the-input-via-explicit-geometry-left-up">Editing the input via Explicit geometry (left-up)</h3><ul><li><p>You can represent each object using a separated neural field (local frame), and then compose them together in different ways.</p></li><li><p>If you want to manipulate not only spatially, but also <strong>temporaly</strong>, it is also possible. You can add a time coordinate as the input of the neural field network, and transform the time input.</p></li><li><p>You can also manipulate (especially human body) via <strong>skeleton</strong>.</p><figure><img src="https://s2.loli.net/2023/01/12/y4bGulHpfOwWkqN.png" alt="image-20221212212838893" /><figcaption>image-20221212212838893</figcaption></figure><ul><li><p><strong>Beyond human</strong>, we can also first estimate different moving parts of an object, to form some skeleton structure, and then do the same.</p><figure><img src="https://s2.loli.net/2023/01/12/SBzGy3rnUaqLFI8.png" alt="Noguchi etal, CVPR22" /><figcaption>Noguchi etal, CVPR22</figcaption></figure></li></ul></li><li><p>Beyond rigid, we can also manipulate via <strong>mesh</strong>. coz we have plenty of manipulation tools on mesh. The deformation on mesh can be re-mapped as the deformation on the input coordinate</p><figure><img src="https://s2.loli.net/2023/01/12/UbFu74iCQ15mK3B.png" alt="image-20221212213601773" /><figcaption>image-20221212213601773</figcaption></figure></li></ul><h3 id="editing-the-input-via-neural-flow-fields-left-down">Editing the input via Neural Flow Fields (left-down)</h3><figure><img src="https://s2.loli.net/2023/01/12/zxFElDIuSnPioJ7.png" alt="image-20230104183222294" /><figcaption>image-20230104183222294</figcaption></figure><p>We use the <span class="math inline">\(f_{i\rightarrow j}\)</span> to edit the <span class="math inline">\(r_{i\rightarrow j}\)</span> to represent one ray into another one.</p><p>We need to define the consistency here, so that the network can learn through forward and backward:</p><figure><img src="https://s2.loli.net/2023/01/12/VS1K3rQxHXYPRIg.png" alt="image-20230104183453487" /><figcaption>image-20230104183453487</figcaption></figure><h3 id="editing-network-parameters-via-explicit-geometry-right-up">Editing network parameters via Explicit geometry (right-up)</h3><p>The knowledge is already in the network. So instead of editing the inputs, we can directly edit the network parameters for generating new things.</p><figure><img src="https://s2.loli.net/2023/01/12/w2XEyYn5qbh41OB.png" alt="image-20230104185014312" /><figcaption>image-20230104185014312</figcaption></figure><ul><li>This proposed solution makes use of an encoder. The encoder learns to represent the rotated input as a high-dimensional latent code Z, with the same rotation R, in 3-dim space. The the following network use the latent code to generate the <span class="math inline">\(f_\theta\)</span></li></ul><figure><img src="https://s2.loli.net/2023/01/12/ruER6MJPpljSZiX.png" alt="image-20230104185544623" /><figcaption>image-20230104185544623</figcaption></figure><ul><li>In this work, the key idea is to map the high-resolutional object and the similar but lower resolutional object into the same latent space. Then, you can easily manipulate the lower resolutional object, and it should also affect the higher resolutional one. Then, the shared latent space are put into the following neural field network, which outputs high resolutional results.</li></ul><figure><img src="https://s2.loli.net/2023/01/12/HL61itcqsIaEThX.png" alt="image-20230104202425695" /><figcaption>image-20230104202425695</figcaption></figure><figure><img src="https://s2.loli.net/2023/01/12/y7eCcKDmdUY4VOu.png" alt="image-20230104202625346" /><figcaption>image-20230104202625346</figcaption></figure><ul><li>This work (Yang et al. NeurlPS'21) about shape editing is &quot;super important&quot; but the speaker does not have enough time... Basically it shows that the tools that we use to manipulate a mesh can also be used on a neural field, where we can keep some of the network parameters to make sure the basic shape of the object the same, and then the magical thing is the &quot;curvature manipulation&quot; item. Given the neural field is differentiable, this can be achieved.</li></ul><figure><img src="https://s2.loli.net/2023/01/12/2lTvenQixfRm8Po.png" alt="image-20230104203311551" /><figcaption>image-20230104203311551</figcaption></figure><ul><li>Obeying the points (a.k.a generalization). It makes sure the manipulation done on the input points are reconstructed.</li></ul><h3 id="editing-network-parameters-via-neural-fields-right-down">Editing network parameters via Neural Fields (right-down)</h3><figure><img src="https://s2.loli.net/2023/01/12/5Ohb7ExW4osc1n2.png" alt="image-20230104204330741" /><figcaption>image-20230104204330741</figcaption></figure><ul><li>This work constructs a reasonable latent space of the object, then do interpolation of different objects.</li><li>Beyond geometry, we can also manipulate <strong>color</strong></li></ul><figure><img src="https://s2.loli.net/2023/01/12/vM1QwkT4BJqGNIR.png" alt="image-20230104204738067" /><figcaption>image-20230104204738067</figcaption></figure><p>It decomposes the network into shape and color networks, and we can edit each independently.</p><figure><img src="https://s2.loli.net/2023/01/12/38HNsE9GnF1pydQ.png" alt="image-20230104204937204" /><figcaption>image-20230104204937204</figcaption></figure><ul><li>This is the stylization work. It mainly depends on a different loss function, which does not search for the exact feature of the vgg, but somehow the nearest neighbor.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NeRF Differentiable Forward Maps</title>
      <link href="/blog/NeRF-Differentiable-Forward-Maps/"/>
      <url>/blog/NeRF-Differentiable-Forward-Maps/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="differentiable-forward-maps">2.3. Differentiable Forward Maps</h2><figure><img src="https://s2.loli.net/2023/01/12/xp4avlLcJDI9R2k.png" alt="image-20221208175453557" /><figcaption>image-20221208175453557</figcaption></figure><h3 id="differentiable-rendering">Differentiable rendering</h3><figure><img src="https://s2.loli.net/2023/01/12/1Ng8wz2KP4oTiVH.png" alt="image-20221208181457315" /><figcaption>image-20221208181457315</figcaption></figure><p>Volume rendering can render fogs. Sphere rendering only render the solid surface, and needs ground truth supervision.? Neural renderer combines the two.</p><h3 id="differentiability-of-the-rendering-function-itself">Differentiability of the rendering function itself</h3><ul><li>BRDF Shading? details later.</li></ul><h3 id="differentiation-itself">Differentiation itself</h3><p>Design a neural network with higher order derivatives constraints and therefore directly use its derivative.</p><figure><img src="https://s2.loli.net/2023/01/12/Gi6IaAkhvlBxpoe.png" alt="image-20221208182302568" /><figcaption>image-20221208182302568</figcaption></figure><p>For example the Eikonal equation forces the neural network has a derivative as 1. Adding the eikonal loss then promises the neural network valid.</p><p>Generally, this kind of problems are: the solutions are constrained by its partial derivatives.</p><h3 id="special-identity-operator">Special: Identity Operator</h3><p><span class="math display">\[\text{Reconstruction} \rightarrow \hat 1()\rightarrow \text{Sensor domain}\\\text{Reconstruction} == \text{Sensor domain}\]</span></p><p>Q&amp;A:</p><ul><li>Can we obtain a neural network in just one forward, without optimization?</li><li>Can we design special forward maps for specific downstream tasks, eg., classification? Absolutely yes. We can design it to represent a compact representation as the sensor domain. The key idea is to get a differentiable function to map your specific recon and sensor domain.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NeRF Hybrid representations</title>
      <link href="/blog/NeRF-Hybrid-representations/"/>
      <url>/blog/NeRF-Hybrid-representations/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="hybrid-representations">2.2. Hybrid representations</h2><h3 id="tradeoffs-of-choosing-a-proper-representation">Tradeoffs of choosing a proper representation</h3><figure><img src="https://s2.loli.net/2023/01/12/NyvS91xlLJA8KWR.png" alt="image-20221208172055153" /><figcaption>image-20221208172055153</figcaption></figure><figure><img src="https://s2.loli.net/2023/01/12/sDg8FHQcjrGRW1b.png" alt="image-20221208172209556" /><figcaption>image-20221208172209556</figcaption></figure><p>You may choose one proper representation depending on your own application</p><h3 id="grid">1. Grid</h3><figure><img src="https://s2.loli.net/2023/01/12/ZpYEMbXvRdeOqiy.png" alt="image-20221205195659841" /><figcaption>image-20221205195659841</figcaption></figure><p>Input is too huge. Then you need too huge neural network. So, this grid interpolation acts like a &quot;position encoding&quot;, which encodes the low dimensional features into high dims.</p><figure><img src="https://s2.loli.net/2023/01/12/lMi3tK9NPgcWUaI.png" alt="image-20221208162026398" /><figcaption>image-20221208162026398</figcaption></figure><p>NeRFusion CVPR22: online!</p><h3 id="point-cloud">2. point cloud</h3><figure><img src="https://s2.loli.net/2023/01/12/zhYHQnFsgxBLCfM.png" alt="image-20221208162541770" /><figcaption>image-20221208162541770</figcaption></figure><p>Cons:</p><ol type="1"><li>To access local points, you need to specifically design the data structure. Otherwise, it is O(n)!</li><li>Choose different kernels to retrieve nearby points' features. Oftentimes you assume it is local kernel.</li></ol><p><img src="https://s2.loli.net/2023/01/12/37EbFsANOCc9voX.png" alt="image-20221208163050867" style="zoom:50%;" /></p><h3 id="mesh">3. Mesh</h3><p>Unstructed grids. Compared with point clouds, meshes have connectivity info.</p><figure><img src="https://s2.loli.net/2023/01/12/Dwir9hsm3VgZjQk.png" alt="image-20221208163526289" /><figcaption>image-20221208163526289</figcaption></figure><figure><img src="https://s2.loli.net/2023/01/12/nPMw7T3hqRAU2iv.png" alt="image-20221208163746237" /><figcaption>image-20221208163746237</figcaption></figure><h3 id="multiplanar-images">4. Multiplanar Images</h3><p>Something like project a 3D grid into an axis to get levels of planes.</p><figure><img src="https://s2.loli.net/2023/01/12/CmhFDT5NoiMAOnv.png" alt="image-20221208164038729" /><figcaption>image-20221208164038729</figcaption></figure><p>Pros:</p><ol type="1"><li>Compact</li><li>Very efficient because the hardware and software designs are accelerated to these 2D operations, like bi-linear operations.</li></ol><p>Cons:</p><ol type="1"><li>Resolution bias on plane axis: coz it is discrete betweens planes.</li></ol><p>This is not very wise in my opinion. It is just a temporary tradeoff given nowadays' technologies. Coz everything will be 3D in the future.</p><p><img src="https://s2.loli.net/2023/01/12/UDO6HlWAp3y7qF1.png" alt="image-20221208165534056" />Generate 2D images from different camera views (perhaps). Key point is the tri-plane representation of 3D features.</p><h3 id="multiresolution-grids">5. Multiresolution grids</h3><figure><img src="https://s2.loli.net/2023/01/12/TlmkK1NDj2dAtUp.png" alt="image-20221208165714329" /><figcaption>image-20221208165714329</figcaption></figure><p>Pros:</p><ol start="2" type="1"><li>Stable coz you indeed need both low and high resolution info</li></ol><h3 id="hash-grids">6. Hash grids</h3><p><img src="https://s2.loli.net/2023/01/12/NZtH7wfxpSPVkGe.png" alt="image-20221208170131069" /> <span class="math display">\[[x,y,z]\text{ coordinates}\rightarrow \text{Hash function()} \rightarrow \text{Fixed size codebook}\]</span> Pros:</p><ol type="1"><li>No matter how big is the original data, you can use a fixed size codebook as the input feature.</li><li>Can be online!</li></ol><p>Cons:</p><ol type="1"><li>May still need large codebooks</li><li>Features not spatially local. I don't think the hash grid is a good idea if this drawback exists. But isn't there a simple way to generate features with local info remaining?</li></ol><h3 id="codebook-grids">7. Codebook grids</h3><figure><img src="https://s2.loli.net/2023/01/12/pnBJGxM6jNHD2v5.png" alt="image-20221208170955887" /><figcaption>image-20221208170955887</figcaption></figure><p>Instead of storing features of points in grids, store a (index to a) code in a codebook. The size of the codebook is fixed, so the overall size can be controlled as much smaller.</p><p>cons:</p><ol type="1"><li>To make the indexing operation differentiable, the computing complexity rises here.</li><li>Using hash is to get rid of the complex data structure, but the indices bring it back.</li></ol><h3 id="bounding-volume-hierarchies">8. Bounding Volume Hierarchies</h3><figure><img src="https://s2.loli.net/2023/01/12/LQ6fzh21OltTJxq.png" alt="image-20221208171806113" /><figcaption>image-20221208171806113</figcaption></figure><p>Commonly used method in computer graphics</p><h3 id="others-voxel">9. Others (voxel)</h3><figure><img src="https://s2.loli.net/2023/01/12/5sE1MYpOLB4mPCF.png" alt="image-20221208173124734" /><figcaption>image-20221208173124734</figcaption></figure><ul><li>For dynamic nerfs, is there any better hybrid representation? Sure.</li><li>Is there any explicit bias of these hybird representations that we can discover and then design regularization? Sure.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NeRF Network Architecture</title>
      <link href="/blog/NeRF-Network-Architecture/"/>
      <url>/blog/NeRF-Network-Architecture/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="network-architecture">2.1. Network Architecture</h2><h3 id="input-encoding">1. Input Encoding</h3><p>Similar as NLP, they use position encodings. Like Sinusoid functions. I also remember an encoding method which takes into consider of the 光线的散射</p><h3 id="activation-functions">2. Activation functions</h3><p>ReLU is not perfect for this task. Because it 不能解决对高阶导有constraints的函数。</p><p>SIREN is a replacement.</p><h3 id="symmetry-invariance-equivariance">3. Symmetry, Invariance &amp; Equivariance</h3><figure><img src="https://s2.loli.net/2023/01/12/tynBhWCulMINrU3.png" alt="image-20221205193423558" /><figcaption>image-20221205193423558</figcaption></figure><figure><img src="https://s2.loli.net/2023/01/12/Rjx5h2kfY34JZct.png" alt="image-20221205193614341" /><figcaption>image-20221205193614341</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NeRF Notebook</title>
      <link href="/blog/NeRF-Notebook/"/>
      <url>/blog/NeRF-Notebook/</url>
      
        <content type="html"><![CDATA[<p>I am currently burying myself into the sea of NeRF. I plan to archive my learning notes here. I am still a beginner, so the notes absolutely contain errors, and are not finished yet.</p><h1 id="contents">Contents</h1><p><a href="https://jyzhu.top/Learning-NeRF/">Learning NeRF</a>: Reading list, learning references, and plans</p><p><strong>Notes of CVPR22' Tutorial:</strong></p><p><a href="https://jyzhu.top/Introduction-to-NeRF/">1. Introduction to NeRF</a>: What is NeRF and its features</p><p>2. Techniques</p><p>​ <a href="https://jyzhu.top/NeRF-Network-Architecture/">2.1. Network Architecture</a></p><p>​ <a href="https://jyzhu.top/NeRF-Hybrid-representations/">2.2. Hybrid representations</a></p><p>​ <a href="https://jyzhu.top/NeRF-Differentiable-Forward-Maps/">2.3. Differentiable Forward Maps</a></p><p>​ <a href="https://jyzhu.top/Prior-based-reconstruction-of-neural-fields/">2.4. Prior-based reconstruction of neural fields</a></p><p>​ <a href="https://jyzhu.top/Manipulate-Neural-Fields/">2.5. Manipulate Neural Fields</a></p><p>3. Applications</p><p><em>TBC</em></p><p><strong>Notes of paper reading</strong>:</p><p><a href="https://jyzhu.top/Reading-NeuMan-Neural-Human-Radiance-Field-from-a-Single-Video/">Reading NeuMan: Neural Human Radiance Field from a Single Video</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prior based reconstruction of neural fields</title>
      <link href="/blog/Prior-based-reconstruction-of-neural-fields/"/>
      <url>/blog/Prior-based-reconstruction-of-neural-fields/</url>
      
        <content type="html"><![CDATA[<p>This is part of <a href="https://jyzhu.top/NeRF-Notebook/">my journey of learning NeRF</a>.</p><h2 id="prior-based-reconstruction-of-neural-fields">2.4. Prior-based reconstruction of neural fields</h2><p>Sounds like a one-shot task: instead of fitting and optimizing a neural field each for one scene; let's learn a prior distribution of neural field. Then, given a specific scene, it adjusts the neural field in just one forward.</p><figure><img src="https://s2.loli.net/2023/01/12/rMOwKRJBuedFm1n.png" alt="image-20221211234430727" /><figcaption>image-20221211234430727</figcaption></figure><h3 id="how-does-the-latent-code-look-like">How does the latent code look like?</h3><figure><img src="https://s2.loli.net/2023/01/12/A41EOlYCBXrUxto.png" alt="image-20221211234923290" /><figcaption>image-20221211234923290</figcaption></figure><ul><li>Global: not local. A small latent code represents a neural field<ul><li>main limitation: can only represent very simple (single) object. coz if you have multiple objects in a scene, the degree of freedom grows non-linearly.</li><li><strong>How about giving the natural language descriptions as conditions???</strong></li></ul></li><li>Local: you get different latent codes considering the locality where you are. So, you have a prior 3D data structure to store the latent codes.<ul><li>3D point clouds -&gt; grids -&gt; triplanes interpolation</li></ul></li></ul><blockquote><p>Convolutional Occupancy Networks</p></blockquote><h3 id="autodecoder-instead-of-encoder-decoder">Autodecoder instead of Encoder-decoder</h3><figure><img src="https://s2.loli.net/2023/01/12/zr2GnpBXeZDJUqa.png" alt="image-20221212005012783" /><figcaption>image-20221212005012783</figcaption></figure><ul><li><p>Encoder is a 2D CNN structure.</p></li><li><p>But while using autodecoder, the backpropogate through the forward map (i.e., the neural renderer) will give the 3D structural information to the latent codes directly. <span class="math display">\[\text{latent code }\hat z=\arg \min_z \|\text{Render(}\Phi)-g.t.\|\]</span> <img src="https://s2.loli.net/2023/01/12/FQjMgibmNtIP4ca.png" alt="image-20221212004946040" /></p></li></ul><p><strong>Instead of trying to build the encoder, sometimes just use the backpropogation through the forward map is helpful.</strong></p><h3 id="light-field-networks----dont-need-to-render-anymore">Light field networks -- Don't need to render anymore</h3><figure><img src="https://s2.loli.net/2023/01/12/FVP15fmBYz8rEoe.png" alt="image-20221212005908926" /><figcaption>image-20221212005908926</figcaption></figure><p>Instead of learning a NeRF that you use a neural renderer to generate all points along a ray; you can learn a network to directly give you a color along a ray. So you do not use a 3d coordinate as the query, instead, use a ray.</p><p>But this do not work in complicated task yet.</p><figure><img src="https://s2.loli.net/2023/01/12/mAFx6pzqaIuUMin.png" alt="image-20221212010316991" /><figcaption>image-20221212010316991</figcaption></figure><h3 id="outlook">Outlook</h3><ul><li>You don't need to use 600 images of a scene to reconstruct it. Synthesis images?</li><li>Open minds: other ways to skip the expensive forward map? (e.g., the light field)</li><li>Understanding the scene like humans do: disentangle different objects</li><li>Local conditioning methods? Regular grids are easy to tackle with, but it's harder for point clouds / factorized representations</li><li>Transformers: seems like local conditioning</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> NeRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The difference between RNN&#39;s output and h_n</title>
      <link href="/blog/The-difference-between-RNN-s-output-and-h-n/"/>
      <url>/blog/The-difference-between-RNN-s-output-and-h-n/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Reference: <a href="https://stackoverflow.com/questions/48302810/whats-the-difference-between-hidden-and-output-in-pytorch-lstm" class="uri">https://stackoverflow.com/questions/48302810/whats-the-difference-between-hidden-and-output-in-pytorch-lstm</a></p></blockquote><p>I was so confused when doing a homework on implementing the Luong Attention, because it tells that the decoder is a RNN, which takes <span class="math inline">\(y_{t-1}\)</span> and <span class="math inline">\(s_{t-1}\)</span> as input, and outputs <span class="math inline">\(s_t\)</span>, i.e., <span class="math inline">\(s_t = RNN(y_{t-1}, s_{t-1})\)</span>.</p><p>But the pytorch implementation of RNN is: <span class="math inline">\(outputs, hidden\_last = RNN(inputs, hidden\_init)\)</span>, which takes in a sequence of elements, computes in serials, and outputs a sequence also.</p><p>I was confused about what is the <span class="math inline">\(s_t\)</span>. Is it the <span class="math inline">\(outputs\)</span>, or the <span class="math inline">\(hidden\_states\)</span>?</p><p>This is the very helpful picture:</p><p><img src="https://i.stack.imgur.com/SjnTl.png" /></p><p>The <span class="math inline">\(output\)</span> here is the <span class="math inline">\(hidden\_states\)</span> of the last layer among all elements in the sequence (time steps), while the <span class="math inline">\(h_n,c_n = hidden\_last\)</span> is the <span class="math inline">\(hidden\_states\)</span> of the last time step among all layers.</p><p>The former is the <span class="math inline">\(H\)</span>, hidden state collection, which can be used in subsequent calculations, like attentions or scores; and the latter is the hidden state that can be directly used in the next iteration.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading 3D Photography using Context-aware Layered Depth Inpainting</title>
      <link href="/blog/Reading-3D-Photography-using-Context-aware-Layered-Depth-Inpainting/"/>
      <url>/blog/Reading-3D-Photography-using-Context-aware-Layered-Depth-Inpainting/</url>
      
        <content type="html"><![CDATA[<p>论文地址：<a href="https://shihmengli.github.io/3D-Photo-Inpainting" class="uri">https://shihmengli.github.io/3D-Photo-Inpainting</a></p><p>作者：<a href="https://shihmengli.github.io/">Meng-Li Shih</a>, <a href="https://lemonatsu.github.io/">Shih-Yang Su</a>, <a href="https://johanneskopf.de/">Johannes Kopf</a>, <a href="https://filebox.ece.vt.edu/~jbhuang/">Jia-Bin Huang</a></p><p>发表： CVPR2020</p><p>链接： <a href="https://github.com/vt-vl-lab/3d-photo-inpainting" class="uri">https://github.com/vt-vl-lab/3d-photo-inpainting</a></p><hr /><h2 id="why">Why：</h2><p>之前的照片3D化的方法，会在视角变动后出现的新像素区域 填充很模糊的背景；这个方法主要是用inpainting的方法提高新背景生成的效果</p><figure><img src="https://s2.loli.net/2022/10/22/dfjuy9vNrBak1oP.png" alt="image-20221007084129382" /><figcaption>image-20221007084129382</figcaption></figure><h2 id="what">What：</h2><ol type="1"><li>任务是3D photography，图像3D化，把一张2D+深度信息的RGB-D图像转化成3D风格的图像。</li><li>现在的多镜头智能手机拍的照片都能提供深度信息。没有的话，也能用其他模型预测深度。</li><li>用分层深度图像（Layered Depth Image）来表示图像：能显式地表示像素点之间的连通性。和普通的2D图像相比，可以把像素点分成多层来表示，同一个坐标处可以有重合的不同层次的像素点。</li><li>提出一个基于学习的 inpainting 方法填充重叠区域的像素，让3D图像视角变化的时候出现的新背景效果很好。</li></ol><h2 id="how">How：</h2><p>是一个很清晰的流程：</p><ol type="1"><li><p>输入为单张RGB-D图像。D为depth，一般多镜头智能手机拍摄的照片都能提供深度信息；没有的话就用其他模型预测深度，比如MegaDepth, MiDas, and Kinect depth sensor</p></li><li><p>将输入图像转化成分层深度图像（Layered Depth Image）。LDI中的每个像素点保存颜色和深度信息，以及上下左右四个方向的邻居像素点。同一个坐标处可以有重合的不同深度的像素点。</p></li><li><p>图像预处理：检测深度不连贯的边缘</p><figure><img src="https://s2.loli.net/2022/10/22/6tjCgUHTpVyIAFN.png" alt="image-20221007090910332" /><figcaption>image-20221007090910332</figcaption></figure><p>用filter把深度边缘过滤得更锐利，然后清理一些不连贯的边缘，最后根据连通性划分不同的深度边（如图2 （f）中，不同颜色表示不同深度边）。</p></li><li><p>对于每一个深度边，把LDI图中的像素点切割开，并在背景层扩展一些像素点，对扩展区域进行生成</p><figure><img src="https://s2.loli.net/2022/10/22/Ap62PxdYEDKzBkJ.png" alt="image-20221007091217942" /><figcaption>image-20221007091217942</figcaption></figure><ol type="1"><li><p>找到一个深度边，把两层的像素点切割开</p></li><li><p>对于背景层，用flood-fill like算法迭代地选取一定的已知区域作为context region，以及扩展一定的未知区域作为synthesis region</p></li><li><p>利用已知context region 生成未知synthesis region 的深度和颜色：采用基于学习的inpainting方法</p><figure><img src="https://s2.loli.net/2022/10/22/h8uGZm4XAEcL5SP.png" alt="image-20221007091716266" /><figcaption>image-20221007091716266</figcaption></figure><p>这个方法中，最关键的就是在预测color和depth之前，先预测了一下depth edges，然后把这个edges信息加进去，可以更好地预测color和depth。</p></li><li><p>将生成完毕的像素融合回LDI图像</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> 3DCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading SmoothNet: A Plug-and-Play Network for Refining Human Poses in Videos</title>
      <link href="/blog/Reading-SmoothNet-A-Plug-and-Play-Network-for-Refining-Human-Poses-in-Videos/"/>
      <url>/blog/Reading-SmoothNet-A-Plug-and-Play-Network-for-Refining-Human-Poses-in-Videos/</url>
      
        <content type="html"><![CDATA[<p>论文地址：https://arxiv.org/abs/2112.13715</p><p>作者：<a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Zeng%2C+A">Ailing Zeng</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Yang%2C+L">Lei Yang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Ju%2C+X">Xuan Ju</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Li%2C+J">Jiefeng Li</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Wang%2C+J">Jianyi Wang</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Xu%2C+Q">Qiang Xu</a></p><p>发表： ECCV 2022</p><p>链接： <a href="https://github.com/cure-lab/SmoothNet" class="uri">https://github.com/cure-lab/SmoothNet</a></p><hr /><blockquote><p>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</p></blockquote><h2 id="why">Why：</h2><ol type="1"><li>从视频估计人体姿势时，抖动是个问题</li><li>除了轻微抖动以外，有一些long- term抖动，还有因为重叠、姿势少见等原因造成的估测困难</li></ol><h2 id="what">What：</h2><figure><img src="https://s2.loli.net/2022/10/22/fRIB2t9hw8na6my.png" alt="image-20220909143919787" /><figcaption>image-20220909143919787</figcaption></figure><ol type="1"><li>一个仅基于时序的精炼网络，以其他网络的姿势估计结果作为输入。</li><li>有监督的</li><li>采用滑动窗口，基于TCN</li><li>并不是常见的那种基于学习的方法，即采用时间-空间模型来同时优化逐帧的准确率和时序的平滑性。这个方法通过学习每一个关节在长时间范围的运动特征（而不是关节之间的关系），来自然地建模身体运动中的平滑特征。</li><li>由于它仅仅需要时序信息，所以可以泛化到很多种任务上，包括2D和3D的姿势估计、body recovery等</li></ol><h2 id="how">How：</h2><ol type="1"><li><p>根据持续时长，将抖动归类为sudden jitter和long- term jitter两种。为了解决long- term的抖动问题，现有那些方法都不大行。</p><p>根据程度，又可以将抖动分为小抖动和大抖动。小抖动一般由于不可避免的误差，或者标注上的误差；大抖动则是由于图像质量差、姿势少、重叠严重等。</p><figure><img src="https://s2.loli.net/2022/10/22/pNa7bcVqzi9lGZw.png" alt="image-20220909143902334" /><figcaption>image-20220909143902334</figcaption></figure></li><li><p>将误差归类为相邻帧之间的抖动造成的误差（jitter error）和模型估计结果与真实结果之间的偏差（bias error）这两种。现有那些方法并没有将这两类误差解耦</p></li><li><p>提出了basic smoothnet和正经smoothnet。</p><ol type="1"><li><figure><img src="https://s2.loli.net/2022/10/22/Zf6lpahbHrRG7kF.png" alt="image-20220909154626864" /><figcaption>image-20220909154626864</figcaption></figure><p>Basic smoothnet，FCN是backbone。通过长度为T的滑窗，每次传入T帧图像，包含C个channels。</p><figure><img src="https://s2.loli.net/2022/10/22/hRcX2MCx8SnHZfz.png" alt="image-20220909155504588" /><figcaption>image-20220909155504588</figcaption></figure><p>权重<span class="math inline">\(w_t^l\)</span>和偏差<span class="math inline">\(b^l\)</span>是第<span class="math inline">\(t_{th}\)</span>帧的，并且在不同的channel之间是共享的。</p></li><li><figure><img src="https://s2.loli.net/2022/10/22/uCJgF8M6tG5S1PB.png" alt="image-20220909155701901" /><figcaption>image-20220909155701901</figcaption></figure><p>完整的motion- aware smoothnet就是加上了速度和加速度两个模块。</p><p>因为jitter的一个衡量方式就是加速度，所以把加速度直观地显示在模型中是一个很显然的方式。给定预测出的姿势<span class="math inline">\(\hat Y\)</span>，速度就是两帧之间相减，得到 <span class="math display">\[\hat V_{i,t} = \hat Y_{i,t} − \hat Y_{i,t−1}\]</span> 加速度就是速度之间的差： <span class="math display">\[\hat A_{i,t} = \hat V_{i,t} − \hat V_{i,t−1}\]</span></p></li></ol></li><li><p>loss就是两个：</p><ol type="1"><li><p>ground truth pose和估计pose之间的误差： <span class="math display">\[L_{pose} = \frac{1}{T\times C} \sum_{t=0}^T \sum_{i=0}^C |\hat G_{i,t} − Y_{i,t}|,\]</span></p></li><li><p>ground truth 加速度和估计加速度之间的误差： <span class="math display">\[L_{acc} = \frac{1}{(T-2)\times C} \sum_{t=0}^T \sum_{i=0}^C |\hat G&#39;&#39;_{i,t} − A_{i,t}|,\]</span></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>To Midnight</title>
      <link href="/blog/To-Midnight/"/>
      <url>/blog/To-Midnight/</url>
      
        <content type="html"><![CDATA[<p>失眠的话</p><p>夜晚就变得绵长</p><p>第几节脊椎上了发条，拧动时</p><p>奇异的对偶的诗流向新的小节</p><p>而绵长的夜不该有诗</p><p>也不该有糟糕的比喻和比喻一样的风</p><p>该给每一阵海浪命什么名呢</p><p>这是当下最要紧的幽暗问题</p><p>别无要紧事</p><p>一个人有多想参与生活</p><p>又跟生活对坐在长桌两端</p><p>飞光飞光，劝尔一杯酒</p><p>天亮后又到了酒神的梦</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reading NeuMan: Neural Human Radiance Field from a Single Video</title>
      <link href="/blog/Reading-NeuMan-Neural-Human-Radiance-Field-from-a-Single-Video/"/>
      <url>/blog/Reading-NeuMan-Neural-Human-Radiance-Field-from-a-Single-Video/</url>
      
        <content type="html"><![CDATA[<p>论文地址：https://arxiv.org/abs/2203.12575</p><p>作者：Jiang, Wei and Yi, Kwang Moo and Samei, Golnoosh and Tuzel, Oncel and Ranjan, Anurag</p><p>发表： ECCV22</p><p>开源代码： https://github.com/apple/ml-neuman</p><h2 id="why">Why：</h2><ol type="1"><li><p>人体的渲染和新姿势生成在增强现实的应用中很重要</p></li><li><p>NeRF的出现让新视角生成任务取得很大进步</p></li><li><p>但是现有工作都没有实现：根据单段wild视频，生成新的人物和新的场景</p><figure><img src="https://s2.loli.net/2022/08/24/NdDrEhojmBLCJz9.png" alt="image-20220824123146868" /><figcaption>image-20220824123146868</figcaption></figure></li></ol><h2 id="what">What：</h2><p>读前疑问：</p><ol type="1"><li>NeRF和人体SMPL模型是怎么有机统一的🤔</li></ol><h2 id="how">How：</h2><ol type="1"><li><p>输入是一段wild视频，moving camera的。用现存方法估计人体姿势、人体形状、人体mask（Mask-RCNN）、相机pose、sparse scene model、depth maps</p></li><li><p>然后训练两个 NeRF 模型，一个用于人体，一个用于由 Mask-RCNN 估计的分割mask引导的背景。 此外，通过将来自多视图重建和单目深度回归的深度估计融合在一起来规范场景 NeRF 模型</p></li><li><p>关于NeRF：(参考：<a href="https://zhuanlan.zhihu.com/p/360365941">zhihu</a>）</p><ol type="1"><li><p>NeRF是用神经辐射场建模一个场景，好处是可以生成新视角的图像。针对一个静态场景，需要提供大量相机参数已知的图片。基于这些图片训练好的神经网络，即可以从任意角度渲染出图片结果了。</p></li><li><p>它用MLP，把一个3d场景隐式地编码进神经网络里。输入为3d空间中一个点的坐标<span class="math inline">\(\bold x = (x,y,z)\)</span>和相机视角 <span class="math inline">\(\bold d = (\theta, \phi)\)</span>，输出为该点对应的体素的密度opacity，以及颜色<span class="math inline">\(\bold c = (r,g,b)\)</span>。公式就是 <span class="math display">\[f(\bold{x},\bold{v})=(\bold c, \sigma)\]</span></p></li><li><p>在具体的实现中， x 首先输入到MLP网络中，并输出 σ 和中间特征，中间特征和 d 再输入到额外的全连接层中并预测颜色。因此，体素密度只和空间位置有关，而颜色则与空间位置以及观察的视角都有关系。基于view dependent 的颜色预测，能够得到不同视角下不同的光照效果。</p></li><li><p>NeRF 函数得到的是一个3D空间点的颜色和密度信息，但当用一个相机去对这个场景成像时，所得到的2D 图像上的一个像素实际上对应了一条从相机出发的射线上的所有连续空间点。后续就有各种各样高效的方式来进行可微渲染了，本质上都是从这条射线上采样，获得平均的颜色信息。</p></li></ol></li></ol><h3 id="人体模型nerfsmpl">人体模型：NeRF+SMPL</h3><p>我主要关注的就是人体模型这部分了。总体来说，做法就是：</p><p>首先生成人体NeRF模型，然后用ROMP生成逐帧的人体SMPL模型，然后定义一个canonical的人体模型（主要是去掉姿势这个变量，变成大字型人体），根据像素点在SMPL模型上对应的位置，再对应到canonical模型上，学到人体的外貌。（其实训练中NeRF和SMPL模型是一起学的，没有分得那么开的先后顺序。）</p><figure><img src="https://s2.loli.net/2022/08/24/JSycDH34UlMBsEW.png" alt="image-20220824180150642" /><figcaption>image-20220824180150642</figcaption></figure><p>具体来说：</p><ol type="1"><li><p>对于某一帧图像，用ROMP估计人体的SMPL模型，但采取了一些改良：</p><ol type="1"><li>利用densepose估计人体的silhouette，以及MMPose估计人体的2D joints；根据这些结果优化SMPL参数</li></ol></li><li><p>把刚刚得到的SMPL模型warp成一个canonical的大字型人体模型，这个warp变换称为<span class="math inline">\(\mathcal T\)</span></p></li><li><p>怎么把图像中的像素点对应到canonical的大字型人体模型上呢？</p><ol type="1"><li><p>首先生成人体NeRF模型</p></li><li><p>对于空间中的每个点<span class="math inline">\(\bold x_f=\bold r_f(t)\)</span> （这里的f是第f帧图像），它都可以由一条射线<span class="math inline">\(\bold r\)</span>上对应的像素点渲染而来；那么对这个点直接应用前面的变换<span class="math inline">\(\mathcal{T}\)</span>，就得到它在canonical空间中对应的点了，<span class="math inline">\(\bold x&#39;_f = \mathcal{T}_{\theta_f}(\bold x_f)\)</span></p></li><li><p>但是因为SMPL的估计不是很准确，这个变换<span class="math inline">\(\mathcal{T}\)</span>也不是很准确，所以这里提出来，通过在训练中同时优化SMPL模型 <span class="math inline">\(\theta_f\)</span>和人体NeRF模型的方式，可以提升效果。</p></li><li><p>还有，还加了一个MLP改错网络<span class="math inline">\(\mathcal{E}\)</span>改正warping的误差。最终结果就是： <span class="math display">\[\bold {\tilde x&#39;_f} = \mathcal{T}_{\theta_f}(\bold x_f) + \mathcal{E}(\bold x_f, f)\]</span></p></li><li><p>此时相机视角也需要校正：对于射线ray上的第i个样本点， <span class="math display">\[\bold d(t_i)&#39;_f = \bold {\hat x}&#39;_f(t_i) - \bold {\hat x}&#39;_f(t_{i-1})\]</span></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> 3D Generation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>It seems impossible to access USB devices in Docker on MacOS</title>
      <link href="/blog/It-seems-impossible-to-access-USB-devices-in-Docker-on-MacOS/"/>
      <url>/blog/It-seems-impossible-to-access-USB-devices-in-Docker-on-MacOS/</url>
      
        <content type="html"><![CDATA[<p>According to <a href="https://dev.to/rubberduck/using-usb-with-docker-for-mac-3fdd" class="uri">https://dev.to/rubberduck/using-usb-with-docker-for-mac-3fdd</a>, it seems impossible to forward USB to a Docker container on MacOS, coz the Docker is running in a virtual environment via <a href="https://github.com/docker/for-mac/issues/900">hyperkit</a>.</p><p>First of all, ports of the host (i.e., MacOS) cannot be directly accessed by any virtual environment (i.e., Docker) on it. So, &quot;you first have to expose it to the virtual machine where Docker is running&quot;. However, Docker is running on hyperkit, which doesn't support usb forwarding.</p><p>The author provided another way to do it, that is to use<code>docker-machine</code>, which uses a Virtualbox VM to host the <code>dockerd</code> daemon, to replace the original docker. Then... why bother still using Docker, instead of just using Virtualbox to run the seperated environment?</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Video-to-Video Synthesis</title>
      <link href="/blog/Reading-Video-to-Video-Synthesis/"/>
      <url>/blog/Reading-Video-to-Video-Synthesis/</url>
      
        <content type="html"><![CDATA[<p>论文地址：https://tcwang0509.github.io/vid2vid/paper_vid2vid.pdf</p><p>作者：<a href="https://tcwang0509.github.io/">Ting-Chun Wang</a>, <a href="http://mingyuliu.net/">Ming-Yu Liu</a>, <a href="http://www.cs.cmu.edu/~junyanz/">Jun-Yan Zhu</a>, <a href="https://liuguilin1225.github.io/">Guilin Liu</a>, Andrew Tao, <a href="http://jankautz.com/">Jan Kautz</a>, <a href="http://catanzaro.name/">Bryan Catanzaro</a></p><p>发表： NeurIPS 2018</p><p>Project：https://tcwang0509.github.io/vid2vid/</p><p>Github：https://github.com/NVIDIA/vid2vid</p><hr /><blockquote><p><strong>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</strong></p><p>这篇论文的背景是当时已经有比较好的pic2pic生成模型了。要让vid2vid也work的话，最重要的应该就是帧与帧之间consistency的问题。所以我会想在将pic2pic生成模型应用在video的基础上，对帧之间加上consistency loss。但直接这样肯定效率很低，因为一个视频中帧与帧之间肯定会包含大量冗余信息嘛，应该还需要想办法让帧之间信息共享，这样模型只需要预测后一帧与前一帧不同的地方，减少运算。例如，用一个小网络预测图像中静态与动态的部分，不知道可不可行。</p><p><strong>看完文章后</strong>：我感觉我在大体思路上把握准了，主要矛盾确实如此。但</p><ol type="1"><li>作者没有用consistency loss，而是用gan的思路，设计了一个条件视频鉴别器 <span class="math inline">\(D_V\)</span>，鉴别视频在时序上的动态是否真实自然。</li><li>我没有optical flow，光流，这方面的知识储备；作者利用一个网络预测optical flow，就可以直接根据前一帧图像得到后一帧图像中对应的像素点了，而且这样的结果能够很consistent。对于前一帧图像中没有对应的像素，再用一个补洞网络补洞。这样就解决了效率问题。</li><li>作者还利用了特征嵌入方法，实现了多模态视频的生成，这是我第一次了解到的方法，感觉很有趣。</li></ol></blockquote><h2 id="why">Why：</h2><ol type="1"><li>图像水平上的生成被研究得很好，但是视频上的此前却比较少；图像生成的成果如果直接放在视频上的话，效果不太妙，因为帧与帧之间缺乏连贯性。所以是需要一些temporal上的改进的</li></ol><h2 id="what">What：</h2><ol type="1"><li>利用GAN和一些时间-空间对抗目标（spatio-temporal adverbial objective），来实现video to video的生成。</li><li>用不同类型的输入来生成新的照片写实风格的视频，效果很好。</li><li>是一个全新定义的vid2vid任务，主要新点在于：输入的vid并不是完整的视频帧，而是一些可以操控的语义信息，例如segmentation masks, sketches, and poses</li></ol><p>读前疑问：</p><ol type="1"><li>在此之前没有比较好的vid2vid，这篇论文是在什么条件下实现了很好的vid2vid效果呢，比如其他方面的技术革新？我觉得主要是利用了gan，一个图像鉴别器+一个视频鉴别器相配合，取得很好的生成效果。除此之外我觉得optical flow用在这里也很好，效率高而且生成效果连贯（但是不知道新不新）；另外特征嵌入方法用在这里也很好，实现了根据语义信息来生成新视频，而且可以是多模态的视频</li><li>摘要里强调的时间-空间对抗目标（spatio-temporal adverbial objective）到底是什么？我感觉正文里好像没有再特别强调时间-空间这一对目标了……根据我自己的理解的话，主要就是那一对鉴别器：时间上--视频鉴别器鉴别在时序上的动态是否真实自然，空间上--图像鉴别器鉴别一张图像在空间上是否真实自然。</li></ol><h2 id="how">How：</h2><h3 id="定义vid2vid任务">定义vid2vid任务</h3><ol type="1"><li><p>定义输入的语义信息序列为<span class="math inline">\(s\)</span>，对应的真实视频序列为<span class="math inline">\(x\)</span>，模型生成的视频序列为<span class="math inline">\(\tilde x\)</span>，则模型的目标是在给定<span class="math inline">\(s\)</span>的条件下，让<span class="math inline">\(\tilde x\)</span>的条件分布拟合<span class="math inline">\(x\)</span>的条件分布</p></li><li><figure><img src="https://s2.loli.net/2022/09/01/VfJE42QpgUB5zxt.png" alt="image-20220524143313609" /><figcaption>image-20220524143313609</figcaption></figure><p>D是discriminator，G是generator。整个任务就变成了一个最大最小优化问题，论文主要通过设计网络和时空优化目标来解决这个问题。</p></li><li><p>为了简化问题，做了一个Markov假设：当前第t帧生成的视频<span class="math inline">\(\tilde x_t\)</span>，由且仅由第t帧输入<span class="math inline">\(s_t\)</span> + 前L帧输入<span class="math inline">\(s_{t-L}^{t-1}\)</span> + 前L帧生成的视频<span class="math inline">\(\tilde x_{t-L}^{t-1}\)</span>这三个因素决定。<img src="https://s2.loli.net/2022/09/01/Q9MPRD5otda3mAq.png" alt="image-20220524144030781" /></p><p>实验里，L取了个不大不小的2.建立了一个神经网络F，递归地逐帧生成视频。</p></li></ol><h3 id="网络架构">网络架构</h3><ol type="1"><li><p>网络F定义如下：</p><figure><img src="https://s2.loli.net/2022/09/01/5OA4ptSUjI9Mn7J.png" alt="image-20220524144722968" /><figcaption>image-20220524144722968</figcaption></figure><p>给定<span class="math inline">\((\tilde x_{t-L}^{t-1}, s_{t}^{t-1})\)</span>作为输入。对于与上一帧图像有关联的像素点，网络会利用optical flow来warp（扭曲？）上一帧像素点，得到这一帧新的像素点。对应等式的前半部分。还有一些像素是上一帧图像里没有的，这时候就需要生成来填充。对应等式的后半部分。具体来说：</p><ul><li>用一个optical flow预测网络W来估计从上一帧到这一帧的optical flow <span class="math inline">\(\tilde w_{t-1}\)</span>.</li><li>用一个生成器H来生成需要填充的像素<span class="math inline">\(\tilde h_t\)</span>.</li><li>用一个mask预测网络M来生成mask <span class="math inline">\(\tilde m_t\)</span>. 这个mask不是非0即1的，而是包含了0-1之间的连续值。这样做是为了更好地融合W和H生成的结果。比如说，在 zoom in 的情况下，一个物体逐渐靠近，那么它会逐帧放大。如果仅仅利用optical flow的扭曲结果，那么这个物体就会变得模糊。因此，还需要生成器来填充一些细节。有了soft mask，warp的像素和生成的像素就可以融合。</li></ul></li><li><p>用了coarse-to-fine的方法来生成高分辨率的视频</p></li><li><p>用了2个不同的discriminator来减轻gan训练中的mode collapse问题（模式倒塌，即生成的结果是很逼真，但是多样性不足）。</p><ol type="1"><li>条件图像鉴别器 <span class="math inline">\(D_I\)</span>，顾名思义，鉴别每一帧图像是否真实的</li><li>条件视频鉴别器 <span class="math inline">\(D_V\)</span>，鉴别视频在时序上的动态是否真实自然。给定optical flow，鉴别K个连续的帧</li></ol></li></ol><h3 id="losses">losses</h3><p><span class="math display">\[\mathop{min}\limits_{F} ( \mathop{max}\limits_{D_I}\mathcal{L}_I (F, D_I ) + \mathop{max}\limits_{D_V}  \mathcal{L}_V (F, D_V )) + λ_W L_W (F ),\]</span></p><ol type="1"><li><span class="math inline">\(\mathcal{L}_I\)</span> 是条件图像鉴别器 <span class="math inline">\(D_I\)</span>的gan loss：<img src="https://s2.loli.net/2022/09/01/J1mVkCnzWYZiaR9.png" alt="image-20220530194307049" />，其中，<span class="math inline">\(\phi_I\)</span> 就是从第1～T帧中随机取1帧的操作</li><li><span class="math inline">\(\mathcal{L}_V\)</span>是条件视频鉴别器 <span class="math inline">\(D_V\)</span>的 gan loss：<img src="https://s2.loli.net/2022/09/01/rq6yiaRSHUnEYzg.png" alt="image-20220530194419594" />，和图像的如出一辙，<span class="math inline">\(\phi_V\)</span> 就是从第1～T帧中随机取连续K帧的操作</li><li><span class="math inline">\(L_W\)</span> 是flow estimation loss：<img src="https://s2.loli.net/2022/09/01/AuZf1zlcihE3KsU.png" alt="image-20220530194534485" />，包括两部分，1. 真实flow和估计flow的端点误差 2. 把前一帧扭曲到后一帧的warp loss</li></ol><h3 id="前景-背景先验">前景-背景先验</h3><p>通过语义分割，给模型提供了一个前景、背景的先验信息，同时把补洞网络拆分成了两个：</p><ol type="1"><li>背景补洞网络：这个很容易，因为整个大背景其实可以由optical flow很准确地预测出来，补洞网络只需要补一点点从画面外面刚进来的部分</li><li>前景补洞网络：这个比较难，因为前景物品往往占比不大，但是又动作幅度很大，前景补洞网络需要从零开始生成很多东西</li></ol><p>通过用户实验，证明大部分人觉得有这个前景-背景先验之后，效果更好。</p><h3 id="多模态生成">多模态生成</h3><p>网络F是一个单模态映射函数，这意味着输入一个视频，它也只能生成一个视频。那怎样让它根据同一个输入视频，输出多个不同的视频呢？这里采用了特征嵌入方法（feature embedding scheme）。</p><ol type="1"><li>输入源视频的同时，也输入instance级别的语义分割mask <span class="math inline">\(s_t\)</span></li><li>训练一个图像编码器E，它把每一帧真实图像<span class="math inline">\(x_t\)</span>编码成d维的特征map（论文中d取3）。然后用一个instance-wise的平均池化，来让同一个物体的所有像素分享共同的特征向量。得到的这个instance-wise平均池化后的图像特征map称为<span class="math inline">\(z_t\)</span></li><li>这个<span class="math inline">\(z_t\)</span>，加上mask <span class="math inline">\(s_t\)</span>，再被输入到网络F</li><li>以上是训练的过程。训练结束后，对每个类型的对象的特征向量的高斯分布拟合一个混合高斯分布。</li><li>测试的时候，利用每个物体所对应的类型的分布，可以sample特征向量，进而生成新视频了。给出不同的特征向量，F就能生成不同的视频了</li></ol><figure><img src="https://tcwang0509.github.io/vid2vid/paper_gifs/cityscapes_change_styles.gif" alt="img" /><figcaption>img</figcaption></figure><h3 id="实现的细节">实现的细节</h3><ol type="1"><li>coarse-to-fine的训练：512 × 256, 1024 × 512, and 2048 × 1024 resolutions，这三种分辨率，先从低的开始训练起，逐渐增加到高的。</li><li>mask预测网络M和flow预测网络W共享权重，只有输出层不一样。</li><li>图像鉴别器是一个多尺度PatchGAN</li><li>除了空间上的多尺度，视频鉴别器还会考虑多个帧率，即时间上的多尺度，确保短期和长期都能consistent</li><li>2k分辨率，8个v100 gpus，训练10天……</li><li>datasets：<ol type="1"><li>Cityscapes：训练DeepLabV3网络来获得所有的语义分割mask，用FlowNet2的结果作为optical flow的ground truth，用Mask R- CNN的结果作为instance- level 语义mask的gt</li><li>Apolloscape</li><li>Face video dataset：FaceForensics dataset里的真实视频</li><li>Dance video dataset：从YouTube下载的跳舞视频💃</li></ol></li></ol><h3 id="结果">结果</h3><p>图像生成模型pix2pixHD和视频风格迁移模型COVST作为baseline。FID（论文定义的视频变种）跟baseline比略好，但human preference score（论文定义的由人来打分，评估哪个视频更真实）高很多。</p><p>通过更改语义mask，可以控制生成视频中的物体种类；通过更改特征向量，可以控制生成视频中的物体外观；在未来视频预测上也有很好的性能。</p><h3 id="局限性">局限性</h3><ol type="1"><li>缺少一个物体内部的具体信息，生成转弯的车的时候效果比较差。论文提出或许可以通过增加3D信息作为输入来解决</li><li>在整个视频中，一个物体的外观有时候还是前后不一致</li><li>偶然情况下，一辆车的颜色可能会逐渐发生变化</li><li>当通过更改语义信息来操纵视频生成的时候，例如把树改成房子，偶然会出现一部分变成房子，另一部分树变了形的情况（？是这个意思吗）。这或许可以通过采用更粗糙的语义标签的方式解决，因为这样模型就不会对标签形状过于敏感</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Video Generation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Few-shot Video-to-Video Synthesis</title>
      <link href="/blog/Reading-Few-shot-Video-to-Video-Synthesis/"/>
      <url>/blog/Reading-Few-shot-Video-to-Video-Synthesis/</url>
      
        <content type="html"><![CDATA[<p>论文地址：http://arxiv.org/abs/1910.12713</p><p>作者：<a href="https://tcwang0509.github.io/">Ting-Chun Wang</a>, <a href="http://mingyuliu.net/">Ming-Yu Liu</a>, Andrew Tao, <a href="https://liuguilin1225.github.io/">Guilin Liu</a>, <a href="http://jankautz.com/">Jan Kautz</a>, <a href="http://catanzaro.name/">Bryan Catanzaro</a></p><p>发表： NeurIPS 2019</p><p>Project： https://nvlabs.github.io/few-shot-vid2vid</p><p>Github：https://github.com/NVLabs/few-shot-vid2vid</p><hr /><blockquote><p>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</p><p>首先这个任务选题对我来说很新，我之前都没有意识到过这方面的问题。如果告诉我有这样的问题，需要去解决的话，我的直观的想法会受到这篇论文作者的上一篇中提到的 特征嵌入方法 所影响：会想也通过将一类物体的特征编码起来，然后通过学习不同个体的特征编码，来实现不同风格的视频生成。</p></blockquote><h2 id="why">Why：</h2><p>当今vid2vid方法的两个局限性：</p><ol type="1"><li>需要大量数据，尤其是需要生成的这个人的视频数据</li><li>泛化能力有限，比如说只能在训练集中包含的人上生成新的pose-to-human视频，不能泛化到训练集中不存在的人上</li></ol><p>所以这篇论文就是想解决这两个问题。</p><h2 id="what">What：</h2><ol type="1"><li><p>任务是Video-to-video synthesis，即利用输入的语义视频（例如人的姿势、街景），生成写实的视频。例如说，人体姿势生成的任务，就是首先收集一个人做大量不同动作的视频，作为训练集；然后向模型中输入动作序列，让模型生成该人做该动作的视频。再比如街景生成，也是以大量街景视频作为训练集，然后向模型中输入语义mask序列，让它生成风格类似的全新街景。</p></li><li><p>这篇论文提出了一个网络，其中包括一个网络权重生成模块（novel network weight generation module）和attention机制</p></li><li><p>这个方法的创新点在于，只需要在测试时，向模型提供少量的在训练集中没出现过的新的人物的图像，它就能生成这个新的人的视频。</p><figure><img src="https://s2.loli.net/2022/08/10/IUKDziV4AtOwsxu.png" alt="image-20220513171420180" /><figcaption>image-20220513171420180</figcaption></figure><p>上图中，左边是现存方法，它们基本上对于每个人，都需要在单独的训练集上训练。右边是这篇论文提出的方法，只需要训练一次，然后输入一些示范图像，就可以泛化到新的人上。</p></li></ol><p>读前疑问：</p><ol type="1"><li>说是利用少量的新的人物的示范图像，生成网络权重。意思是以原本的vid2vid网络的权重作为输出？为什么？我的更直观的想法是，直接用一个新网络，学习新人物的图像，然后把output给concat或者加进旧网络的output中……另外，直接作用于网络权重上，在我的粗浅理解中，会不会造成信息的损失呢？还是说本质上没差？ related work里提到这类网络属于adaptive network，跟常规网络相比有不同的inductive bias（想想也是），有对应的应用任务。或许我之后再了解一下这块。</li><li>标题中的few-shot是什么意思，就是指更少的data、更高的泛化性吗？这是一类任务吧，从少量标注的样本中学习的意思。这个确实就是啊，只需要一点点示范图像，就可以生成图中这个人/物的新video。</li><li>作者的上篇论文是利用gan，这篇又用上了attention，为什么作出这样本质的改变呢？</li></ol><h2 id="how">How：</h2><ol type="1"><li>视频生成任务可以分成3类：<ol type="1"><li>unconditional synthesis：随机生成视频片段</li><li>future video prediction</li><li>vid2vid：把语义输入转变成现实风的视频。这篇论文就是属于这个任务，不过它聚焦的点在于few shot，即通过在测试的时候输入少量图像，让生成的视频可以泛化到没见过的domain上</li></ol></li><li><p>vid2vid是前一篇工作的内容啦。reference：<a href="jyzhu.top/reading-video-to-video-synthesis"><em>Reading vid2vid</em></a></p></li><li><p>few-shot本质上就是多加了个网络E，用来生成原补洞网络H的权重。至于原本还有两个网络W和M，他们都不需要改动，因为他们都是基于上一帧生成的图像进行变形的，代表一种运动，而和视频本质的内容没有关系。</p></li><li><p>精髓一图：</p><figure><img src="https://s2.loli.net/2022/08/10/T6is35cjyHlvaNe.png" alt="image-20220810193845710" /><figcaption>image-20220810193845710</figcaption></figure></li><li><p>用最新的SOTA语义图像生成模型SPADE代替了上一篇论文中的网络H。SPADE包含several spatial modulation branches and a main image synthesis branch。不过网络E只更新SPADE模型中的spatial modulation branches的权重，因为1这样量比较小，2这样可以避免一个直接从input image到output image的短路（我尚没有深究原因）。</p></li><li><p>权重生成模块E。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Live demo of CodeTyping via Pythonanywhere</title>
      <link href="/blog/live-demo-of-code-typing-via-pythonanywhere/"/>
      <url>/blog/live-demo-of-code-typing-via-pythonanywhere/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://user-images.githubusercontent.com/39082096/149967763-a9bb56c5-6411-4d86-90d3-f1e22845e2a8.png" alt="image" /><figcaption>image</figcaption></figure><p><a href="http://jyzhu.pythonanywhere.com/">Code Typing Practice</a> (or source code on Github: <a href="https://github.com/viridityzhu/code-typing">here</a>) is a tiny web page that I wrote for fun last semester, which is for me myself to practice code typing. It is a naive Django web app (with bugs🤪). BUT! I find a service to deploy it lively today. That's what is worth noting down now.</p><span id="more"></span><h2 id="note">Note</h2><p>Initially I tried to deploy this demo on Vercel.com. But it was too troublesome coz it does not support Django by default. Thankfully, I found <a href="https://www.pythonanywhere.com/">pythonanywhere</a>, on which each user can deploy one web app without payment. What's the best is that it is really easy to deploy: it provides access to Bash console.</p><p>Two things to be noted:</p><ol type="1"><li>Every 3 months, I have to login into the pythonanywhere to extend my web app, otherwise it will be killed.</li><li>The bug cost most of my time is that in the <code>view.py</code> I had used relative path to the static code files. However, I should use absolute path, with adding <code>BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</code> ahead.</li></ol><h2 id="todo">TODO</h2><p>Actually, after learned the MERN frame this semester, I am now aware of how naive this project is. However, I love Python, so it doesn't matter if i still regard Django as a hobby🤨. Who knows... I haven't even spent my time on that course project...</p><p>Now that the live demo is achieved, I might think of polishing this little project a bit.</p><ul><li>[ ] Fix bugs. Though i've already forgotten what those bugs are...</li><li>[ ] Replace the stupid code snippets...</li><li>[ ] Add the feature to compute time cost and typing speed. Also, save typing records.</li><li>[ ] Explicitly support other kinds of typing materials, and also support uploading customize materials.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三月的人生主题是复杂性</title>
      <link href="/blog/complexity-again/"/>
      <url>/blog/complexity-again/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我放弃理解很多东西</p><p>我开始拥抱</p><p>惊人的复杂性</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=0&amp;id=7326559292&amp;auto=1&amp;height=430"></iframe><p>这两天列了一个名叫「精神状况」的歌单，顾名思义，遴选了大抵是最能有效表达我近来精神状况的9首歌（不出所料以摇滚为主）。奇妙的是，一方面我自诩听歌时对歌词甚是重视，另一方面最爱的歌竟然歌词含量不足50%。想想现实，或许是我放弃理解很多东西（用理性），开始拥抱复杂性了吧（用感性？）。</p><p><img src="https://s2.loli.net/2022/03/14/W5bxdr9w3egqRGF.jpg" style="zoom: 33%;" /></p><hr /><h3 id="最近随想">最近随想：</h3><ul><li>「活着很累，在漫长的生命中，积累的痛苦与折磨会变得绵长。」所以人长大了开始喝酒，一遍遍喝酒，只是因为积压的痛苦无法消解吧。不过这样的好处就是会有一天不再像年轻时候那样怕死了</li><li>我很悲戚，这个世界的悲戚底色近年也逐渐显露，看得浅的人也能举目就看见灰黑色了。很无望，年复一年埋头活着，一抬头就搞不清楚在盼什么。想到父母渐老，大小毛病接连不断；就连我自己都开始显露一些身体不好的迹象，就实在是难过。想到我的生活，海外留学，专业学术，与父母的生活，柴米油盐，家长里短，我们的世界是割裂的，我整个人也感到一种割裂，待在父母身边或者远方，都很悲哀。这种悲哀甚至只是稍纵即逝的，它哪怕能长存一些，我也能对生活稍多些把握。只是时间总会过得很快，可预见的未来还会面临变更，伴随更深、更无力的悲哀，例如作为一个成年人需承担的一个家庭的压力，例如重要的人的衰老、疾病、死亡。</li><li>我有时候对人生很随便，糟糕境遇的发生会被钝感而忽略，或者很快视若无睹，例如疫情和疫情后的世界。只是每一件事，也不至于对我全无影响，我的荒诞感随着它们一层一层加深。</li><li>昨天去外公墓上挂社了，和妈妈、外婆一起。外婆跟外公说很多话，问他这里风景好不好，有没有去哪里钓鱼。妈妈偷偷抹了几次眼泪。我最没用，眼泪大颗大颗滴在纸钱上，都不好烧了。可是我看见墓碑上外公的名字，他笑容灿烂的彩色照片，只是很想念很想念。妈妈让我作揖的时候可以心里跟外公说一些话，告诉他不要担心、请他保佑。可是我一边作揖一边心里只有一个声音：尕公啊 尕公诶[泪]</li></ul>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复杂性</title>
      <link href="/blog/complexity/"/>
      <url>/blog/complexity/</url>
      
        <content type="html"><![CDATA[<p>我放弃理解很多东西</p><p>我开始拥抱</p><p>惊人的复杂性</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reading Pixel2Mesh++: Multi-View 3D Mesh Generation via Deformation</title>
      <link href="/blog/Reading-Pixel2meshPP/"/>
      <url>/blog/Reading-Pixel2meshPP/</url>
      
        <content type="html"><![CDATA[<p>论文地址：https://arxiv.org/abs/1908.01491</p><p>作者：Chao Wen, Yinda Zhang, Zhuwen Li, Yanwei Fu</p><p>发表： ICCV 2019</p><p>链接： https://arxiv.org/abs/1908.01491</p><hr /><blockquote><p>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</p></blockquote><h2 id="why">Why：</h2><ol type="1"><li>单视角图像3D重建模的效果不够好，尤其是背面，而且泛化能力也差。</li><li>所以增加多个视角的图像：更多视觉信息，且有已经定义得很好的传统方法。</li><li>但是传统方法需要更大量的图像；这时候深度学习模型可以隐式编码视角间的关联，就派上了用场。</li><li>很有用，但是欠研究。</li></ol><h2 id="what">What：</h2><ol type="1"><li>利用多视角图像，固定相机pose参数，利用GCN，从粗糙逐渐精细地变形，生成3D mesh重建模。</li><li>采样mesh模型顶点周围的区域，利用perceptual feature推理出对mesh的形变。</li><li>对于不同种类的物体泛化能力很好。</li></ol><p>读前疑问：</p><ol type="1"><li>似乎就是给pixel2mesh加上一层壳，应用在多视角图像上🤔那么这里的创新点本质在哪儿呢？</li><li>GCN用处大吗，为什么用它？</li><li>采样mesh顶点周围的区域，是什么意思？</li><li>多视角3D重建，应用真的广泛吗？</li></ol><h2 id="how">How：</h2><ol type="1"><li>多视角变形网络 Multi-View Deformation Network (MDN)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> 3D Reconstruction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reading Self-supervised Single-view 3D Reconstruction via Semantic Consistency</title>
      <link href="/blog/Reading-Self-supervised-Single-view-3D-Reconstruction-via-Semantic-Consistency/"/>
      <url>/blog/Reading-Self-supervised-Single-view-3D-Reconstruction-via-Semantic-Consistency/</url>
      
        <content type="html"><![CDATA[<p>论文地址：https://arxiv.org/abs/2003.06473</p><p>作者：Xueting Li, Sifei Liu, Kihwan Kim, Shalini De Mello, Varun Jampani, Ming-Hsuan Yang, and Jan Kautz</p><p>发表： ECCV 2020</p><p>链接： https://github.com/NVlabs/UMR</p><hr /><blockquote><p>如果你去做这个任务，会怎么做？作者做的方法和你想的有什么差异？</p></blockquote><h2 id="why">Why：</h2><ol type="1"><li>在3d重建模任务中，同时预测形状、相机位置和材质是一个很大的问题，因为它内在的不确定性。</li><li>现有方法都需要借助各种手段：3D层面的监督、2D语义关键点、shading（这是什么？）、特定类别的3D template 、多视角等等。这些方法需要大量人力，所以很难广泛应用。</li><li>人类会直觉感知到一个物体包括各个部分，比如鸟有两只腿、两个翅膀、一个头，从而识别物体。类似的，cv受此启发，也可以将一个物体定义为多个可变形的部分的集合。</li></ol><h2 id="what">What：</h2><ol type="1"><li>仅需要单张图片+轮廓mask，利用语义一致性，实现自监督3D重建模</li><li>思路：1. 每个物体可以看作由可变形的部分组成；2. 对同一类型的不同物体，它们的每一部分在语义上都是一致的</li><li>通过自监督学习大量同类的图片，可以建立重建的mesh模型与图片之间的语义一致性。这样在同时预测形状、相机位置和材质的时候，可以降低模糊性。</li><li>第一个做到不需要特定类别的template mesh模型或者语义关键点，就可以从单视角图像中实现3d重建模。因此，这个方法可以推广到各种物体类别，而不需要类别的标签</li></ol><p>读前疑问：</p><h2 id="how">How：</h2><h3 id="模型">模型</h3><figure><img src="https://s2.loli.net/2022/01/27/x2BKozeFVpgUPkE.png" alt="image-20220122145159190" /><figcaption>image-20220122145159190</figcaption></figure><ol type="1"><li>（a）是原始图片。需要同一类别的大量图片一起作为输入</li><li>（b）用SCOPS模型（另一篇工作），对图像进行语义分割的结果。这个模型也是自监督的</li><li>（c）标准语义 uv map（Canonical semantic uv map）：<ol type="1"><li>理论上，同一类物体的mesh模型，尽管各自都有不同的形状，但每个点的语义含义都是一致的。</li><li>因此，根据前一步生成的大量语义分割结果，可以生成一张对应这个类别的Canonical语义uv map。</li></ol></li><li>（d）由前一步生成的Canonical语义uv map，可以得到重建的mesh模型表面的点对应的语义标签</li><li>橘色箭头：这个就是语义一致性了，它鼓励2D图像和3D模型之间的语义标签相互一致。这样，就可以解决前面提到过的在3D重建模的时候的“相机-形状不确定性”这个难题</li></ol><h3 id="具体方法">具体方法</h3><h4 id="cmr是baseline">CMR是baseline</h4><ol type="1"><li>用三个decoder <span class="math inline">\(D_{shape}\ D_{camera}\ D_{texture}\)</span> 同时预测mesh模型的形状、相机和材质<ol type="1"><li>形状 <span class="math inline">\(V=\tilde V + \Delta V\)</span>，其中 $V $ 是某类物体的template mesh模型，<span class="math inline">\(\Delta V\)</span> 是预测出来的点的偏移量</li><li>相机pose <span class="math inline">\(\theta\)</span> 是 weak perspective transformation （？）</li><li>材质 <span class="math inline">\(I_{flow}\)</span> 是 UV flow，是将输入图片到UV空间的映射，然后它可以被一个已经定义好的函数<span class="math inline">\(\phi\)</span>映射到mesh模型的表面的每一个点</li></ol></li><li>但是CMR需要人工标注的关键点作为输入，这篇论文主要就是把它去掉了。去掉之后呢，会出现相机+形状同时预测时Ambiguity的问题，所以就想方设法解决这个问题。</li></ol><figure><img src="https://s2.loli.net/2022/01/27/TkWsiJxMN38tKGu.png" alt="image-20220122160143711" /><figcaption>image-20220122160143711</figcaption></figure><h4 id="语义一致性解决相机形状同时预测时的ambiguity">语义一致性：解决相机+形状同时预测时的Ambiguity</h4><p>也就是Fig 3中红色框的部分。</p><ol type="1"><li><p><em>语义部件不变性 semantic part invariance：</em></p><ol type="1"><li>对于2D图像，用SCOPS（自监督co-part语义分割，另一篇论文的方法）可以很准确地对物体各个部分进行分割</li><li>对于3D mesh，每个点的语义含义是固定不变的，就算每个物体会有各自的形变</li></ol></li><li><p><em>语义一致性</em>：</p><ol type="1"><li><p><img src="https://s2.loli.net/2022/01/27/TzCkKA462gRbOFa.png" alt="image-20220124121618081" style="zoom:50%;" /></p><p>从Fig 4 (i) 可以看到，如果没有语义一致性，mesh模型中原本对应头的顶点被当作了翅膀尖，这样错误的变形对应了错误的相机pose。这就是相机+形状同时预测时的Ambiguity。</p></li><li><p>前面已经提到过，可以为每个具体类别生成一张标准语义 uv map（Canonical semantic uv map）。这里，就可以让 每个物体的2D语义分割结果 与 标准语义 uv map 保持一致性，从而让3D模型的每个语义部件跟2D图像里相应的位置有对应关系。这样可以很好地解决相机-形状Ambiguity问题。</p></li></ol></li></ol><h5 id="通过scops实现2d图像中部件的分割">通过SCOPS实现2D图像中部件的分割</h5><p><img src="https://s2.loli.net/2022/01/27/YFNpoKzfxkBRSbI.png" alt="image-20220124114332065" style="zoom:50%;" /></p><p>SCOPS 是自监督的方法，从一类物体的大量图片中发掘共同的语义部件。Fig 10第二行就是它的结果。后面还会提到，通过本文的方法，还可以反过来提升SCOPS的结果：利用生成的标准语义UV map作为伪标注反过来进行监督。</p><h5 id="通过标准语义uv-map实现3d模型中部件的分割">通过标准语义uv map实现3D模型中部件的分割</h5><ol type="1"><li><p>已经有了：</p><ol type="1"><li>模型学到的texture flow <span class="math inline">\(I_{flow}\)</span>可以将输入图片映射到UV空间，然后它可以被一个已经定义好的函数<span class="math inline">\(\phi\)</span>映射到mesh模型的表面的每一个点</li><li>通过SCOPS生成的图像 <span class="math inline">\(i\)</span> 的语义分割结果 <span class="math inline">\(P^i\in R^{H\times W\times N_p}\)</span>， 其中H和W是长和宽， <span class="math inline">\(N_p\)</span> 是语义部件数量</li></ol></li><li><p>这样的话，通过模型的 <span class="math inline">\(I_{flow}\)</span> 就可以把2D的语义分割结果 <span class="math inline">\(P^i\)</span> 映射到 UV 空间，把这个称为 语义UV map</p></li><li><p>理论上来说，同一类别的所有物体都应该得到同一个语义UV map，因为 1. 根据语义部件不变性，mesh模型的每个顶点对应的语义部件都是固定不变的 2. UV map和3d mesh 中的点又是通过<span class="math inline">\(\Phi\)</span>映射的关系，每个顶点对应的UV map上的坐标也是不变的。</p></li><li><p>但是因为SCOPS + <span class="math inline">\(I_{flow}\)</span> 的误差，各个物体生成的语义UV map事实上很不一样。所以这里提出了对 标准语义UV map <span class="math inline">\(\bar P_{uv}\)</span> 的估计方法：</p><ol type="1"><li><p>通过某种方法选择出训练集中效果比较好的子集 <span class="math inline">\(\mathcal{U}\)</span>，对它们的结果进行加和，</p><p><strong>选择样本的方式</strong>：</p><ol type="1"><li>首先选择最好的那一个样本，即 perceptual distance（3D投影到2D的图像与原始RGB图像的知觉距离？）最小的</li><li>然后选择K个跟这个最好的样本最接近的样本，即它们的语义UV map最接近</li></ol><p>公式如下：</p></li><li><p><span class="math display">\[\bar P_{uv}=\frac{1}{|\mathcal{U}|}\sum_{i\in \mathcal{U}}I^i_{flow}(P^i)\]</span></p><p>其中 <span class="math inline">\(I^i_{flow}(P^i)\)</span> 就是通过 <span class="math inline">\(I_{flow}\)</span> 映射语义分割结果 <span class="math inline">\(P^i\)</span> 得到的 语义UV map。</p></li></ol></li></ol><h5 id="d-和-3d-间的语义一致性">2D 和 3D 间的语义一致性</h5><ol type="1"><li><p><em>基于概率的约束 Probability-based constraint</em></p><ol type="1"><li><p><span class="math display">\[L_{sp}=||P^i-\mathcal{R}(\Phi (\bar P_{uv});\theta^i)||^2\]</span></p><p>标准语义UV map <span class="math inline">\(\bar P_{uv}\)</span> 由预定义好的函数 <span class="math inline">\(\Phi\)</span> 映射到 3D mesh表面，然后采用预测好的相机pose <span class="math inline">\(\theta^i\)</span> ，用可微分渲染 <span class="math inline">\(\mathcal{R}\)</span> 将3D模型渲染到2D，然后将结果与对应的由SCOPS生成的部件分割概率图 <span class="math inline">\(P^i\)</span> 做均方误差。</p></li><li><p>注：这个由SCOPS生成的图像分割结果 <span class="math inline">\(P^i\)</span> 是概率数值的形式</p></li><li><p>经验性地选择了采用均方误差MSE，比 KullbackLeibler divergence 效果好</p></li></ol></li><li><p><em>基于顶点的约束 Vertex-based constraint</em></p><ol type="1"><li><p>让3D模型投影回2D之后，被分类到某个语义part的顶点仍然处在图像中该part对应的区域</p></li><li><p><span class="math display">\[L_{sv}=\sum^{N_p}_{p=1} \frac{1}{|\bar V_p|}Chamfer(\mathcal{R}(\bar V_p;\theta^i),Y_p^i)\]</span></p><p>其中，<span class="math inline">\(\bar V_p\)</span> 是已经学好的某类物体的template mesh中属于部件p的那部分，<span class="math inline">\(Y_p^i\)</span>是原始2D图像中属于部件p的那部分，<span class="math inline">\(N_p\)</span> 是语义部件数量。</p></li><li><p>用Chamfer distance是因为投影后的顶点和原始的像素点并不是严格一对一对应的关系</p></li><li><p>用某类物体的template mesh，就可以让网络学相机pose；反之，假如用单个具体物体的mesh的话，网络就仅仅会对3D物体的形状进行扭曲，不会学到正确的相机pose了【我有点不理解为啥】</p></li></ol></li></ol><h3 id="渐进的训练方法em">渐进的训练方法EM</h3><ol type="1"><li><p>之所以要用渐进式训练，是因为</p><ol type="1"><li>需要3D重建模网络首先学会一个大体上可用的texture encoder <span class="math inline">\(I_{flow}\)</span>，然后才能生成标准语义UV map，</li><li>这样还能先生成对应具体类别的template mesh，一方面加速网络的收敛，一方面可以用在前面提到的<em>基于顶点的约束</em>中。</li></ol></li><li><p>但是，如果直接把template mesh和重建模模型全都一起学习的话，效果不好；所以就提出了：EM训练步骤（expectation-maximization期望最大化？），就是先固定一部分学习另一部分。</p><ol type="1"><li><p><strong>E</strong>：固定标准语义UV map和template（初始是球体），<strong>训练重建模网络</strong>。200轮。</p><p>loss包括：</p><ol type="1"><li><p>3D投影到2D的图像与gt剪影的 IoU ✖️ -1</p></li><li><p>3D投影到2D的图像与原始RGB图像的 perceptual distance（知觉距离？）</p></li><li><p>前面提到的基于概率的约束和基于顶点的约束</p></li><li><p>材质循环一致性 Texture cycle consistency：</p><ol type="1"><li><figure><img src="https://s2.loli.net/2022/01/27/SU3aFdKZrOtAiws.png" alt="image-20220124182432533" /><figcaption>image-20220124182432533</figcaption></figure><p>学习texture flow的时候最大的问题：颜色相似的3D mesh的面会被对应到错误的2D图像的像素点上</p></li><li><p>这是一个cycle：强制预测出来的texture flow（2D to 3D）和相机投影（3D to 2D）二者一致。</p></li><li><p>首先定义了<span class="math inline">\(\mathcal{C}_{in}^j\)</span>、 <span class="math inline">\(\mathcal{C}_{out}^j\)</span>分别是输入图像中被映射到三角形面<span class="math inline">\(j\)</span>的一定数量像素点的几何中心，和从三角形面<span class="math inline">\(j\)</span>渲染回2D图像时对应的一定数量像素点的几何中心。公式如下： <span class="math display">\[\mathcal{C}_{in}^j = \frac{1}{N_c}\sum^{N_c}_{m=1}\Phi(I_{flow}(\mathcal{G}^m))_j;\\ \mathcal{C}_{out}^j = \frac{\sum^{H\times W}_{m=1}\mathcal{W}_j^m\times \mathcal{G}^m}{\sum^{H\times W}_{m=1}\mathcal{W}_j^m}\]</span> 其中，<span class="math inline">\(\mathcal{G}^m\)</span>是投影图像的标准坐标网格（包含了像素的坐标<span class="math inline">\((u,v)\)</span>值），<span class="math inline">\(\Phi\)</span>是UV map，<span class="math inline">\(I_{flow}\)</span>把像素映射到3D mesh的面<span class="math inline">\(j\)</span>上；<span class="math inline">\(N_c\)</span>是对应到面<span class="math inline">\(j\)</span>的像素点的数量；<span class="math inline">\(\mathcal{W}\)</span>是可微分渲染时生成的概率map，每个<span class="math inline">\(\mathcal{W}_j^m\)</span>表示面 j 被投影到像素 m 上的概率。</p><ul><li>把重建模mesh模型渲染成2D图像，用的是 Soft Rasterizer，而不是CMR中用的 Neural Mesh Renderer，因为前者可以提供概率map，供texture cycle consistency使用</li></ul></li><li><p>那么，材质循环一致性就是让<span class="math inline">\(\mathcal{C}_{in}^j\)</span>接近 <span class="math inline">\(\mathcal{C}_{out}^j\)</span>： <span class="math display">\[L_{tcyc} = \frac{1}{|F|}\sum^{|F|}_{j=1}||\mathcal{C}_{in}^j-\mathcal{C}_{out}^j||^2_F\]</span></p></li></ol></li><li><p>还有写在附录里的两个loss：</p><ol type="1"><li>graph Laplacian constraint 来鼓励mesh表面平滑【从pixel-mesh中来的】</li><li>edge regularization 来惩罚大小不规则的面 代码里似乎是flatten loss</li></ol></li><li><p>还有写在附录里的对抗训练loss</p></li></ol></li><li><p><strong>M</strong>：利用训练好的重建模网络，更新template（从球体开始）和标准语义UV map。</p><ol type="1"><li><p>template一开始是球体，然后每训练K轮，对它进行一次更新： <span class="math display">\[\bar V_t=\bar V_{t-1} + D_{shape}(\frac{1}{|\mathcal{Q}|}\sum_{i\in \mathcal{Q}}E(I^i))\]</span> <span class="math inline">\(V_{t}\)</span>和 <span class="math inline">\(V_{t-1}\)</span>是更新前后的template，I是输入的图片，经过E生成3D属性，D是形状 encoder。Q是经过某种方式选择出来的部分样本。</p><p><strong>选择样本的方式</strong>：</p><ol type="1"><li>首先选择最好的那一个样本，即与ground truth轮廓的IoU最小的</li><li>然后选择K个跟这个最好的样本最接近的样本，即这些样本的gt轮廓与最好的样本的gt轮廓的IoU越小则越接近</li></ol></li><li><p>这样的话，template <span class="math inline">\(V_t\)</span> 就是选出来的样本的平均形状</p></li></ol></li><li><p>整个训练过程会包括两轮，每轮都包括一个E和一个M。（两轮分别就是代码中的<code>train_s1</code> <code>train_s2</code>。）在E中，训练200 epoch 重建模网络，然后在M中用训练好的网络更新template和标准语义UV map。注意在第一轮中（一轮包括一个E和M），只训练重建模网络，而没有语义一致性约束。</p></li></ol></li></ol><h3 id="实验">实验</h3><ol type="1"><li>数据集：PASCAL3D+中的车和摩托车、CUB-200-2011中的鸟、ImageNet中的马 斑马 牛、OpenImages中的企鹅</li><li>局限性：<ol type="1"><li>依赖于SCOPS提供语义分割，有时候语义分割不准确的话结果就不好</li><li>比较少见的相机pose很难</li><li>细节性的地方效果不好，比如正在飞的鸟的两个翅膀、斑马的腿等</li></ol></li></ol><h1 id="questions">Questions</h1><ol type="1"><li><p>为什么要stage2 ？</p><ol type="1"><li>这两个 stage的主要区别就是：stage1的时候没有用语义一致性约束，在stage2才加上。因为一开始texture flow encoder效果并不好，avg_uv也不准确，所以干脆先不用。所以分成s1和s2，最主要的就是因为在s1训练完之后，重建模网络已经大体可以用了，这时候就可以调用<code>avg_uv.py</code>来生成标准语义UV map，供s2的时候语义一致性用。</li><li>附录里说，从效果上来看，2个stage比1个效果要好，且已经足够好了，有这张图对比了一下：<img src="https://s2.loli.net/2022/01/27/Q26BbRypnrKj7AU.png" alt="image-20220127171646865" /></li></ol></li><li><p>avg_uv 就是学 seg map -&gt; uv map的么？</p><ol type="1"><li>seg map -&gt; uv map这个过程是重建模网络中texture flow这个部分做的事情</li><li>avg_uv就是论文里说的 标准语义 uv map（Canonical semantic uv map）：<ol type="1"><li>理论上，同一类物体的mesh模型，尽管各自都有不同的形状，但每个点的语义含义都是一致的</li><li>因此，对于某一类物体的大量图像数据集（比如鸟），可以生成一张对应这整个类别的avg_uv</li><li>利用这个avg_uv，相当于是给整个类别的template打上了语义标签，后续计算语义一致性约束的时候可以用。</li><li>这个avg_uv的计算过程：<ol type="1"><li>首先用SCOPS（另一篇工作，无监督的）生成所有图像的语义分割结果seg map，然后用重建模网络学到的texture flow映射成uv map</li><li>选择效果最好的一部分instances，对它们的uv map取平均，得到avg_uv</li></ol></li></ol></li></ol></li><li><p>paper 里面 有说固定camera 学shape？ 那代码里有fix camera预测么？</p><p>我好像没有读到paper里有具体说到固定camera学shape耶……</p><p>论文里提到要解决camera-shape一起学时的ambiguity的问题，但不是固定一个学另一个，而是利用avg_uv来实现语义一致性：让 每个物体的2D seg uv map 与 avg_uv 保持一致性，从而让3D模型的每个语义部件跟2D图像里相应的位置有对应关系。</p><p><img src="https://s2.loli.net/2022/01/27/TzCkKA462gRbOFa.png" alt="image-20220124121618081" style="zoom:50%;" /></p><p>从这张图里可以看到，如果没有语义一致性，mesh模型中原本对应头的顶点被当作了翅膀尖，这样的camera就是错误的，错误的camera又造成了错误的shape。而有了语义一致性，就能利用语义让camera 更准确，这样就能跟着提升shape</p></li><li><p>按照他的说法， 先是feature avg 然后 decode 出 average shape。那么这个feature就要学好一点，否则平均容易成球形。那么这个feature 还有其他loss在上面么？比如我们smr 上还有 consistency loss 但是加在 delta_vertice上？他有加在feature上么？否则不能确保这个 feature avg 了以后 还有意义</p><p>我可能没有懂这个问题耶……学长说的是不是计算category level 的 template这个步骤呢？我觉得这个步骤里面保证效果好的方式有这几点比较关键：</p><ol type="1"><li>更新category level 的 template是从M步骤才开始进行的；在此之前，E步骤中会在固定template的前提下，单独训练重建模网络200轮，这个过程中的loss还是挺多的，除了语义一致性没有用以外，其他的loss都用了，包括论文里提出的texture cycle consistency，还有附录里提到的graph Laplacian constraint、edge constraint等等</li><li>计算average template的时候，并不是用了所有数据，而是选择了最好的一部分instances：<ol type="1"><li>首先选择最好的那一个instance，即与ground truth mask的IoU最小的</li><li>然后选择K个跟这个最好的样本最接近的样本，即这些样本的gt mask与最好的样本的gt mask的IoU越小则越接近</li></ol></li></ol></li><li><p>代码里面还放了一些 external的code，有用到么？</p><ol type="1"><li>一个是SoftRas，用来把重建模mesh模型渲染成2D图像。论文里提到用它而不是CMR中用的 Neural Mesh Renderer，是因为它可以提供概率map，供texture cycle consistency使用</li><li>另一个是Neural Mesh Renderer，备选的renderer</li><li>再就是PerceptualSimilarity，用来计算了perceptual loss</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
            <tag> 3D Reconstruction </tag>
            
            <tag> Self-supervised </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rebellious-person</title>
      <link href="/blog/rebellious-person/"/>
      <url>/blog/rebellious-person/</url>
      
        <content type="html"><![CDATA[<p>有的时候我觉得叛逆和听话并不是矛盾的特质。有一种本质的叛逆其实是想清楚了想要什么，然后选择了听话这一个行动模式。为什么说这是叛逆呢，因为这不是真的听话，是某种最极端的不听话。我已经见过了很多的乖乖人，许多一眼就能分辨出来，是真乖乖听话，还是叛逆人所伪装。这种伪装听话的叛逆人大概还有另一个特质，就是有多面性。很多人误把其特异的那些面当作真实面目，觉得听话一面是伪装；其实不然，全都是真实的样貌，没有必要分明。学习一个人要学会容忍他的复杂性。</p><p>我有想过用一些色彩更容易辨明的词来代替「叛逆」：自主，自知，清醒，成熟，明白自己想要什么……可是这都差了点意思。还是叛逆好，因为这毕竟有一种孤勇感在里面；也不贴切，大概是虫子蠕动的guyong感。想象这样一个画面：在肠道一样的世界里，大家都乖乖顺滑着逐渐化为某种排泄物，但是其中有一些guyong者，就是叛逆人。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>obj format debugging -- vertices order determines face orientation and faces are invisible from back</title>
      <link href="/blog/obj-format-debugging-vertices-order/"/>
      <url>/blog/obj-format-debugging-vertices-order/</url>
      
        <content type="html"><![CDATA[<p>Okayyyyyyyy!!!</p><ol type="1"><li><p><strong>Vertices order determines face orientation</strong>.</p><p>e.g., <code>f 1 2 3</code> and <code>f 1 3 2</code> are 2 opposite faces</p></li><li><p>Another thing is, <strong>faces are invisible from backside by default!!!</strong></p><p>In <strong>Meshlab</strong> here is a setting <code>back-face</code> which by default is <code>single</code>. If set it as <code>double</code>, then the face will be visible from backside.<img src="https://s2.loli.net/2022/01/05/CjwX378IKQYpznb.png" /></p><p>Meanwhile, the <strong>Preview</strong> of MacOS also makes faces transparent from opposite orientation. Like this: <img src="https://s2.loli.net/2022/01/05/vVI5SZk1d8cCqx6.png" alt="Stupid sphere no?" style="zoom:50%;" /></p></li></ol><p>Finally my sphere is correct:</p><p><img src="https://s2.loli.net/2022/01/05/jyMqxdsRCiLDlSf.png" alt="correct sphere" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mesh </tag>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Last day of 2021</title>
      <link href="/blog/Last-day-of-2021/"/>
      <url>/blog/Last-day-of-2021/</url>
      
        <content type="html"><![CDATA[<p>没有太多要说的。这首词正好表达了一切我想表达的：</p><blockquote><p>一向年光有限身，等闲离别易销魂，酒筵歌席莫辞频。</p><p>满目山河空念远，落花风雨更伤春，不如怜取眼前人。</p><p>——晏殊《浣溪沙》</p></blockquote><p>共勉。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免于未来</title>
      <link href="/blog/release-future/"/>
      <url>/blog/release-future/</url>
      
        <content type="html"><![CDATA[<p>明天，太阳照常升起<br />世上所有的颜色将逐渐掩埋我眼中的悲伤<br />消失的国度 消失的人<br />我怎么相信啊<br />人怎么可能会消失呢<br />化作一抔黄土<br />去到另一个世界<br />没有人伤心的时候会不信彼岸吧？<br />何时也都能跳舞<br />只是舞在有些事面前都全无意义<br />除了生死<br />哪一桩不是闲事<br />每个人一生中都沉溺在无关紧要的琐事中<br />以免被生命的悲伤侵扰<br />以关闭感官<br />然而酒浇进大海的愁里<br />就好像把我掩埋在这个世界中<br />或者用这个世界的颜色掩埋我<br />或者用琐碎掩埋所有生者<br />可是掩埋一切吧<br />不要掩埋我的亲人<br />重要的亲人啊<br />多希望世界因你从此停摆<br />就停下来吧<br />让我免于未来<br />为什么明天<br />太阳还要照常升起啊</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grandpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Grandfather</title>
      <link href="/blog/My-Grandfather/"/>
      <url>/blog/My-Grandfather/</url>
      
        <content type="html"><![CDATA[<p>我的外公去世了，转眼就快半个月了。这件事情在我心中，从不敢相信的说法，变成了模糊的、不真实的说法。我实际上时时提起，它在任何时候都萦绕在我脑中，以至于都很难相信已经过去半个月了；可是其实又很难提起，提起总显得轻飘飘的，这是压在我心中最沉重的一件事。</p><span id="more"></span><p>我当然很爱我的外公，他是一位正直、善良、坚强的人。我的脑中积攒了很多很多关于他的事迹，都是从外婆、妈妈口中听来的。</p><p>外公自己其实跟我交流得很少，时至今日印象最深刻的，竟然是小学的时候外公给我煮面吃，很严厉地批评我：面汤也必须喝完，不能浪费！小时候的我挑食、食量小，这个训诫让我很畏惧。可是我从来没想过面汤也是需要珍惜的事物，因此被外公点醒，也颇感惭愧。以至于记到今日，并且将刻进骨子里。</p><p>我高中的时候其实以十分饱满的感情，在一篇周记中认真地写过外公的事迹与形象。妈妈觉得很感动。我目前倒是不敢翻出来看。多少年后才会无意中看到，然后哭掉呢？我不敢想。</p><p>我的外公啊，他的人生过得应该很不容易的。从小失去双亲，人生中有过一段穷困潦倒的日子，才养成极度节约的习惯。他固执到偏执的程度，才成为这样一位威严的长辈，可是也正因为这性格，年轻时工作中受到过很大的挫折。他的头脑与才能一定是值得尊敬的，琴棋书画都会一些不说，还会修各种电路，拥有一个颇为神秘、包罗万象的工具柜。</p><p>外公迷信算命，我的名字就是他起的，经过很仔细的推算。弟弟出生的时候，外公虽然仍在世，但已经病重，遗憾没能给他起名了。妈妈说，一定是外公算了太多命，触犯了什么规则而受到惩罚，所以晚年自己命苦，云云。最后真的好苦啊，那样一位思维敏捷的智者，终日口不能述、手不能书，忍受着身体各处的疼痛，一天天因为营养不良而消瘦下去，生命的活力不可逆地暗淡下去。</p><p>这些生命不可逆的运动一度让我陷入最深的恐惧。我能想象，但我能想象几何呢。最后一次见到外公已是半年前了，后来的外公是什么样子呢。他在我心中的形象，一切的事迹，相关的回忆，都已经在时间中定格了。</p><p>这是我最伤感的事情。</p><p>一个人还活着，那意味着随着时间，他也是在流动的。可是一个人死去，他就凝固了，这是我还不能接受的事情。跟永恒相比，人的一生短暂得要命。跟浩瀚相比，人的命轻得不值一提。但在我心中，重要的人，其重量就是无法衡量的，其离去就是切切实实地，将我的生命也随之割去了一部分。然而，关于我的生命被割走这件事，我感到感激，也感到踏实。</p><p>我的感想在人之逝世这件事面前，多少微不足道。但我仍然会一遍遍地回忆这件事，我会再一遍遍地提起这件事。这是我对外公思念的方式。</p><blockquote><p>我知道这世界本如露水般短暂。然而然而。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grandpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Check My Evangelion Theme for Typora!!</title>
      <link href="/blog/Check-My-Evangelion-Typora-Theme/"/>
      <url>/blog/Check-My-Evangelion-Typora-Theme/</url>
      
        <content type="html"><![CDATA[<p>Heeeeyyyyy!!! I customized a theme called <code>Evangelion</code> for <strong><a href="https://typora.io/">Typora</a> Markdown Editor</strong>, and it was accepted! Do check it on the <a href="https://theme.typora.io/theme/Evangelion/">Typora - Theme official page</a>:</p><figure><img src="https://s2.loli.net/2021/12/14/1AX7Bkra6loxWcR.png" alt="The first one is mine" /><figcaption>The first one is mine</figcaption></figure><figure><img src="https://s2.loli.net/2021/12/14/kNT6uZ2MhrDPSHx.png" alt="Offical page" /><figcaption>Offical page</figcaption></figure><p>And the theme's homepage is here: <a href="https://github.com/viridityzhu/Evangelion-typora-theme" class="uri">https://github.com/viridityzhu/Evangelion-typora-theme</a></p><p>Get downloads: <img src="https://img.shields.io/github/downloads/viridityzhu/Evangelion-typora-theme/total.svg" /></p><p>(People just download, but don't give me a star T^T)</p><h1 id="evangelion-typora-theme">Evangelion-typora-theme</h1><p>An eye-friendly dark theme for <a href="https://typora.io/">Typora</a> Markdown Editor, based on the color scheme of Neon Genesis Evangelion.</p><figure><img src="https://theme.typora.io/media/theme/evangelion/eva0.png" alt="Image of Evangelion found from Google" /><figcaption>Image of Evangelion found from Google</figcaption></figure><h2 id="feature">Feature</h2><ul><li>Supports <strong>English</strong> and <strong>中文</strong>.</li><li>Eye-friendly <strong>dark mode</strong>.</li><li>Code color scheme imported from <a href="https://codemirror.net/theme/material-ocean.css">material-ocean</a>.</li><li><em>I love Evangelion Unit-01!</em></li></ul><h2 id="screenshots">Screenshots</h2><figure><img src="https://theme.typora.io/media/theme/evangelion/eva1.png" alt="套娃现场" /><figcaption>套娃现场</figcaption></figure><div><p float="left"><img src="https://theme.typora.io/media/theme/evangelion/eva2.png" width="49%" style="display:inline !important"/> <img src="https://theme.typora.io/media/theme/evangelion/eva3.png" width="49%" style="display:inline !important"/></p></div><h2 id="install">Install</h2><ul><li>Download the <code>Eva.css</code> file: see <a href="https://github.com/viridityzhu/Evangelion-typora-theme/releases">releases</a>.</li><li>Copy and paste the file in to the <strong>Typora Theme Folder</strong>:<ul><li><code>Preferences…</code> &gt; <code>Appearence</code> &gt; <code>Open Theme Folder</code>.</li></ul></li><li>Restart Typora, then select <code>Theme</code> &gt; <code>Eva</code> to apply.</li></ul><p>安装：</p><ul><li>下载<code>Eva.css</code>文件: <a href="https://github.com/viridityzhu/Evangelion-typora-theme/releases">releases</a></li><li>将该文件粘贴到<strong>Typora主题文件夹</strong>中：<ul><li><code>偏好设置</code> &gt; <code>外观</code> &gt; <code>打开主题文件夹</code></li></ul></li><li>重启Typora，然后选择<code>主题</code> &gt; <code>Eva</code>，主题即可生效。</li></ul><h2 id="reference">Reference</h2><p>I take the color palette of <a href="https://en.wikipedia.org/wiki/Neon_Genesis_Evangelion">Neon Genesis Evangelion</a>.</p><p>And this theme code is inspired by both <a href="https://github.com/imageslr/typora-theme-bear">bear-dracula</a> and <a href="https://github.com/Y1chenYao/typora-mint-theme">mint-dark</a>. I love these 2 themes, too!</p><p><em>Designed and tested on macOS. Not fully tested, but should work for Windows/Linux.</em></p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Theme </tag>
            
            <tag> Evangelion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读总结与别无所指</title>
      <link href="/blog/On-Reading-in-November/"/>
      <url>/blog/On-Reading-in-November/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/12/02/Hf8gyxVdShTbzCO.png" alt="我的微信读书11月阅读时长" style="zoom: 33%;" /></p><p>11月平均每日阅读43分钟，最高一天阅读4小时，总共21个小时。这意味着，这30天里，我大约有一整天的人生活在书里的世界。幸甚至哉！</p><p>这些时间最大头还是花在了<a href="https://jyzhu.top/2021/11/27/After-Reading-The-Wind-Up-Bird-Chronicle-by-Murakami-Haruki/">《奇鸟行状录》里（不太值）</a>，其次应该是钱钟书的《宋诗选注》和黑格尔的《小逻辑》里。看上去好奇怪的组合，不过不然。这其实很符合我的阅读习惯，一般是不同类型的书同时阅读，每次依当天的状态和心情去择一本翻开。实际上，想读《小逻辑》的时候，和想读《奇鸟行状录》的时候，整个人的状态是完全不一样的。据我观察，当我精神状态极佳、心情大好的时候，最想读哲学类的书；情感泛滥（高涨或者低落）的时候，最想读诗；感到疲乏的时候，想读小说来消遣。我倒也根据这么一点小习性，大言不惭地自觉“随性”，除了读书随心所欲以外，生活中大大小小的事上，心态也大抵类似。（主要是小事，大事实际上还是有点优柔寡断的，还想改呢。）</p><p>不过呢，这个月挑来读的这几本书，跟我之前的阅读惯性相比还是比较突兀的。一方面，小说上，我已经挺久没读日本小说了。虽然以前也喜欢村上春树，但这次是带着一些“怀旧”的心情去读他的。根据我的规划，在这个人生阶段，我是想读一些陀氏和海明威的，再往后也想涉猎一些不太熟悉但十分严肃的作家。</p><p>另一方面，这是我头一次迈入哲学原著的门🚪，精挑细选之后，才决定从黑格尔读起：人们说黑格尔是最后一个拥有完整的大哲学体系的哲学家；人们还说要想真的了解哲学，首先应该好好了解黑格尔。另外，黑格尔的辩论法，是想了解后世大多数哲学家，绕不过的一个话题。至于选择《小逻辑》，纯粹是贪图它比较短小精悍，但也完整包含了黑格尔整个逻辑学的思想，想来比较容易上手……然而读起来也不枉“晦涩”一词。我读得确实缓慢，但只要是一眼小小的泉眼，也总会源头活水慢慢来的。</p><p>宋诗嘛，是头脑一热想读古诗试试。之前喜欢的是现代诗，对古诗颇感敬畏。读起来其实很有趣，我以前对古诗的印象，是觉得所有诗都主题雷同，用的意象翻来覆去那几个。但捧起读来，才能真的体会到个中妙处。就是那么一板一眼的格律，那么受限的意象，那么几个主题，然每首诗都有实在的新意。我发现我渐渐开始喜欢起写景的诗来。</p><p>在新加坡这永无止境的夏季中，我心之所向的莫过于这样的场景了——</p><blockquote><p>嘉果浮沉酒半醺，床头书册乱纷纷。</p><p>北轩凉吹开疏竹，卧看青天行白云。</p><p>-- 苏舜钦《暑中闲咏》</p></blockquote><p>另外，读到一个有趣的诗人李觏，钱钟书说他写诗喜欢用独特的意象和“特立独行”的字。听上去这个评价并不是特别褒义，我倒是意外很喜欢。</p><blockquote><p>人言落日是天涯，望极天涯不见家；</p><p>已恨碧山相阻隔，碧山还被暮云遮！</p><p>-- 李觏《乡思》</p></blockquote><p>这种蕴含奇思的诗，可能美感会被削弱，但是灵气却是独具，是我所偏爱！</p><p>还有一位跟他评价相近的诗人王令，他的这首《暑旱苦热》是我目前印象最深的。天哪，一首诗难道不就是要体现诗人“手提天下”这样的意致纵横吗！</p><blockquote><p>清风无力屠得热，落日着翅飞上山。</p><p>人固已惧江海竭，天岂不惜河汉干？</p><p>昆仑之高有积雪，蓬莱之远常遗寒。</p><p><strong>不能手提天下往，何忍身去游其间？</strong></p><p>-- 王令《暑旱苦热》</p></blockquote><hr /><p>我人生的阅读量高峰，集中在高中三年，不长不短。大学以来，整个人“务实”了许多，大多数时间分给了小时候心目中“没有意义”的琐碎生活。这是有意义的。不过因为记忆能力的缺憾，我整个就好像一个虽然读写速度快，但容量很低的内存（我也不想混入这么奇怪的计算机比喻啊喂(#`O′)）……见什么东西，理解很快，忘得也很快。今天刚跟小熊凄惨地对了一下去年看的JOJO第四季的人物关系，发现我的记忆已经完全模糊混乱了。所以嘛，大部分读过的书，到最近一两年，几乎已经面目模糊了。我在想，有的书与我的关系可能已经衰退到了 听到书名时知道这本我读过 的地步，虽然我发誓我读每本书的时候都很认真（还很慢）。</p><p>以前在知乎上刷到“读过的书还是会忘记，那么读书到底有什么意义”这类问题，还会饶有兴致地点开认真看；现在看到倒是觉得看得明白了。要我回答的话，我认为这个问题本身是不成立的。问读书对人的意义在哪，不是和问“郊游”对人的意义在哪一样嘛。我能理解那种功利性的想法，把读书和学一门特长类比，希望带来一些价值；但我想这类想法都涉嫌自指，即一种逻辑上的悖论，是不成立的。（其实我很不喜欢“特长”这个词，因为它是功利性的；“兴趣”这个词才本质嘛。）</p><p>生活的目的（而不是意义）就是生活，再往后一步别无所指。我每日学习，阅读，喝酒（不是真的每天喝酒），晒太阳，这些事情的目的是什么呢？就是为了学习，阅读，喝酒，晒太阳呀！（去码头整点薯条笑话就是最准确的表达。）</p><p>想起来上次妈妈分享的一个有关性格、品质的心理学测试，测出来好多好多个评价维度，其中我最低的两项是什么“希望”“活力”，给我整挺乐的。那些问题问出来，按我的想法，选的确实都是最显得悲观的答案；但是这好像没法评价我这类荒诞主义<strong>信仰</strong>啊（瞎造了一个词）。虽然听上去很没有活力，但恰恰是超级有活力的！只不过望穿人生舞台的布景，直面整个荒诞而已，这不是对生活真正的热爱吗？</p><p>跟我心境最相近的毫无疑问是苏轼这一首词，我的最爱，没有之一：</p><blockquote><p>落日绣帘卷，亭下水连空。知君为我新作，窗户湿青红。</p><p>长记平山堂上，欹枕江南烟雨，杳杳没孤鸿。认得醉翁语，“山色有无中”。</p><p>一千顷，都镜净，倒碧峰。<strong>忽然浪起，掀舞一叶白头翁。</strong></p><p>堪笑兰台公子，未解庄生天籁，刚道有雌雄。<strong>一点浩然气，千里快哉风。</strong></p><p>-- 苏轼《水调歌头·黄州快哉亭赠张偓佺》</p></blockquote><p>我觉得人生诗意（或者一般语境中的意义），不说全部，至少一半都在这一句中了吧：“忽然浪起，掀舞一叶白头翁。”哈哈哈哈，解释不明白。</p><p>我其实最近才承认自己热爱生活。之前也确实中了常规思路的桎梏，觉得自己是消极悲观的。可是我方才自觉是极热爱生活的。就好像热爱一些自由度高的沙盒游戏，或者决策系统很复杂的策略游戏一样，我也热爱兼具这两种特性的生活，热爱生活的这两种特性。不过由于一些理科生的科学主义<strong>信仰</strong>，我倒是保有这样一种偏颇的理想：好想通过建模和参数来解释甚至预测整个世界啊哈哈哈。</p><p>最后再自己跟自己（因为大概没有别人会看吧）解释一下前文几处加粗的“<strong>信仰</strong>”二字的额外含义。其实只是一种疑心，既怀疑我对这些思想的理解之正确性，也怀疑这些思想本身的正确性。进一步来说，一方面意味着我仍然没有把这里写的任何东西当真，认为这些都有可能是错误的，并且可能会被之后的我推翻。另一方面，也意味着正如破除对“意义”的幻想一样，我当然也破除了对所有思想的幻想。再赘述一句，这类幻想的破除并不是消极的，而是勇敢的。是对应那句：</p><blockquote><p>我要的不是岸，我要海浪翻卷。</p></blockquote><p>写得也太零碎了，但能藉由阅读这个主题，把我最近这些细碎的想法一股脑说出来，倒也畅快。只是行文不得不说是坑坑洼洼，离我想达到的表达水平差远了。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>After Reading The Wind-Up Bird Chronicle by Murakami Haruki</title>
      <link href="/blog/After-Reading-The-Wind-Up-Bird-Chronicle-by-Murakami-Haruki/"/>
      <url>/blog/After-Reading-The-Wind-Up-Bird-Chronicle-by-Murakami-Haruki/</url>
      
        <content type="html"><![CDATA[<h2 id="读后感">读后感</h2><blockquote><p>在<em>微信读书</em>上花了整整22个小时读了<a href="https://en.wikipedia.org/wiki/The_Wind-Up_Bird_Chronicle">《奇鸟行状录》</a>，感受不佳，读完的时候甚至感到愤懑，胡说一通。</p></blockquote><p>读完我竟然有生气的感觉。尤不喜欢这个隐喻大乱炖式结尾。早知道这本小说通篇暗喻，一件事也没直接地、好端端地讲明白，我是断不会选择阅读的。生气大概是对我这二十多个小时感到不值。</p><p>我从来不讨厌隐喻，过去也从村上的《海边的卡夫卡》《挪威的森林》之类长篇里收获了村上式魔幻现实的趣味，也因此是喜欢村上春树的。</p><p>但是，不一样的地方在于，本书是所谓「村上春树转型之作」，开始触及更严肃、更宏大的议题，我原本也是对此颇有期待的。可是用他特有的轻飘飘的方式来探讨爱情、人生我尚能接受，照样探讨暴力、战场，我只有不理解。（剥皮那一段写得倒是很沉重，也很好。）</p><p>我认为隐喻该是为了更清楚、更深刻的表达而存在的，而这本书里的大量隐喻根本无益于表达。本书最大的一个主题，即暴力会以各种形式对人造成损害，完全是有更直截了当的方式可以表达清楚的，我一直在期待更直白深入的探讨。可是整本书被细枝末节的、含义不明的隐喻占据了篇幅，以悬疑的情节、跌宕的故事走向来吸引人，我只觉得是挂羊头卖狗肉。</p><p>无语凝噎。</p><h2 id="读中感">读中感</h2><p>这段时间在读村上春树的《奇鸟行状录》。我感觉还行，但是有一点不喜欢的地方。当然是会读完的，都读了三分之二了；但是容我在此吐吐槽吧。不喜欢的地方就是那种神神叨叨，老是说梦境与现实有联系、无法区分啊，老是说主角有什么样什么样的命运，然后遇到一些世外奇人，身上发生一些象征意义的变化，然后命运就哦豁转向了。命运之前是什么方向，后来又是什么方向呢？主角确实有感觉，但又道不明，不可说。总结起来就是：神神叨叨。看别人的想法的时候，有一个人提到村上说话总是有一股刻意的淡定、简短感，他又让笔下所有人都这样说话，导致所有人都有一股村上感，说的都不大像人话，也不一定符合人物性格了。太贴切了！</p><p>我想这本书读罢，我大概会搁置村上春树的作品们了。大概是又长大些了吧，阅读口味总之是变化了。下一本肯定会读陀氏的。</p><hr /><p>或许是我举一反三能力有限…有很多寓言性质的东西，我并没有找出来与之对应的现实意义的道理，并没有完全理解村上想表达的含义。</p><p>妻子有暗处的无人察觉的一面，妻子在某种超现实的意义上受困；作为与妻相爱的丈夫，冈田需要从一开始失去妻子的迷茫和失落中走出来，坚持自己，把这当成使生活停滞的磨难，想办法救回妻子，让生活步入正轨，给自己所处的世界重新拧上发条……可是现实生活—至少是我的现实生活，不是这么运转的呀，没有这样的形式呀？</p><p>一个地道的人，做出的事总是不那么地道、很令人意外；一个人渐渐地就滑入了一个与常人的世界不同的、仿佛停滞了的世界。这是怎样的一种人生困境呢？</p><p>书中冈田无法接受妻子和情人跑了的事实，很努力地思考、寻找答案，然后通过一些超现实的隐喻和境遇，还真的发现了妻子遇到了只有自己才能挽救的困境这一事实。可是现实生活中，更多时候，发生这种不遂人意的事，更大概率那就是事实吧，把自己放在井底枯想，只会想疯了，不会想通了吧？</p><h2 id="傻里傻气的雨蛙女儿从笠原may身上唯一感怀到的">傻里傻气的雨蛙女儿——从笠原May身上唯一感怀到的</h2><blockquote><p>最近我暗暗觉得好笑：人们这样从早到晚忙得不亦乐乎有点怪。没这样想过？怎么说好呢，我在这里的工作，只不过按头头如此这般的吩咐如此这般地干罢了，丝毫用不着动脑，等于说脑浆那东西上工前放在寄存柜里下工时再随手拿回。一天七小时对着操作台一个劲儿往发罩上栽头发，然后在食堂吃饭进浴室洗澡，接下去当然就得像一般人那样睡觉。一天二十四小时可自由支配的时间实在少得可怜，而且“自由时间”也由于人困马乏而多用来打瞌睡或怔怔发呆，几乎谈不上用心想点什么。当然周末不用做工，却又要集中洗衣服搞卫生。有时还要上街，一忽儿就过去了。一次曾下决心写写日记，但简直没什么好写，只一周就扔一边去了。日复一日千篇一律嘛！ 尽管这样，尽管这样，对于自己如此成为工作的一部分我还是半点厌恶情绪都没有，别扭感什么的也没有。或者不如说由于这样蚂蚁式地一门心思劳动，我甚至觉得渐渐靠近了“本来的自己”。怎么说呢，说倒说不好，总之好像是由于不思考自己而反倒接近自己的核心。我所说的“有点怪”就是这个意思。</p></blockquote><p>唉，我还没有长大（或者说还没有和解）的一点是什么呢，就是无论自己做什么，都还在担心没有在做「正确」的事情，担心虚耗时间，担心一头栽进什么洞里似的。</p><blockquote><p>那两人居然相信世界是如同单元住宅那样始终一贯如此这般的，以为只要以始终一贯的方法干下去，一切终将水到渠成，所以他们也才为我的倒行逆施而困惑而伤心而气恼。</p></blockquote><p>其实笠原may就是加缪笔下的荒诞人，觉察了世界如同舞台布景，一旦坍塌背后什么也不是。这里她所谓雨蛙一般的父母，就是从来没有过从自己扮演的角色中抽离出来，从来没有停下来反思过的平凡人罢</p><h2 id="有关拧发条鸟的比喻又及为什么要翻译成奇鸟行状录呢">有关「拧发条鸟」的比喻；又及，为什么要翻译成「奇鸟行状录」呢？</h2><blockquote><p>&quot;拧发条鸟是实际存在的鸟。什么样我不知道，我也没亲眼见过，只听过叫声。拧发条鸟落在那边树枝上一点一点拧世界发条，‘吱吱吱吱’拧个不停。如果它不拧发条，世界就不动了。但这点谁也不晓得，世上所有的人都以为一座远为堂皇和复杂的巨大装置在稳稳驱动世界，其实不然，是拧发条鸟飞到各个地方，每到一处就一点点拧动小发条来驱动世界。发条很简单，和发条玩具上的差不多，只消拧发条即可，但那发条唯独拧发条鸟方能看到。&quot;</p></blockquote><p>这个比喻没有打动我。我眼中的世界比这个精巧多了。不过比喻本身还是很精彩的</p><blockquote><p>但是，无论是不是偶然的一致，在肉桂的故事中“拧发条鸟”这一存在都不可漠视。人们在它那只有特殊人方可听见的鸣声引导下走向无可回避的毁灭。在那里，一如兽医自始至终感觉的那样，所谓人的自由意志等等是无能为力的。他们像被上紧背部发条而置于桌面的偶人，只能从事别无选择余地的行为，只能朝别无选择余地的方向前进。处于听到鸟鸣范围内的人们，几乎人人都遭受剧烈磨损以至消失。大部分人死掉了，他们直接从桌边滚到了地下。</p></blockquote><p>这才理解到村上比喻的准确。「拧发条」是被动而不是主动，是别无选择、剧烈磨损、走向毁灭。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Houses with open doors</title>
      <link href="/blog/Houses-with-open-doors/"/>
      <url>/blog/Houses-with-open-doors/</url>
      
        <content type="html"><![CDATA[<p>互联网冲浪对于我来说最浪漫的事情之一，就是顺着一篇搜来的技术文档，随手点开博客主页时，发现博客中记满了朴素但真挚的生活感想。有哲思，有小故事，有少年得意的成就记叙，也有人到中年的感怀伤时……每个人的博客都是独一无二的，网站名字和独特装饰极力彰显着个性；但所有博客又有一个共同的特点，就是毫无保留的文字和期待被造访的心情。这就好像在漠然的大城市里，却有一些不起眼的小屋子，真诚地敞着所有的门窗，等待像我这样的，可能会来，也可能不会来的旅人。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures and Their ADTs</title>
      <link href="/blog/Quick-Notes-About-Data-Structures/"/>
      <url>/blog/Quick-Notes-About-Data-Structures/</url>
      
        <content type="html"><![CDATA[<p>In IT5003, I am studying data structures and algorithms. The language we learn with is Python. So I take notes about what I learned, and how to use them in Python. I struct my notes based on data structures, and all the ADTs that are implemented by the data structures are discussed within. I focus on their usage, key design, and sometimes problems. In the future maybe I will append all the implementation codes.</p><hr /><ul><li>ADT: Abstract data type, from the point of view of a user, defined by its behavior.</li><li>Data Structure: from the point of view of an implementer, concrete representations of data.</li></ul><h1 id="linear-data-structures">Linear Data Structures</h1><h2 id="array">Array:</h2><blockquote><p>Continuous space to store fix-sized elems.</p></blockquote><p>I often confuse array with list... Now I need to clarify that an <strong>array</strong> is a data structure, which is one of the implementations of the <strong>List ADT</strong>.</p><p><strong>Key design</strong>:</p><p>Methods:</p><ul><li>==Get ith==: O(1) obviously at A[i]</li><li>==Insert(i)==: O(n) worst/average, coz need to shift left; O(1) if insert at tail</li><li>==Remove(i)==: Just similar as insert, need to shift right.</li><li>==Search n==: Still similar. O(n) worst/average found at tail; O(1) if found immediately at head</li></ul><p><strong>Usage</strong>: Make a <strong>List ADT</strong>. Store ordered things continually, we can <strong>insert</strong> into a specific position, <strong>get</strong> ith element, of course also <strong>search</strong>, and <strong>remove</strong></p><p><strong>Problem</strong>: Insert and remove are <strong>O(n)</strong> coz it needs to shift everything behind to make the position empty/not empty. Also, it requires <strong>consecutive</strong> and <strong>fixed</strong>(can be overcome) space to store, sometimes may be not that flexible.</p><p><strong>In python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># It is PYTHON who let me confuse the 2!! coz in python, an array is just called a list...</span></span><br></pre></td></tr></table></figure><h2 id="linked-list">Linked List</h2><blockquote><p>non-continous space, not fixed-size. Each vertex contains value and a pointer pointing next vertex.</p></blockquote><p><strong>Usage</strong>: Make a <strong>List ADT</strong> again. Compared with an array, it doesn't need to be consecutive and fixed-size, and it can <strong>insert</strong>/<strong>remove</strong> from <strong>head</strong> very efficiently, in <strong>O(1)</strong>. But most importantly, it can make <strong>Stack/Queue/Deque ADT</strong>, because it is <strong>resizeable</strong>.</p><p><strong>Key Design</strong>: I think just need to clarify its attributes and methods:</p><ul><li>Attributes:<ul><li>Value</li><li>Next -- Singly LL</li><li>(Previous -- Doubly LL)</li></ul></li><li>Methods:<ul><li>==Get ith==: Unfortunately it becomes <strong>O(n)</strong> compared with array, coz it needs to go from the head pointer.</li><li>==Insert==: Insert at the head only need <strong>O(1)</strong> (at tail also O(1) if it is doubly linked); but on average, also <strong>O(n)</strong>, coz should go from head :(</li><li>==Remove==: Just similar as insert. (ps: coz need to search the prev node)</li><li>==Search n==: Obviously O(1) best and <strong>O(n)</strong> worst/avg, same as Array</li></ul></li></ul><h3 id="stack-adt">Stack <strong>ADT</strong></h3><blockquote><p>Like book stack.</p></blockquote><p><strong>Usage</strong>: <strong>LIFO</strong>(last-in-first-out), so you can both <strong>pop</strong> and <strong>push</strong> from head. (Errrr, impacted by python, I always think of it as a tail).</p><p><strong>In python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># just use a list!! and regard the tail as the head.</span></span><br><span class="line">stack = []</span><br><span class="line">stack.append(<span class="number">1</span>)</span><br><span class="line">lastElem = stack.pop() <span class="comment"># by default, pop at -1, i.e. the last one</span></span><br></pre></td></tr></table></figure><h3 id="queue-adt">Queue <strong>ADT</strong></h3><blockquote><p>Like queue in reality.</p></blockquote><p><strong>Usage</strong>: <strong>FIFO</strong>(first-in-first-out), so <strong>push</strong> at the tail and <strong>pop</strong> from head, it is perfectly implemented by a <strong>linked list</strong> (with tail pointer), to make both operations <strong>O(1)</strong>.</p><p><strong>In python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment"># coz queue is a subset of deque, so a deque can be a queue, haha</span></span><br><span class="line">q = deque()</span><br><span class="line">q.append()</span><br><span class="line">q.popleft()</span><br></pre></td></tr></table></figure><h3 id="deque-adt">Deque <strong>ADT</strong></h3><blockquote><p>Queue + double head</p></blockquote><p><strong>Usage</strong>: Double-ended queue. Both <strong>pop</strong> &amp; <strong>push</strong> from both <strong>head</strong> &amp; <strong>tail</strong>. Perfectly implemented by a <strong>doubly linked list</strong>, with all operations <strong>O(1)</strong>.</p><p><strong>In python</strong>: Look at Queue.</p><h1 id="non-linear-data-structures">Non-Linear Data Structures</h1><h2 id="binary-heap">Binary Heap</h2><blockquote><p><strong>Complete Binary Tree</strong>: Every level fully filled + last level as far left as possible</p><p>+ <strong>Binary Max Heap property</strong>: Parent greater than children</p></blockquote><p><strong>Usage</strong>:</p><p>Used for implementing a <strong>Priority Queue ADT.</strong> When to use PQ? When you need to maintain some ordered elements, and frequently fetch the Max/Min ones.</p><p><strong>Key Design</strong>: A binary heap is firstly a <strong>binary tree</strong>, and then it is ruled as a <strong>Min heap</strong> -- every parent node should be smaller than its 2 children. The direct way of implementing the binary heap is to use Tree class, with attributes Value, LeftChild and RightChild. However, it is more convenient if we just simply use an <strong>array</strong>. Just need to think of this:</p><ul><li>For a parent at kth position, its left child is at <span class="math inline">\(k * 2\)</span>, and right child is k * 2 + 1.</li><li>For a child at kth position, its parent is at k//2.</li><li>For a condensed binary tree, everything can be mapped into an also condensed list.</li></ul><p>5 standard Binary (Max) Heap operations:</p><ol type="1"><li>==<strong>Insert(v)</strong>== in O(log <strong>N</strong>): Firstly insert as the last leaf. Then <strong>bubble up</strong> -- obviously, swap from the bottom to the up.</li><li>==<strong>ExtractMax()</strong>== in O(log <strong>N</strong>): just get the root element; then the important thing is what you should do after popping out the root element -- you need to maintain the heap. So, pick the last leaf to the root, then <strong>bubble down</strong> -- i.e. swap the parent with the bigger child up to down, till all fine.</li><li>(==<strong>Create(A)</strong>== - O(<strong>N</strong> log <strong>N</strong>) version: Simply insert (that is, by calling <strong>Insert(v)</strong> operation) all <strong>N</strong> integers of the input array into an initially empty Binary Max Heap one by one.)</li><li>==<strong>Create(A)</strong>== - O(<strong>N</strong>) version: (make a list of unsorted elements become a heap): best is <strong>O(n)</strong>, with bubble up the leaves.</li><li>==<strong>HeapSort()</strong>== - in O(<strong>N</strong> log <strong>N)</strong>: Simply call the O(log <strong>N</strong>) <strong>ExtractMax()</strong> operation <strong>N</strong> times.</li></ol><p><strong>Extra</strong>: Heapsort is not <strong>cache friendly</strong>. Because the computer will predict that you'll read the array in sequence, so it will cache the following elems. Quicksort takes this advantage. Mergesort not.</p><p><strong>In python</strong></p><p>Implementation: don't use it, just for understanding</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binary_heap</span>:</span>  <span class="comment"># implementation that has no duplicate</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># the underlying data structure, we will ignore index 0</span></span><br><span class="line">        self.A = [<span class="literal">None</span>]</span><br><span class="line">    <span class="comment"># three helper navigation function, all O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parent</span>(<span class="params">self, i</span>):</span> <span class="keyword">return</span> i // <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left</span>(<span class="params">self, i</span>):</span> <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right</span>(<span class="params">self, i</span>):</span> <span class="keyword">return</span> i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shift_up</span>(<span class="params">self, i</span>):</span>  <span class="comment"># O(log n)</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>  <span class="comment"># at root, do nothing</span></span><br><span class="line">        <span class="keyword">if</span> self.A[i] &gt; self.A[self.parent(i)]:  <span class="comment"># violate property with parent</span></span><br><span class="line">            self.A[i], self.A[self.parent(i)] = self.A[self.parent(i)], self.A[</span><br><span class="line">                i]  <span class="comment"># swap upwards</span></span><br><span class="line">            <span class="comment"># recurse, at most O(log n) steps back to the root</span></span><br><span class="line">            self.shift_up(self.parent(i))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, x</span>):</span>  <span class="comment"># O(log n)</span></span><br><span class="line">        <span class="comment"># append to the back of Python list, the only possible insertion point,</span></span><br><span class="line">        <span class="comment"># O(1)</span></span><br><span class="line">        self.A.append(x)</span><br><span class="line">        self.shift_up(<span class="built_in">len</span>(self.A) - <span class="number">1</span>)  <span class="comment"># shift upwards, O(log n) at worst</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shift_down</span>(<span class="params">self, i</span>):</span>  <span class="comment"># O(log n)</span></span><br><span class="line">        swap_id = i</span><br><span class="line">        <span class="comment"># compare with left child, if exists</span></span><br><span class="line">        <span class="keyword">if</span> self.left(i) &lt; <span class="built_in">len</span>(self.A) <span class="keyword">and</span> self.A[i] &lt; self.A[self.left(i)]:</span><br><span class="line">            swap_id = self.left(i)</span><br><span class="line">        <span class="comment"># compare with right child, if exists</span></span><br><span class="line">        <span class="keyword">if</span> self.right(i) &lt; <span class="built_in">len</span>(self.A) <span class="keyword">and</span> self.A[swap_id] &lt; self.A[self.right(i)]:</span><br><span class="line">            swap_id = self.right(i)</span><br><span class="line">        <span class="keyword">if</span> swap_id != i:  <span class="comment"># need to swap with the larger of the two children</span></span><br><span class="line">            <span class="comment"># swap downwards with the larger of the two children</span></span><br><span class="line">            self.A[i], self.A[swap_id] = self.A[swap_id], self.A[i]</span><br><span class="line">            <span class="comment"># recurse, at most O(log n) steps to one of the bottom-most leaf</span></span><br><span class="line">            self.shift_down(swap_id)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract_max</span>(<span class="params">self</span>):</span>  <span class="comment"># O(log n)</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        taken = self.A[<span class="number">1</span>]  <span class="comment"># this is the maximum value, O(1)</span></span><br><span class="line">        <span class="comment"># swap with the last existing leaf, O(1)</span></span><br><span class="line">        self.A[<span class="number">1</span>], self.A[-<span class="number">1</span>] = self.A[-<span class="number">1</span>], self.A[<span class="number">1</span>]</span><br><span class="line">        self.A.pop()  <span class="comment"># reduce list size by one, O(1)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            <span class="comment"># fix heap property downwards, O(log n) at worst</span></span><br><span class="line">            self.shift_down(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> taken  <span class="comment"># return the maximum value, O(1)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_max</span>(<span class="params">self</span>):</span>  <span class="comment"># O(1)</span></span><br><span class="line">        <span class="keyword">return</span> self.A[<span class="number">1</span>]  <span class="comment"># this is the root</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span>  <span class="comment"># O(1)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.A) == <span class="number">1</span>  <span class="comment"># when A = [None] only</span></span><br></pre></td></tr></table></figure><p>Use the library:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappop, heappush, heapify</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue <span class="comment"># implemented based on the heapq, a thread safe version</span></span><br><span class="line"></span><br><span class="line">pq_heapq = [] <span class="comment"># this is a MIN heap, to get a max heap, we negate all numbers</span></span><br><span class="line">heappush(pq_heapq, -<span class="number">5</span>)  <span class="comment"># insert negation</span></span><br><span class="line">heappop(pq_heapq)</span><br></pre></td></tr></table></figure><h2 id="hash-table">Hash Table</h2><blockquote><p>Hashing is an algorithm (via a hash function) that maps large data sets of variable length into smaller Integer data sets of a fixed length. Hash Table is a data structure to map key to values (also called Table or Map ADT).</p></blockquote><p><strong>Usage</strong>:</p><ul><li>You want a <strong>Table ADT</strong> that can store things, and you can <strong>input</strong> and <strong>search</strong> in <strong>O(1)</strong> (also <strong>delete</strong>)</li><li>Actually it's not necessarily the things are integers, they can be anything, even strings. And you can even use (key, value) pair, to store anything additionally in the value part.</li></ul><p><strong>Key design</strong>: Use a <strong>hash</strong> function to map <strong>n</strong> keys in a list with length <strong>m</strong>; then the complexity of search(v)/remove(v) is <strong>O(n/m)</strong> (Search v in the list with avg length n/m). You should design the hash function and also the length m.</p><ul><li>Hash function:<ul><li><p>For integers: <strong>modulo</strong> operation is the best practice. Just let <code>h(v) = v % M</code>. O(1).</p></li><li><p>For strings: (normally strings only contains 26 letters) <code>for char in string: sum = sum * 26 + char % 26</code>. This is like Base-26, so every English letter matters.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash_function</span><span class="params">(string v)</span> </span>&#123; <span class="comment">// assumption 1: v uses [&#x27;A&#x27;..&#x27;Z&#x27;] only</span></span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;                <span class="comment">// assumption 2: v is a short string</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : v) <span class="comment">// for each character c in v</span></span><br><span class="line">    sum = ((sum * <span class="number">26</span>) % M + (c - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>)) % M; <span class="comment">// M is table size</span></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol type="1"><li>never modulo a constant, modulo the size of table;</li><li>never use a funtion that is not uniform, like sqrt;</li><li>never random</li></ol></li></ul></li><li>Length m:<ul><li>Based on experiences, it should be a <strong>prime</strong>, to make the least collisions; and should be around n, to make O(n/m) a constant.</li></ul></li><li>Solve collision: i.e., two or more keys have the same hash value.<ul><li><strong>Seperate Chaining</strong> (Not move): Use Doubly Linked List (or just simply python list): if 2 keys are in the same position, just add the 2nd one at the last of the list.</li><li>Opening Address (Move away):<ul><li>linear search another position</li><li>non-linear search for another position</li><li>rehash for another position</li></ul></li><li>People are debating which is better, but my teacher Steven believes SC is better.</li></ul></li><li>With these 3 operations, it is a good <strong>Table ADT</strong> (implemented by SC):<ul><li>==Search(v)==: Just check if v in A[h(v)] list. O(<span class="math inline">\(\alpha\)</span>). <span class="math inline">\(\alpha = n/m\)</span> is the avg length of each chain. If <strong>m</strong> is set properly, the <span class="math inline">\(\alpha\)</span> is then very small, thus it is O(1).</li><li>==Remove(v)==: also, coz need to search it at first. Just delete v in A[h(v)] list</li><li>==insert(v)==: O(1). Just append v in A[h(v)] list</li></ul></li></ul><p><strong>May be problems:</strong></p><ul><li>The space occupation of the hash table should be always a little bit larger than the original elements, coz it is very possible for the hash table to contain empty positions</li><li>What if the keys are duplicated? By default, we don't want it duplicated. But I believe there are potential ways to deal with duplicated keys</li></ul><p><strong>In python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># just use dictionary!!!</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">k, v = <span class="string">&#x27;zjy&#x27;</span>, <span class="number">518</span></span><br><span class="line">d[k].append(v) <span class="comment"># No need to initialize `if k not in d: d[k] = []` then</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="number">13</span> <span class="comment"># table size, best to be prime</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hash_table</span>:</span>  <span class="comment"># mimic Python dict()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.underlying_table = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash_function</span>(<span class="params">self, v</span>):</span>  <span class="comment"># for string v</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> v:</span><br><span class="line">            <span class="built_in">sum</span> = ((<span class="built_in">sum</span> * <span class="number">26</span>) % M + (<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">1</span>)) % M</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, key</span>):</span>  <span class="comment"># to emulate mapper[key]</span></span><br><span class="line">        <span class="comment"># O(k), k is the length of this list, but with careful setup, k can be</span></span><br><span class="line">        <span class="comment"># O(1)</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.underlying_table[self.hash_function(key)]:</span><br><span class="line">            <span class="keyword">if</span> k == key:  <span class="comment"># if there is an existing key</span></span><br><span class="line">                <span class="keyword">return</span> v  <span class="comment"># return this satellite data</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="comment"># get the reference of the row</span></span><br><span class="line">        row = self.underlying_table[self.hash_function(key)]</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> row:</span><br><span class="line">            <span class="keyword">if</span> k == key:</span><br><span class="line">                row.remove((k, v))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># we do nothing if key is not actually found</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, key, value</span>):</span>  <span class="comment"># to emulate mapper[key] = value</span></span><br><span class="line">        <span class="keyword">if</span> self.search(key):</span><br><span class="line">            self.remove(key)</span><br><span class="line">        self.underlying_table[self.hash_function(key)].append(</span><br><span class="line">            (key, value))  <span class="comment"># just append at the back</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">            total += <span class="built_in">len</span>(self.underlying_table[i])</span><br><span class="line">        <span class="keyword">return</span> total == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="binary-search-tree">Binary Search Tree</h2><blockquote><p>A Binary Search Tree (BST) is a binary tree in which each vertex has only up to 2 children that satisfies <strong>BST property</strong>:</p><p>All vertices in the left subtree of a vertex must hold a value smaller than its own; all vertices in the right subtree of a vertex must hold a value larger than its own.</p></blockquote><p><strong>Usage</strong>: Another way to implement <strong>Table ADT</strong>. This way, compared with hash table, it is slightly slower, with all operations <strong>O(logn)</strong>. However, it can do additional things: keep keys in table <strong>ordered</strong>.</p><p><strong>Key Design</strong>: A <strong>binary tree</strong>, for every node, everything on the left is smaller than it; on the right, bigger. (not only for the direct children, but also for everything below).</p><p>Basically, BST as an implementation of <strong>Table ADT</strong>, should also have the 3 <strong>operations</strong>: (All <strong>O(log n)</strong>)</p><ul><li>==Search(v)==</li><li>==Remove(v)==</li><li>==insert(v)==</li></ul><p>Besides, it is excellent because it has other special operations:</p><ol type="1"><li>Query operations (the BST structure remains unchanged):<ol type="1"><li>Search(v): O(h), h is the height of the tree (h is log N on average, but can be N). Just binary search from root down.</li><li>==Predecessor(v)== (and similarly ==Successor(v)==), both also O(h). (details below)</li><li>==Inorder Traversal==, then elems are sorted. O(n)</li></ol></li><li>Update operations (the BST structure may likely change):<ol type="1"><li>Insert(v), O(h), find the place and add it.</li><li>Remove(v), O(h). Worst case is that v has 2 children, then need to fisrtly search(v) in O(h), then find its successor in another O(h), then replace it by its successor, and rememer to delete the duplicated successor.</li><li>==Create BST==.</li></ol></li></ol><p>Successor后继：</p><ol type="1"><li>If v has a right subtree, should be the <strong>minimum of the right</strong></li><li>If no right subtree, go traverse ancestors, till <strong>the first ancestor that is greater</strong> than v</li><li>Otherwise, none.</li></ol><p>Presuccesor:</p><ol type="1"><li>If has a left subtree, should be the maximum of the left</li><li>If not, should be the first ancestor that is smaller</li><li>Or none.</li></ol><p><strong>Question</strong>: How many structurally different BSTs can you form with <strong>n distinct</strong> elements?</p><p><a href="https://stackoverflow.com/questions/16004723/number-of-binary-search-trees-over-n-distinct-elements">Solution with Catalan number</a></p><p><a href="http://techieme.in/count-binary-search-trees/">Solution that's more understandable</a> <span class="math display">\[Catalan_n = C_{2n}^n \div (n+1)\]</span></p><p><strong>In python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># No implemented library for binary tree</span></span><br><span class="line"><span class="comment"># If you need sorting, use `.sort()`</span></span><br><span class="line"><span class="comment"># If you need priority queue, use heapq as binary heap</span></span><br><span class="line"><span class="comment"># If you need table, use dictionary</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTVertex</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key</span>):</span>  <span class="comment"># set as &#x27;public&#x27; for easier coding</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__root = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span>(<span class="params">self, T, v</span>):</span>                     <span class="comment"># private version of insert</span></span><br><span class="line">        <span class="keyword">if</span> T == <span class="literal">None</span>:                             <span class="comment"># insertion point is found</span></span><br><span class="line">            T = BSTVertex(v)</span><br><span class="line">        <span class="keyword">elif</span> T.key &lt; v:                           <span class="comment"># search to the right</span></span><br><span class="line">            T.right = self.__insert(T.right, v)</span><br><span class="line">        <span class="keyword">else</span>:                                     <span class="comment"># search to the left</span></span><br><span class="line">            T.left = self.__insert(T.left, v)</span><br><span class="line">        <span class="keyword">return</span> T                                  <span class="comment"># return the updated BST</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__inorder</span>(<span class="params">self, T</span>):</span>                       <span class="comment"># private version of inorder</span></span><br><span class="line">        <span class="keyword">if</span> T == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__inorder(T.left)                    <span class="comment"># recursively go to the left</span></span><br><span class="line">        <span class="built_in">print</span>(T.key, end=<span class="string">&#x27; &#x27;</span>)                     <span class="comment"># visit this BST node</span></span><br><span class="line">        self.__inorder(T.right)                   <span class="comment"># recursively go to the right</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__search</span>(<span class="params">self, T, v</span>):</span>                     <span class="comment"># private version of search</span></span><br><span class="line">        <span class="keyword">if</span> T == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> T                              <span class="comment"># not found</span></span><br><span class="line">        <span class="keyword">elif</span> T.key == v:</span><br><span class="line">            <span class="keyword">return</span> T                              <span class="comment"># found</span></span><br><span class="line">        <span class="keyword">elif</span> T.key &lt; v:</span><br><span class="line">            <span class="keyword">return</span> self.__search(T.right, v)      <span class="comment"># search to the right</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__search(T.left, v)       <span class="comment"># search to the left</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, v</span>):</span></span><br><span class="line">        self.__root = self.__insert(self.__root, v)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__inorder(self.__root)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, v</span>):</span></span><br><span class="line">        res = self.__search(self.__root, v)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> res == <span class="literal">None</span> <span class="keyword">else</span> res.key</span><br></pre></td></tr></table></figure><h1 id="graph">Graph</h1><h2 id="concepts">Concepts</h2><ul><li>Vertex</li><li>Edge</li><li>Path</li><li>Directed/ Undirected</li><li>Weighted/Unweighted</li><li>Acyclic: No circle.</li><li>Connected</li></ul><p>Special Graphs</p><ul><li>Tree: only <strong>one unique path</strong> between 2 vertices. <strong>E = V - 1</strong>, always. Acyclic. Minimal edges to keep a graph connected.</li><li>Complete: <strong>E = V*(V-1)/2</strong> edges (or <strong>E</strong> = O(<strong>V2</strong>)). Most dense graph</li><li>Bipatite: can be divided into 2 sets where there is no edge between members of the same set.</li><li>DAG</li></ul><h2 id="ways-to-store-a-graph">Ways to store a graph</h2><ol type="1"><li>Adjacency Matrix: Column and row are both vertices. Space complexity <strong>O(V<sup>2</sup>)</strong><ol type="1"><li>Usage: Frequently update the weights of edges; Checking the existence of edge (u, v). Both <strong>O(1).</strong></li><li>Drawbacks: <strong>O(v)</strong> when fetch neighbors. not good when many vertices; Space complexity high.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AM = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(V)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(V)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(V):</span><br><span class="line">    AM[i] = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, (fh.readline().strip().split())))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Neighbors of vertex 0:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(V):                             <span class="comment"># O(|V|)</span></span><br><span class="line">    <span class="keyword">if</span> AM[<span class="number">0</span>][j]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Edge 0-&#123;:d&#125; (weight = &#123;:d&#125;)&#x27;</span>.<span class="built_in">format</span>(j, AM[<span class="number">0</span>][j]))</span><br></pre></td></tr></table></figure></li><li>Adjacency List: Column is vertices, then use linked lists to store their neighbors. Space complexity <strong>O(V + E)</strong><ol type="1"><li>Usage: Commonly. Frequently fetch neighbors of vertices. <strong>O(k)</strong>, k is # nbrs. Fastest.</li><li>Drawbacks: Need to search for Existence of Edge (u, v), O(k).</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AL = defaultdict(<span class="built_in">list</span>)  <span class="comment"># initalize AL</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(V):</span><br><span class="line">    line = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, (fh.readline().strip().split())))</span><br><span class="line">    total_neighbours = <span class="built_in">int</span>(line[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(line), <span class="number">2</span>):</span><br><span class="line">        v, w = <span class="built_in">int</span>(line[j]), <span class="built_in">int</span>(line[j + <span class="number">1</span>])</span><br><span class="line">        AL[i].append((v - <span class="number">1</span>, w))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Neighbors of vertex 0:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> v_w <span class="keyword">in</span> AL[<span class="number">0</span>]:</span><br><span class="line">    <span class="comment"># AL[0] contains the required information</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Edge 0-&#123;:d&#125; (weight = &#123;:d&#125;)&#x27;</span>.<span class="built_in">format</span>(v_w[<span class="number">0</span>], v_w[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></li><li>Edge List: Column is edges, then store pairs (vertex1, vertex2, weight). Space complexity <strong>O(E)</strong><ol type="1"><li>Usage: Need to <strong>sort</strong> edges in terms of weights</li><li>Drawbacks: Need to scan the whole thing when fetch neighbors / search existence of edge(u,v). O(E)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E = <span class="built_in">int</span>(fh.readline())</span><br><span class="line">edge_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(E):</span><br><span class="line">    u, v, w = <span class="built_in">map</span>(<span class="built_in">int</span>, fh.readline().split())</span><br><span class="line">    edge_list.append((w, u, v))</span><br><span class="line"></span><br><span class="line"><span class="comment"># build a heap</span></span><br><span class="line">heapq.heapify(edge_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># edges sorted by weight (smallest-&gt;largest)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(E):</span><br><span class="line">    edge = heapq.heappop(edge_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;weight: &#123;:d&#125; (&#123;:d&#125;-&#123;:d&#125;)&#x27;</span>.<span class="built_in">format</span>(edge[<span class="number">0</span>], edge[<span class="number">1</span>], edge[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ol><h2 id="dfs-bfs">DFS &amp; BFS</h2><p>Both <strong>O(V + E)</strong> if the graph is implemented using Adjency List, coz we need to visit k nbrs of each v in O(k).</p><p>DFS:</p><ol type="1"><li><p>Recursion to do the visit children - visit me - loop.</p></li><li><p>Avoiding Cycle: Use an array <code>status[v]</code> of size V to remember whether a vertex is visited.</p></li><li><p>Remeber the path: Use an array <code>parent[v]</code> of size V to remember the successor of v.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPath</span>(<span class="params">u</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p[u] == -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(u), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    printPath(p[u])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(u), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>BFS:</p><ol type="1"><li>Use a FIFO deque to do the visit all children loop.</li><li>Avoiding Cycle: Use an array <code>status[v]</code> of size V to remember whether a vertex is visited.</li><li>Visualgo said no need to track back?</li></ol><h3 id="applications">Applications</h3><ol type="1"><li><p>Reachability test: DFS/BFS, then check <code>status[v]</code></p></li><li><p>Actually printing the traversal path: DFS/BFS, then backtrack the <code>parent</code> array</p></li><li><p>Identifying/Counting/Labeling Connected Components (CCs) of undirected graphs: DFS/BFS, make use of the <code>status</code></p></li><li><p>Detecting if a graph is cyclic: modify DFS's <code>status</code> array to track:</p><ol type="1"><li><p><strong>unvisited</strong>: same as earlier, DFS has not reach vertex <strong>u</strong> before,</p></li><li><p><strong>explored</strong>: partially visited. DFS has visited vertex <strong>u</strong>, but at least one neighbor of vertex <strong>u</strong> has not been visited yet (DFS will go depth-first to that neighbor first),</p></li><li><p><strong>visited</strong>: now <strong>stronger</strong> definition: all neighbors of vertex <strong>u</strong> have also been visited and DFS is about to backtrack from vertex <strong>u</strong> to vertex <strong>p[u]</strong>.</p><p>Then, if encounter <strong>status[y] = explored</strong>, then it is a cycle.</p></li></ol></li><li><p>Topological Sort (only on DAGs),</p><ol type="1"><li><p>The DFS version requires just <strong>one additional line</strong> compared to the normal DFS and is basically the <strong>post-order</strong> traversal of the graph.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">i</span>):</span></span><br><span class="line">    visited[i] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j, w <span class="keyword">in</span> al[i]:</span><br><span class="line">        <span class="keyword">if</span> visited[j]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        dfs(j)</span><br><span class="line">    topoOrder.append(i) <span class="comment"># add topoOrder</span></span><br><span class="line">    </span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">vertices = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">al = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    v1, v2, w = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    al[v2].append((v1, w))</span><br><span class="line"></span><br><span class="line"><span class="comment"># toposort</span></span><br><span class="line">topoOrder = []</span><br><span class="line">visited = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 0-based</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">        dfs(i)</span><br><span class="line"></span><br><span class="line">topoOrder.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> topoOrder:</span><br><span class="line">    <span class="keyword">for</span> j, w <span class="keyword">in</span> al[i]:</span><br><span class="line">        vertices[j] += vertices[i] * w</span><br><span class="line"><span class="built_in">print</span>(*vertices)</span><br></pre></td></tr></table></figure></li><li><p>The BFS version is based on the idea of vertices <strong>without incoming edge</strong> and is also called as Kahn's algorithm.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">in_degree = [<span class="number">0</span>] * V</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> al:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> al[i]:</span><br><span class="line">        in_degree[j] += i <span class="comment"># cal in degree</span></span><br><span class="line">        </span><br><span class="line">q = deque() <span class="comment"># a queue of vertices with indegree 0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(V):</span><br><span class="line">    <span class="keyword">if</span> in_degree[i] == <span class="number">0</span>:</span><br><span class="line">        q.append(i) <span class="comment"># enqueue all v with indegree 0</span></span><br><span class="line">        </span><br><span class="line">cnt = <span class="number">0</span> <span class="comment"># cnt of visited vertices</span></span><br><span class="line">topoOrder = []</span><br><span class="line"><span class="keyword">while</span> q:</span><br><span class="line">    u = q.popleft()</span><br><span class="line">    topoOrder.append(u)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> al[u]:</span><br><span class="line">        in_degree[i] -= <span class="number">1</span> <span class="comment"># when reach, indegree - 1</span></span><br><span class="line">        <span class="keyword">if</span> in_degree[i] == <span class="number">0</span>: q.append(i) <span class="comment"># now can be put into topo</span></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> cnt &lt; V: </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Cycle!&#x27;</span>) <span class="comment"># Why? Coz if cnt &lt; V, means some vertices still have indegree and thus not put into the queue. The remaining edges are the cycle.</span></span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">  <span class="built_in">print</span>(*topoOrder)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="in-python">In Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for dfs, define a function dfs(), and remember to add the iteration limitation</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">100000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">i</span>):</span></span><br><span class="line">    visited[i] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> al[i]:</span><br><span class="line">        <span class="keyword">if</span> visited[j]: <span class="keyword">continue</span></span><br><span class="line">        dfs(j)</span><br><span class="line">        </span><br><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">al = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">visited = [<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    a, b = a-<span class="number">1</span>, b-<span class="number">1</span> <span class="comment"># convert to 0-based</span></span><br><span class="line">    al[a].append(b)</span><br><span class="line">    al[b].append(a)</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> visited[i]:</span><br><span class="line">        <span class="built_in">print</span>(i + <span class="number">1</span>) <span class="comment"># 1-based</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag: <span class="built_in">print</span>(<span class="string">&#x27;Connected&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for bfs, remember to use deque and popleft()</span></span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"></span><br><span class="line">INF = inf</span><br><span class="line">dist = [INF <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(V)]</span><br><span class="line">dist[s] = <span class="number">0</span></span><br><span class="line">q = deque()</span><br><span class="line">q.append(s)</span><br><span class="line">p = [-<span class="number">1</span> <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(V)]              <span class="comment"># parent</span></span><br><span class="line"></span><br><span class="line">layer = -<span class="number">1</span>                              <span class="comment"># for output printing</span></span><br><span class="line">isBipartite = <span class="literal">True</span>                      <span class="comment"># additional feature</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q):</span><br><span class="line">    u = q.popleft()</span><br><span class="line">    <span class="keyword">if</span> (dist[u] != layer):  <span class="comment"># new layer now</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nLayer &#123;&#125;: &quot;</span>.<span class="built_in">format</span>(dist[u]), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    layer = dist[u]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;visit &#123;&#125;, &quot;</span>.<span class="built_in">format</span>(u), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> v, w <span class="keyword">in</span> AL[u]:                    <span class="comment"># w ignored</span></span><br><span class="line">        <span class="keyword">if</span> dist[v] == INF:</span><br><span class="line">            dist[v] = dist[u] + <span class="number">1</span>         <span class="comment"># dist[v] != INF now</span></span><br><span class="line">            p[v] = u                      <span class="comment"># parent of v is u</span></span><br><span class="line">            q.append(v)                   <span class="comment"># for next iteration</span></span><br><span class="line">        <span class="keyword">elif</span> dist[v] % <span class="number">2</span> == dist[u] % <span class="number">2</span>:  <span class="comment"># in the same set</span></span><br><span class="line">            isBipartite = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="sssp">SSSP</h2><ul><li>BFS for unweighted or constant weighted graph</li><li>Modified Dijkstra's Algorithm for weighted. (It is just the Uniform Cost Best Search). <strong>O((V+E) log V).</strong> It uses a Priority Queue via binary heap to maintain the search order. And this modified means a <strong>Lazy Update</strong> tech: leave the outdated ones in the PQ, and only check valid when meet them.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"></span><br><span class="line">INF = inf</span><br><span class="line"></span><br><span class="line">V, E, s = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>.split())</span><br><span class="line">AL = [[] <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(V)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(E):</span><br><span class="line">    u, v, w = <span class="built_in">map</span>(<span class="built_in">int</span>, f.readline().split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    AL[u].append((v, w))                     <span class="comment"># directed graph</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (Modified) Dijkstra&#x27;s routine</span></span><br><span class="line">dist = [INF <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(V)]</span><br><span class="line">dist[s] = <span class="number">0</span></span><br><span class="line">pq = []</span><br><span class="line">heappush(pq, (<span class="number">0</span>, s))  <span class="comment"># 长这样：（vertex， dist）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort the pairs by non-decreasing distance from s</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">len</span>(pq) &gt; <span class="number">0</span>):</span><br><span class="line">    d, u = heappop(pq)                  <span class="comment"># shortest unvisited u</span></span><br><span class="line">    <span class="keyword">if</span> (d &gt; dist[u]):</span><br><span class="line">        <span class="keyword">continue</span>                        <span class="comment"># *** a very important check. Lazy Update here</span></span><br><span class="line">    <span class="keyword">for</span> v, w <span class="keyword">in</span> AL[u]:                  <span class="comment"># all edges from u</span></span><br><span class="line">        <span class="keyword">if</span> (dist[u] + w &gt;= dist[v]):</span><br><span class="line">            <span class="keyword">continue</span>                    <span class="comment"># *** not improving, skip</span></span><br><span class="line">        dist[v] = dist[u] + w           <span class="comment"># relax operation</span></span><br><span class="line">        heappush(pq, (dist[v], v))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(V):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;SSSP(&#123;&#125;, &#123;&#125;) = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(s, u, dist[u]))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notebook </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some notes on Searching and Sorting</title>
      <link href="/blog/Some-notes-on-Searching-and-Sorting/"/>
      <url>/blog/Some-notes-on-Searching-and-Sorting/</url>
      
        <content type="html"><![CDATA[<h2 id="searching-and-sorting">Searching and Sorting</h2><h3 id="searching-algorithms">Searching algorithms</h3><p>Search things in a list:</p><ul><li>if the list doesn't change frequently, better to sort first, then use binary-search everytime.</li></ul><h4 id="divide-and-conquer">Divide and conquer</h4><p>divide the problem into subproblems, solve them, merge them.</p><h3 id="sorting-algorithms">Sorting algorithms</h3><ul><li>in-place: Use a constant amount of memory. Everything can be in-place, except Mergesort.The in-place property is independent of loops/recursion stacks (in our class's definition)</li><li>stable: preserves the relative order of elements of the same value</li></ul><table><thead><tr class="header"><th>Sorting Algorithm</th><th>Average</th><th>Best</th><th>Worst</th><th>In-place</th><th>Stable</th></tr></thead><tbody><tr class="odd"><td>Bubblesort</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>Yes</td><td>Yes</td></tr><tr class="even"><td>Selection Sort</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>Yes</td><td><del>Yes</del> No</td></tr><tr class="odd"><td>Insertion Sort</td><td>O(n^2)</td><td>O(n) (nearly sorted)</td><td>O(n^2)</td><td></td><td></td></tr><tr class="even"><td>Mergesort</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>No</td><td>Yes</td></tr><tr class="odd"><td>Quicksort</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td><del>No</del> Yes</td><td>No</td></tr></tbody></table><table style="width:100%;"><colgroup><col style="width: 44%" /><col style="width: 6%" /><col style="width: 6%" /><col style="width: 6%" /><col style="width: 7%" /><col style="width: 16%" /><col style="width: 12%" /></colgroup><thead><tr class="header"><th>Algo/Input type</th><th>Random</th><th>Equal</th><th>Asending</th><th>Descending</th><th>Nearly Ascending</th><th>Nearly Descending</th></tr></thead><tbody><tr class="odd"><td>(Optimal) Bubble sort</td><td>O(N^2)</td><td>O(N)</td><td>O(N)</td><td>O(N^2)</td><td>O(kN) <em>but k not sig.</em></td><td>O(N^2)</td></tr><tr class="even"><td>(Min) Selection sort: <em>so poor, but you can find 3 smallest elems</em></td><td>O(N^2)</td><td>O(N^2)</td><td>O(N^2)</td><td>O(N^2)</td><td>O(N^2)</td><td>O(N^2)</td></tr><tr class="odd"><td>Insertion sort</td><td>O(N^2)</td><td>O(N)</td><td>O(N)</td><td>O(N^2)</td><td>O(N)</td><td>O(N^2)</td></tr><tr class="even"><td>Merge sort: <em>best!</em></td><td>O(N logN)</td><td>O(N logN)</td><td>O(N logN)</td><td>O(N logN)</td><td>O(N logN)</td><td>O(N logN)</td></tr></tbody></table><h6 id="mergesort">1. Mergesort</h6><ul><li><strong>about it's not in-place:</strong> it's not in-place, because need a new list when merging 2 lists.</li></ul><h6 id="quicksort">2. Quicksort</h6><ul><li><p><strong>about it's in-place</strong>: we do say quicksort is in-place, meaning it's space complexity is <span class="math inline">\(O(1)\)</span>, but we are talking about the space consumption in the <code>heap memory</code>. Considering extra memory consumption in the <code>stack memory</code>, we still need <span class="math inline">\(O(log n)\)</span> space, no matter for recursion one or iterative one.</p><blockquote><p>Yongqi's explanation:</p><p>Regarding the space complexity of quicksort, we said that it is in-place and therefore has O(1) space complexity. Strictly speaking, if we include the space required for stack frames for the recursive calls, we will need O(n) space in the worst case, and O(log n) space on the average case. However, because we have seen that in the worst case, we are basically doing bubble sort, then with some optimization we don't really need O(n) space, and the worst case space complexity would be O(log n). Furthermore, if we did quicksort iteratively, we would still need to maintain a stack data structure which would take up O(log n) space, and therefore it is correct to say that the space complexity of quicksort is O(log n). We said that it is O(1) space complexity, because we are pretending that stack frames take up 0 memory :P (or it is O(1) space complexity with respect to the heap memory).</p></blockquote></li><li><p>So I think it's ok to say it is 空间换时间</p></li></ul><h5 id="selection-sort">3. Selection sort</h5><ul><li><p><strong>about it's not stable:</strong> By definition, it will swap 2 elements, which causes unstable. However,</p><blockquote><p>Selection sort can be made Stable if instead of swapping, the minimum element is placed in its position without swapping i.e. by placing the number in its position by pushing every element one step forward. But we should also use linked list to implement the stable version, or the <code>insert</code> would be as slow as bubblesort</p></blockquote></li></ul><h5 id="bubble-sort">4. Bubble sort</h5><h4 id="not-comparing-sorting-algorithms">Not comparing Sorting Algorithms</h4><h5 id="counting-sort">1. counting sort</h5><p>适合：整数；很多的重复的同一种数，例如所有数都在0-100之间</p><p>缺点：额外空间</p><p>优点：O(n)</p><h5 id="heap-sort">5. Heap Sort</h5><p>Heapify: O(n)</p><p>top k elements: O(k logn) <em>(output sensitive)</em></p><ol type="1"><li>can stop at any time: extract the first k elements. When k &lt;&lt; n, this is very useful. O(n + k logn)</li><li>can be in-place: after extract the top element, put it at the last of the array.</li></ol><p>Heapsort is <strong>not cache friendly</strong>. Because the computer will predict that you'll read the array in sequence, so it will cache the following elems. Quicksort takes this advantage. Mergesort not.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Function Decorator, Map/Filter/Reduce in Python</title>
      <link href="/blog/Function-Decorator-Map-Filter-Reduce-in-Python/"/>
      <url>/blog/Function-Decorator-Map-Filter-Reduce-in-Python/</url>
      
        <content type="html"><![CDATA[<h2 id="function">Function</h2><h3 id="function-decorator">Function Decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">track</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the fn &#123;&#125; has x &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(fn, x))</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line"><span class="meta">@track</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>decorator equals to: <code>foo = track(foo)</code></p><h3 id="lambda">Lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">lambda</span>            x            :          f(g(x))</span><br><span class="line"><span class="string">&quot;A function that    takes x    and returns     f(g(x))&quot;</span></span><br></pre></td></tr></table></figure><h3 id="map">Map</h3><p>Map will apply the function on elements in the iterables one by one, and return a map object (iterable).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(func, *iterables)</span><br></pre></td></tr></table></figure><ul><li>how many parameters the func require, how many iterables there are.</li><li>whenever one iterable reaches its end, the map will stop without an error.</li><li>map will return a map object. use <code>list()</code> to convert it to a list.</li></ul><h3 id="filter">Filter</h3><p>Filter passes each element in the iterable to the function, and if the function returns True, the element will be returned.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span>(func, iterable)</span><br></pre></td></tr></table></figure><ul><li>the func should require one parameter, and return boolean type.</li><li>unlike map, only one iterable is supported.</li><li>if the func doesn't return a boolean type, the filter simply returns the iterable itself.</li><li>also use <code>list()</code> to convert the filter object to a list.</li></ul><h3 id="reduce">Reduce</h3><p>Reduce takes the 1st and 2nd elements in the iterable, put them into the func, and take the return of the func and the 3rd element in the iterable, put them into the func again...</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce(func, interable[, initial])</span><br></pre></td></tr></table></figure><ul><li>initial is literally an initial input into the func.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterable/Sequences in Python</title>
      <link href="/blog/Iterable-Sequences-in-Python/"/>
      <url>/blog/Iterable-Sequences-in-Python/</url>
      
        <content type="html"><![CDATA[<h1 id="iterablesequences">Iterable/Sequences</h1><p>Strings, ranges, lists and tuples.</p><blockquote><p>“An iterable which supports efficient element access using integer indices via the <code>__getitem__</code> special method and defines a <code>__len__</code> method that returns the length of the sequence.”</p></blockquote><ul><li><p>use one index to fetch item in a <strong>list</strong>, the index can't out of the range; but if use <strong>slice</strong> method, then you <strong>can do it out of the range</strong>, because the slice will autolly find the greediest indexs.</p></li><li><p>assigning a list to another list, like <code>a = b</code>, makes a and b refers to the same list. And a list is mutable. So if we change a, then b will also be affected. It's called <strong>alias</strong>. Do avoid this.</p></li><li><p><strong>Tuple</strong> also has order. Just it's immutable.</p></li><li><p>Fxxxk, Tuple and <strong>Set</strong> are different things! A set is like <code>&#123;1, 2, 3&#125;</code>, that is what I thought as not ordered and not duplicated. And a set has <code>intersection()</code> <code>union()</code> <code>difference()</code> <code>symmetric_difference()</code>.</p><p>To delete items in a set:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1.discard(<span class="number">6</span>) <span class="comment"># If the item doesn&#x27;t exist, no exception</span></span><br><span class="line">set1.remove(<span class="number">6</span>) <span class="comment"># Raise an exception if doesn&#x27;t exist</span></span><br><span class="line">set1.pop() <span class="comment"># randomly delete one item.</span></span><br></pre></td></tr></table></figure></li><li><p>you can insert an interable in a list's slice, though they have different length!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">3</span>] = [<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>list()</code> takes an iterable, and makes it a list;</p><p><code>str()</code> shows you the whole object's look.</p></li><li><p><code>range()</code> is also an iterable. It can be slicing, and len()</p></li><li><p><code>a, b = b, a</code>: the <code>b, a</code> on the right firstly is packed into tuple: <code>(b, a)</code>, then it is unpacked and individually assigned to each var on the left</p></li></ul><h2 id="sequence-operations">Sequence operations</h2><p>All: (list tuple str range)</p><figure><img src="https://i.loli.net/2021/10/25/m48Tpaile1CRPGO.png" alt="image-20210825165741137" /><figcaption>image-20210825165741137</figcaption></figure><figure><img src="https://i.loli.net/2021/10/25/QsPcdxuvBjZGDKF.png" alt="image-20210825165757277" /><figcaption>image-20210825165757277</figcaption></figure><p>Except range:</p><figure><img src="https://i.loli.net/2021/10/25/XqwiCoefWLb2Fjz.png" alt="image-20210825165814598" /><figcaption>image-20210825165814598</figcaption></figure><p>List:</p><figure><img src="https://i.loli.net/2021/10/25/fEFmnzPMvltLKwQ.png" alt="image-20210825165842016" /><figcaption>image-20210825165842016</figcaption></figure><h2 id="list">List</h2><p><code>l.extend()</code> treats the input as an iterable, and take each element of the iterable as a new element;</p><p><code>l.append()</code> treats the input as a new element.</p><p><code>l.pop()</code> Pop and return element of some index (if omitted, pop last element)</p><p><code>l.remove()</code> Remove first occurrence of element</p><p><strong>be careful which methods can cause runtime error</strong></p><p><strong>for-comprehension</strong>: <code>elem for var in interable if cond</code></p><p><code>all(&lt;iterable&gt;)</code>: whether all are true</p><p><code>any(&lt;interable&gt;)</code>: any true</p><h2 id="generator-expressions">Generator expressions</h2><blockquote><p>only retrieve elements when need</p></blockquote><h3 id="yield-expression">Yield expression</h3><p>Generator functions are written using the function* syntax. When called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a Generator. When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line"><span class="meta">... </span>   cur = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>       <span class="keyword">yield</span> cur</span><br><span class="line"><span class="meta">... </span>       cur += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = f()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">generator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(a)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> f():</span><br><span class="line"><span class="meta">... </span>   <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>###迭代器和生成器</p><ul><li>迭代器 an iterable，跟sequence不同的是它不能slicing，也不一定有len()，因为是可以无穷的。其定义就是一个实现了<code>__iter()__</code>和<code>__next()__</code>方法的对象。从道理上来讲是一个可以遍历sequence，并且记住遍历位置的对象。直到访问完所有元素，抛出一个<code>StopIteration</code>异常。</li><li>生成器 a generator：使用了<code>yield</code>的函数，必然返回一个迭代器。用起来和迭代器是一样的。<ul><li>至于<code>yield</code>的用法，在运行生成器的时候，其实也就是<code>next(&lt;generator&gt;)</code>的时候，函数会运行，直到遇到yield，就暂停并保存当前运行信息，返回yield的值；下一次运行时从当前位置继续</li></ul></li></ul><h2 id="dict-and-set">Dict and Set</h2><ul><li><p>Use short-circuit evaluation to fetch a key in a Dict, but if it doesn't exist, it will return a False, instead of raising an error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Toronto&#x27;</span> <span class="keyword">in</span> MLB_team <span class="keyword">and</span> MLB_team[<span class="string">&#x27;Toronto&#x27;</span>]</span><br><span class="line"><span class="comment"># if &#x27;Toronto&#x27; is in the list, =&gt; True and xxx, it will return the xxx;</span></span><br><span class="line"><span class="comment"># if it&#x27;s not in the list, =&gt; False and xxx, it will return False and skip running the xxx.</span></span><br></pre></td></tr></table></figure><p>But <code>d.get()</code> method is similar. It will give a <code>None</code> if the key doesn't exist.</p></li><li><p>set can only contains hashable items. <code>set</code> is unhashable. So a set can't be put into a set.</p></li><li><p>All mutable types are unhashable</p></li><li><p><code>set()</code> function picking up an iterable and use it one by one to create a set. so <code>set(&#123;1,2,3&#125;)</code> is ok.</p></li><li><p><code>frozenset</code> is immutable, so also hashable. so can be put into a set.</p></li></ul><h2 id="hash">hash</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1.0</span>])</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1 = <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n2 = <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(n1), <span class="built_in">id</span>(n2)</span><br><span class="line">(<span class="number">4318748880</span>, <span class="number">4318749104</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(n1), <span class="built_in">hash</span>(n2)</span><br><span class="line">(<span class="number">539300935830116283</span>, <span class="number">539300935830116283</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>Strange</strong>: Python's behavior is different in shell/script/ways:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1, n2 = <span class="number">1234e23</span>, <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(n1), <span class="built_in">id</span>(n2)</span><br><span class="line">(<span class="number">4317529008</span>, <span class="number">4317529008</span>)</span><br></pre></td></tr></table></figure><h3 id="hash-for-built-in-data-types">1. hash for built-in data types</h3><ul><li><p>For built-in immutable data types (i.e. <strong>float, str, int</strong>), <code>hash</code> uses their <strong>value</strong>, so, <code>x == y</code> =&gt; <code>hash(x) == hash(y)</code></p></li><li><p>For <strong>tuple</strong>, hash depends on its elements. So, some tuple are hashable, some are not. depends on whether members are all hashable:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1, t2 = (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, [<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(t1)</span><br><span class="line"><span class="number">7760687994730794974</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(t2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>hash is <code>None</code> for built-in mutable types (i.e. <strong>list, set, dict</strong>)</p></li></ul><h5 id="hash-for-user-defined-classes">2. hash for user defined classes</h5><ul><li>For user defined classes, by default：<ul><li><code>__hash__</code> and <code>__eq__</code> are based on <strong>id</strong> by default (but they can be overriden) (so, by default, <code>hash</code>, <code>==</code>(equal) and <code>is</code> are the same)</li><li>duplicate is defined as: <code>x == y</code> &lt;=&gt; <code>x is y and hash(x) == hash(y)</code></li><li>如果你改了<code>equal</code>的逻辑，那么就要把<code>hash</code>的逻辑也改了，否则就会变成<code>None</code></li></ul></li><li>说人话：<ul><li>默认来说，全都看id</li><li>如果光改了eq，那hash就成none了。想保留hash的话，要满足这个条件：只要ab全等，必须ab哈希值一样（不然你是魔鬼）</li></ul></li><li>哈希冲突 (collision): 不同的元素（<code>a == b： False</code>）经过哈希函数后发现哈希值一样（<code>hash(a) == hash(b)</code>）。是需要一些策略来进行处理，以确保把这些元素都储存下来的</li><li>重复（duplicate）：两个元素<strong>全等</strong>（而不是id一样！！！），hash得到的值又一样（<code>a == b and hash(a) == hash(b)</code>），自然认为是同一个元素，直接覆盖了</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weird things in Python</title>
      <link href="/blog/Weird-things-in-Python/"/>
      <url>/blog/Weird-things-in-Python/</url>
      
        <content type="html"><![CDATA[<h2 id="short-circuit">Short Circuit</h2><ul><li><code>a and b</code> evaluates to a if a is falsey, otherwise it evaluates to b</li><li><code>a or b</code> evaluates to a if a is truthy, otherwise it evaluates to b</li><li>not a evaluates to True if a is falsey, otherwise it evaluates to False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;Hello&#x27;</span> <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;y&#x27;</span> <span class="string">&#x27;y&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">23</span> <span class="keyword">or</span> <span class="literal">False</span> -<span class="number">23</span></span><br></pre></td></tr></table></figure><ul><li>True is represented as 1, and False is represented as 0.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> == <span class="number">1</span> </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> == <span class="number">0</span> </span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> == <span class="string">&#x27;&#x27;</span> </span><br><span class="line"><span class="literal">False</span> <span class="comment"># because False == 0, but 0 != &#x27;&#x27;, because &#x27;&#x27; == ord(&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="different-behavior-in-shellscript">Different Behavior in shell/script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1, n2 = <span class="number">1234e23</span>, <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(n1), <span class="built_in">id</span>(n2)</span><br><span class="line">(<span class="number">4317529008</span>, <span class="number">4317529008</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n1 = <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n2 = <span class="number">1234e23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(n1), <span class="built_in">id</span>(n2)</span><br><span class="line">(<span class="number">4318748880</span>, <span class="number">4318749104</span>)</span><br></pre></td></tr></table></figure><h2 id="the-one-line-if">The one line <code>if</code>:</h2><ol type="1"><li><p>don't have an else: <code>if True: print('xxx')</code></p></li><li><p>have an else and assign the value: <code>x = 1 if True else 0</code></p><p><strong>can't say <code>else x = 1</code>.</strong></p></li><li><p>have an else and don't wanna assign: dirty hack: ignore the returning value:</p><p><code>x = 1 if False else print(0)</code>, the print will return None to x.</p><p><code>print(1) if True else print(0)</code>, normally do.</p></li></ol><h2 id="ls-1-2-3-to-change-a-list-in-a-function"><code>ls[:] = [1, 2, 3]</code> To change a list in a function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeLS</span>(<span class="params">ls</span>):</span></span><br><span class="line">  ls[:] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">ls = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">changeLS(ls)</span><br><span class="line"><span class="built_in">print</span>(ls)</span><br><span class="line"><span class="comment"># ls = [1,2,3] then.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Type System of Scala: Covariant, Contravariant, and PECS Rule</title>
      <link href="/blog/Type-System-of-Scala-Covariant-Contravariant-and-PECS-Rule/"/>
      <url>/blog/Type-System-of-Scala-Covariant-Contravariant-and-PECS-Rule/</url>
      
        <content type="html"><![CDATA[<h1 id="type-system">Type System</h1><h2 id="what-are-types">What are types:</h2><ul><li>意义的逻辑含义</li><li>一个契约，要求所有成员有共同的特性</li><li>所有值、变量都有type</li><li>所有对象object都有type</li><li>所有class、trait都<strong>是</strong>type</li></ul><p><strong>value types &amp; reference types</strong></p><ul><li>有9种value types，它们不能为空：Byte Short Char Int Long Float Double Boolean Unit</li><li>其他都是reference types：objects functions 等等</li></ul><h3 id="type-hierarchies">Type Hierarchies</h3><figure><img src="https://i.loli.net/2021/10/25/WrhOGvbdoXtgJNi.png" alt="image-20211022140614737" /><figcaption>image-20211022140614737</figcaption></figure><h4 id="weak-conformance">WEAK CONFORMANCE</h4><figure><img src="https://i.loli.net/2021/10/25/qlE7RbaxHt6M2Qv.png" alt="image-20211022140142393" /><figcaption>image-20211022140142393</figcaption></figure><ul><li>和Java类似，前面type的都可以赋值转化成后面的type（typecast）</li><li>数、字符字面量，都可以赋值给 Byte Short and Char</li></ul><h4 id="subtype">Subtype</h4><ul><li><p>子类可以被当做父类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s: <span class="type">Student</span> = <span class="keyword">new</span> <span class="type">SmartStudent</span> <span class="comment">// 如此可以。s仍然是一个Student类，但它拥有SmartStudent的属性和方法</span></span><br></pre></td></tr></table></figure></li><li><p>S是T的子类，记作<span class="math inline">\(𝑆 &lt;∶ 𝑇\)</span>, 读作 S is a T and satisfies all properties that T does，so S can be treated as T</p></li></ul><p>可以把S赋值给T的三种情况：</p><ol type="1"><li>𝑆 primitive-widens to 𝑇 : <strong>widening</strong> is like Int converted to Double, is done implicitly</li><li>𝑆 primitive-narrows to 𝑇 : <strong>narrowing</strong> is like Double to Int, needs conversion</li><li>𝑆 &lt;∶ 𝑇</li></ol><h3 id="type-inference">Type Inference</h3><p>Type inference is a technique for determining the type of some entity without explicitly specifying it</p><p>谨慎使用🤔</p><h2 id="generics-parametric-polymorphism-variance"><strong>GENERICS, PARAMETRIC POLYMORPHISM &amp; VARIANCE</strong></h2><p>想要通用化一个程序，可能是需要它可以处理不同的类型的参数。那么就可以把参数类型也作为一个参数传入，就是<strong>type parameter</strong>。表示为：</p><p><code>[T]</code></p><p>这样就会遇到subtype定义的问题。==<strong>a box of T should be able to both store and produce a T.</strong>==</p><p>假如GummyBear是Sweet的子类，但下面这两个都是错的：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b: <span class="type">Box</span>[<span class="type">GummyBear</span>] = <span class="keyword">new</span> <span class="type">Box</span>[<span class="type">Sweet</span>](<span class="keyword">new</span> <span class="type">Sweet</span>) <span class="comment">// wrong</span></span><br><span class="line"><span class="comment">// 因为上述b需要可以 存 且 提供box中的类：</span></span><br><span class="line">b.value = <span class="keyword">new</span> <span class="type">GummyBear</span> <span class="comment">// ok</span></span><br><span class="line"><span class="keyword">val</span> a: <span class="type">GummyBear</span> = b.value <span class="comment">// not ok!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> b: <span class="type">Box</span>[<span class="type">Sweet</span>] = <span class="keyword">new</span> <span class="type">Box</span>[<span class="type">GummyBear</span>](<span class="keyword">new</span> <span class="type">GummyBear</span>) <span class="comment">// wrong</span></span><br><span class="line"><span class="comment">// 因为上述b需要可以 存 且 提供box中的类：</span></span><br><span class="line">b.value = <span class="keyword">new</span> <span class="type">Sweet</span> <span class="comment">// not ok!</span></span><br><span class="line"><span class="keyword">val</span> a: <span class="type">Sweet</span> = b.value <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h3 id="pecs-rule---producer-extends-consumer-super">PECS Rule - Producer: Extends; Consumer: Super</h3><ol type="1"><li><p>if you need a box that <strong>P</strong>roduces T, use a box of anything that <strong>E</strong>xtends T</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produceFromBox</span></span>(b: <span class="type">Box</span>[_ &lt;: <span class="type">Sweet</span>]): <span class="type">Sweet</span> = b.value</span><br></pre></td></tr></table></figure><p>covariant: <span class="math display">\[\frac{S &lt;: T}{C[S] &lt;: C[T]}\]</span></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>[+<span class="type">T</span>](<span class="params">val value: <span class="type">T</span></span>) <span class="comment">// make Box covariant in T</span></span></span><br><span class="line"><span class="keyword">val</span> b: <span class="type">Box</span>[<span class="type">Sweet</span>] = <span class="keyword">new</span> <span class="type">Box</span>[<span class="type">GummyBear</span>](<span class="keyword">new</span> <span class="type">GummyBear</span>) <span class="comment">// ok now</span></span><br></pre></td></tr></table></figure></li><li><p>if you need a box that <strong>C</strong>onsumes T, use a box of anything that is <strong>S</strong>uper of T</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">putInBox</span></span>(b: <span class="type">Box</span>[_ &gt;: <span class="type">GummyBear</span>], s: <span class="type">GummyBear</span>) = &#123; </span><br><span class="line">  b.value = s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contravariant: <span class="math display">\[\frac{S &lt;: T}{C[T] &lt;: C[S]}\]</span></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span>[-<span class="type">T</span>] </span>&#123; <span class="comment">// make Monster contravariant in T</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>(t: <span class="type">T</span>) = println(t) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> m: <span class="type">Monster</span>[<span class="type">GummyBear</span>] = <span class="keyword">new</span> <span class="type">Monster</span>[<span class="type">Sweet</span>] <span class="comment">// ok now</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="variance-of-function-types">VARIANCE OF FUNCTION TYPES</h4><p><span class="math display">\[\frac{I_2&lt;:I_1,R_2&lt;:R_1}{I_1=&gt;R_1&lt;:I_2=&gt;R_2}\]</span></p><p>for example, 一个function接收AnyRef，返回Subtring，那它就是这个function的子类：接收Sweet（&lt;: AnyRef），返回String(&gt;: Substring):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnyRef =&gt; Substring &lt;: Sweet =&gt; String</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modify Clustrmaps Widget for Hexo</title>
      <link href="/blog/Modify-Clustrmaps-Widget-for-Hexo/"/>
      <url>/blog/Modify-Clustrmaps-Widget-for-Hexo/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20211022172413814.png" alt="image-20211022172413814" /><figcaption>image-20211022172413814</figcaption></figure><p>The <a href="https://clustrmaps.com/site/1bklw?utm_source=globe">Clustrmaps widget</a> can show the visitors' map of my website. It is nice, but its 3D global version is buggy when put on the Hexo website. So I put its .js file locally, and modified several parts in it, to make it displayed normally on Hexo websites.</p><p>Maybe one day the .js file will be updated by Clustrmaps, and I'll need to revise it again. So I record what I did here.</p><ol type="1"><li><p>Download the js file, put it here:<code>/themes/next-new-version/source/js/clustrmaps.js</code>, then the script label in the <code>sidebar.swig</code> is change as: <code>&lt;script type=&quot;text/javascript&quot; id=&quot;clstr_globe&quot; src=&quot;/js/clustrmaps.js?d=gWCOZyJlHF_Sc1eqXROD53yLLxxfC2y7Ytvw9JUfmFg&quot;&gt;&lt;/script&gt;</code>. This way, I can modify codes in the .js file, or it would cause the following bugs.</p></li><li><p>The variable's name <code>velocity</code> is duplicated with that of Hexo😂😂. So I replaced all with <code>velocityD</code> in the .js file.</p></li><li><p>When the .js script is executed, the Hexo hasn't rendered the page yet, so the container of this widget still has width of 0. However, in the script, it fetches parent's width and sets it at that time! So it will disappear since its width is <code>0</code>😅. To fix that, I changed the 302 line as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pw = $(<span class="string">&quot;#clstr_globe&quot;</span>).parent().parent().parent().width();</span><br></pre></td></tr></table></figure><p>The parent of parent of parent of the script label has normal width... This is funny but useful...</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding Problem about Least Common Multiple and Greatest Common Divisor</title>
      <link href="/blog/LCM-GCD/"/>
      <url>/blog/LCM-GCD/</url>
      
        <content type="html"><![CDATA[<p>在复习期末考试，被计算最小公倍数的一道题卡了两次了……怪我数学基础忘光了。在此整理一下最小公倍数和最大公约数相关的概念和定理。然后整理一下这道题：</p><blockquote><p>Write a function to take in a tuple of integers, and it will return the smallest integer that is a multiple of every number in the tuple. Sample run:</p><p>&gt;&gt;&gt; print(smallestMultiple((2, 3, 5,)))</p><p>30</p><p>&gt;&gt;&gt; print(smallestMultiple((1, 2, 3, 4)))</p><p>12</p><p>&gt;&gt;&gt; print(smallestMultiple((399, 772, 163, 959, 242)))</p><p>832307365428</p></blockquote><h3 id="概念和定理">概念和定理</h3><p><strong>最大公约数</strong>：如果一个数可以分别被a和b整除，那它就是a和b的公约数。最大的那个就是最大公约数。</p><p><strong>最小公倍数</strong>：如果一个数既是a的整数倍，也是b的整数倍，那它就是a和b的公倍数。最小的那个就是最小公倍数。</p><p><a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95"><strong>辗转相除法</strong></a>：一个计算最大公约数的方法，如下：</p><blockquote><p>辗转相除法基于如下原理：两个整数的最大公约数等于其中较小的数和两数相除余数的最大公约数。例如，252和105的最大公约数是21（<span class="math inline">\({\displaystyle 252=21\times 12;105=21\times 5}\)</span> ）；因为 252 − 105 = 21 × (12 − 5) = 147 ，所以147和105的最大公约数也是21。在这个过程中，较大的数缩小了，所以继续进行同样的计算可以不断缩小这两个数直至余数为零。这时，所剩下的还没有变成零的数就是两数的最大公约数。</p></blockquote><p><strong>利用GCD直接计算LCM</strong>：任何两个整数的最大公约数与最小公倍数存在如下关系： <span class="math display">\[LCM(a, b) = |a * b| / GCD(a, b)\]</span></p><h3 id="题解">题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallestMultiple</span>(<span class="params">tp</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GCD</span>(<span class="params">a, b</span>):</span></span><br><span class="line">        <span class="keyword">while</span> b &gt; <span class="number">0</span>: <span class="comment"># need a&gt;b</span></span><br><span class="line">            a, b = b, a%b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tp:</span><br><span class="line">        a, b = <span class="built_in">max</span>(res, i), <span class="built_in">min</span>(res, i)</span><br><span class="line">        res = <span class="built_in">abs</span>(res * i) / GCD(a, b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(smallestMultiple((<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>,)))</span><br><span class="line"><span class="built_in">print</span>(smallestMultiple((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)))</span><br><span class="line"><span class="built_in">print</span>(smallestMultiple((<span class="number">399</span>, <span class="number">772</span>, <span class="number">163</span>, <span class="number">959</span>, <span class="number">242</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My ideal 5 years&#39; cognition plan</title>
      <link href="/blog/5-years-cognition-plan/"/>
      <url>/blog/5-years-cognition-plan/</url>
      
        <content type="html"><![CDATA[<p>My ideal 5 years' cognition plan🤔：</p><p>关于哲学/社会/权力/资本主义：黑格尔（《小逻辑》）→马克思（《资本论》）→韦伯（《新教伦理与资本主义精神》）→福柯（《规训与惩罚》）</p><p>关于文学/存在主义：加缪/海明威→陀思妥耶夫斯基→尼采/萨特</p><p>（关于精神分析：拉康/齐泽克）</p><p>（配合娱乐：《攻壳机动队》《麦田里的守望者》）</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> philosophy </tag>
            
            <tag> literature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十月随想</title>
      <link href="/blog/oct-2021/"/>
      <url>/blog/oct-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="关于生活">关于生活</h2><p>关于生活，值得一提的就是我在学着做菜了。可惜做菜是在异国他乡通过室友、女票、下厨房app、瞎折腾等渠道混合学习的，跟家乡的菜系一点都不搭边；在北京的7年生活里，我的口味本来就已经受到了学校食堂、外卖的影响，做菜风格再这样一混杂，我可就全然不是湖北人的胃了。有机会回家的时候还是要好好学学家里人做菜的。不过，几时才会回家呢？</p><p>我不再大费周章地在日记本上写日记，像初高中那样。因为写得再深刻、再动情，日后也懒得翻看啊……而且确实很费时间。我采用了一种新的形式，谓之 video diary （从某部恐怖片里学的方式……），暂时还挺有意思的。</p><p><img src="https://jyzhu.top/mydocs/pics/video-diary-screenshot.png" /></p><p>考了几门期中考试，平稳。我仍然没有很使劲，也没有很放松，就是那种三天打鱼两天晒网的，把懒惰当美德的，我这二十年来的生活方式罢。接下来算法与数据结构开课了，我打算认真对待之，为之后工作做准备吧，当然更是为我的计算机技术成长做准备。</p><p>另外，我爱上了 kaya 酱！</p><h2 id="关于认知">关于认知</h2><p>我列了一个 <a href="https://jyzhu.top/2021/10/13/5-years-cognition-plan/"><em>5 years' cognition plan</em></a>。一方面，我也不好意思说是 reading plan，毕竟已经好久没有捡起阅读习惯了，所以用 cognition plan 显得真诚一点。另一方面，这确实是我近来逐渐在形成的，关于形成一个完整的认知体系，所感兴趣的一些题材，主要包括哲学和社会学吧。</p><h2 id="关于网站">关于网站</h2><p>小破网站上个月就已经从阿里云服务器转移到GitHub上来。然而之前的备案信息是接入到阿里云的，自然是已经不合法了。我一直拖延没管，就等着哪天备案信息失效呢。这两天check邮箱，发现了关于备案信息的警告。时辰已到。好在最坏结果只是备案被撤销，国内没法再访问这个域名，我还害怕备案信息有误会受到处罚之类的呢，没有就好……</p><p>肉身翻墙以来，呼吸到了自由的互联网的空气，畅快得很。国内的网站备案实在是太麻烦、太吓人了。反正也没什么人看我的小破网站，暂时就无所谓了罢。</p><p>另外，之前在阿里云里办的免费SSL证书也过期了；但是不知道为什么，网站还能正常通过https访问。那就继续拖延吧🌚，问题不找上门，我也不找问题，哈哈哈哈。</p><p>（md，忽然发现了搜索功能在上次改网站背景图片的时候给改出bug了，透明度低到看不清，而且好像没法选中？下次再看看。）</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻壳机动队评论摘</title>
      <link href="/blog/SAC-GIG-repos/"/>
      <url>/blog/SAC-GIG-repos/</url>
      
        <content type="html"><![CDATA[<p>我摘了一些关于攻壳机动队tv版第二季的评论,对我挺有启发的.</p><p>对政治和社会的认识还不到看懂全剧的程度,过个几年会再二刷的.</p><span id="more"></span><blockquote><p>作者：_对他使用炎拳吧 https://www.bilibili.com/read/cv1606106 出处：bilibili</p><p>其实，对公安九课存在的意义，我始终有些迷茫，表面上看，作为一只政府暗地里的精锐力量，执行一些特殊任务。但仔细一想总觉得很多时候九课所做的事情没有太大意义（例如难民，他们只是阻止了伤亡情况最大的后果发生，却没为难民问题的解决做出任何贡献）。当然不是苛责九课，只是对本应代表“正义”的主角感到疑惑。而看完整部后，我心里有了个大致的答案。</p><p>一个社会，从不缺少革命的思想，但它们是对是错，能否可行，这在革命家眼里都是加了美化滤镜的。每到这时总是那些保守派，右派来多加掣肘。小时总是恨这些阴暗的老头，作为既得利益者，靠着手中的权利阻碍拥有伟大理想的年轻人带来革新。然而最近不知为何却对这种角色恨不起来，其心可诛，但他们往往避免了更大的灾难发生。仔细看看大多数的革命，大抵都是些“十万英里铁路”之类的东西。一个好右派若是能阻止这些的发生，他的功劳应当不比革命家低吧。</p><p>社会需要这样一个“边界”，正因为它的存在，才让社会更稳定，也让每一次的改变显得有意义。正如九课，他们正是“维持在当前社会现实下的社会正义”的人，会导致社会不安定的因素就消除掉，而若是久世英雄这样的人，九课也无法完全抵挡，而也只有这样的人带来的变革才有意义。</p></blockquote><blockquote><p>作者：不可视的右手 https://www.bilibili.com/read/cv2210313 出处：bilibili</p><p>我认为“饱食终日的我“其中的元素不是在衰退期间对政府的不满，而是全共斗时代的一点背景。人们觉得自己的权益受到了侵害，认为政府已经被一些人所控制，于是他们将问题归咎于政府的无能，事实上的确有问题，但是真相和他想象的完全不同。他们不满又无处发泄，只能幻想着通过这样那样的方式将自己以为的问题解决，所以才称之为可悲的无产阶级。</p></blockquote><blockquote><p>作者：我在骨头社教数数 https://www.bilibili.com/read/cv1606088 出处：bilibili</p><p>先聊一下马克思韦伯吧，百科有不多说，摘点理解剧情用的：他跟咱们政治书上的马克思一样伟大，社会学家，哲学家，政治经济学家，组织理论之父，社会学理论三大奠基人之一（首）。</p><p>我在gig里第一次意识到作者可能是读过马克思韦伯的理论著作，因为久世实在是个很典型的例子，不自觉的就想到他了。</p><p>接着是无罪，作者在片头和片尾强调了要理解凯撒不必成为凯撒，这句话被强调了，就引起了我的注意。</p><p>最后是sss，少佐给塔奇克马起名，马克思和武藏。看到这里就确定了，指的就是马克思韦伯。再回想一下，攻壳很多很多剧情都跟他的理论莫名合拍～作品的主旋律，个人与群体，宗教哲学，九科的组织制度。。。</p><p>比如，他说过，人是悬挂在自己编织的意义之网上的动物，拿来解释stand alone complex。。。emmm，似乎行得通哦～</p><p>所以，久世最后被CIA灭口了，那特工丢了句，贵国不需要无法控制的有魅力的领导者，只要顺从的消费者就够了。这就肯定了久世的价值，一个绝世稀有的，个人魅力型领袖。</p><p>马克思提出了三种权力支配理论，传统型、超凡魅力型、和合法合理性。结合美国大选，我简单解释一下，就是前几十个总统都是另外两种类型，互相都有血缘关系，皇帝轮流做，今儿个到我家。。。然后凭空窜出个商人特朗普光头。</p><p>个人魅力型领导者是一种很让统治阶级头疼的东西，几亿人里窜出一个，可以让几十亿人头疼。比如圣雄甘地，比如南丁格尔。。。甘地极大的推动了社会的发展，但是动了统治阶级的奶酪，直接丢了一个国家的统治权hhh。</p><p>久世也一样，难民接受了他的思想静坐迎接死亡，连生命都心甘情愿地放弃了，扭转了美国加大对日本的控制，破了合田和房长的卖国死局，令整个利益集团遭受了巨大的损失。</p><p>从一开始，作者就在塑造这个个人魅力型领导者。</p><p>难民时期，面对记者的冷嘲热讽，用枪换相机，崭露头角。接着，无论是在朝。鲜难民营还是在台湾难民区，久世都是人群的中心，被大家所拥护。即使他从未刻意招揽跟随者，即使他换脸如死宅换老婆频繁，即使从来没有一个固定的特征让别人记住他，一点儿存在的痕迹都没有，可他的拥护者还是越来越多。</p><p>最终，在他的影响下，全体难民接受久世的思想，坦然接受死亡。</p><p>画重点：在久世的倡导下，连。生。命。都。放。弃。了。</p><p>这是一个十分可怕的能力，绝对比久世手里的钚还恐怖。</p><p>他可以带领难民寻找到一个理想的出路，水往低处流，人心也往低处流，而久世就是那个可以使江河倒转，逆流而上的救世英雄。</p><p>而这，显然是某些集团不愿意看到的，他们目的是永远不解决难民问题，所以CIA不愿意日本有如此英雄，所以久世必须死。</p><p>至于合田嘛，他就是个久世的对比而已。</p><p>合田的名字拗口，偏僻，脸上刻意留下伤疤，他希望别人能记住他，见面一次终生难忘，他希望自己是人群的中央，希望自己是那个高高在上，主导水流方向的领导者。</p><p>而他，却屡屡被边缘化wwww</p><p>作者好恶趣味呦，对毁容宝宝好残忍，都毁容了还这么嘲讽他hhh</p><p>合田的目的一直是证明自己，博取关注，少数换多数的正义只是瞎掰的借口，不必当真，冷战是他实现目标的手段。而且性格很恶劣，每次都顾左右而言他，还嘲讽久世素子巴特处男，所以巴特很气。</p><p>但是运气好，跟期望加大军工一体化的房长目标一致。（房长的目的就是借难民问题，增加军费，然后跟一群统治阶级瓜分军费，三次元太多了不细说。）</p><p>最终合田为了证明自己的领导能力，出卖国家，勾结美国，草菅人命，可耻也可悲。</p><p>作者借巴特之口讲了对合田的评价：他始终是个二流选手。</p><p>大抵就是，这种人，人品太差，不可能成大器的。他的顺风局，很大程度上是因为背后有美国和日本全体高官的支持，跟没枪没炮存款都要自己造的久世完全相反的。</p><p>强调一下，合田也是有能力的，每一步都计划缜密，利用久世很漂亮，这里篇幅有限也是久世主场，关于他的手段的讲解也很多，我就不展开聊了。他的连环套冷战死局很棒的（这里感谢提醒，差点误导了）。</p><p>这就像学校里，有的人，成绩一般家境一般样貌一般，坐在教室里看书做题，他的身边也会围着一圈人在聊天疯玩，热热闹闹。</p><p>有的人，为了博眼球各种嘲讽恶作剧，演变成欺负人，最终也没人搭理他。( ｰ̀дｰ́ )而且他们还会专门挑前者报复下手，博取关注。</p><p>合田和久世就是如此对比。</p><p>但是久世太过于理想化了，他跟笑脸男一样，毫无保留的相信他人，然后钚被坑了，但因此塑造出一个也更加完美更加理想的大英雄。</p><p>如果说笑脸男是攻壳黑客技术天花板，那久世就是攻壳领导能力天花板。所以素子表达爱意也是正常，他太优秀了。</p><p>久世就像一个漩涡，靠近他的人都会被吸引。片尾素子接受了他的思想，模仿他，甚至模仿他脱离军队，离开了九科。并且素子本身也是一个漩涡，影响了她身边的所有人，九科全体都在慢慢变得像她。这也是凯撒那句话的意思。</p><p>本片新增另一个理想化的角色是女首相。城府极深，被当做傀儡推上首相位置。当初房长其实就是找个背锅侠，她却偷偷养了私人部队。而且，情况屡屡恶化，她也能持有这张底牌一直忍到翻盘时再打出来，太能沉得住气了，简直叹为观止。正直爱国颜值高，坚持在大国的夹缝中寻求日本独立。</p><p>作者也表示了这种人不可能有，那个卫星就足以表明态度：日本现状是历朝历代积累下来的，不是一朝一夕一个人可以左右的，这种人这种事不可能存在，也蛮可悲。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《攻壳机动队》第二季第2话 -- 饱食的我</title>
      <link href="/blog/SAC-GIG-EP2/"/>
      <url>/blog/SAC-GIG-EP2/</url>
      
        <content type="html"><![CDATA[<p>我最近在看《攻壳机动队》，这是一部赛博朋克动漫系列作品，探讨各种社会、政治、哲学话题。我今晚看了TV版第二季第2话“饱食的我”，是我认为最好的剧集之一。除了这集以外，第一季第13话也很精彩。</p><p>《攻壳》TV版的剧集一般都分主线剧集或独立故事剧集，主线之间穿插着独立的故事。第二季第2话就是一集独立故事，总时长也不到半小时，因此如果感兴趣不妨去看一看，b站上就有。<a href="https://www.bilibili.com/bangumi/play/ss1565?t=1348">《攻壳机动队》TV版第二季第2话</a></p><h2 id="梗概">梗概</h2><h3 id="正义的基诺">正义的基诺</h3><p>这一话有关一个参与过“第二次越南战争”的退伍军人基诺（Gino）。背景设定在未来，科技高度发达。由于战争的需要以及战后的损伤修复，这位退伍军人的全身受到了义体化改装（即把全身各种器官替换成电子器件），并被植入了电子脑。（电子脑可以连接网络，可以与他人连通，当然也可以被入侵。）</p><p>基诺退伍后，凭着优异的直升机驾驶技术，被某媒体集团会长（片仓）看中，聘为私人直升机驾驶员。但他一心憎恨虚伪的媒体，并一心想杀死这位会长。这出于他心中充满的正义的愤怒：战争是各个资本集团为了攫取利益展开的“实验场”，政府与资本勾结起来作恶，而媒体一边让民众相信自己是正义的，一边背地里与政府勾结，掩瞒真相，是真正的敌人。</p><p>他在脑海中幻想了无数次、无数场暴力场景：自己开枪射杀片仓会长，惩恶扬善、伸张正义。他还制定了一项名为“Reset The World”的秘密计划，定为25日，并为之不断健身、练习枪法，以在当天将真相昭告天下。他认为自己是唯一知道真相的人，并肩负着上天的使命：「必须尽快执行他（片仓会长）的死刑，<strong>这是上天赋予知道真相而且为了探求真相无畏死亡之人的使命。</strong>」</p><figure><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922011727551.png" alt="他将25日定为执行计划“Reset The World”的最终日期" /><figcaption>他将25日定为执行计划“Reset The World”的最终日期</figcaption></figure><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210923172223140.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922011817529.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922011831247.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922011844551.png" /></p><h3 id="真实的基诺">真实的基诺</h3><p>然而——<strong>上述一切都只是基诺脑海中妄想，他没有实现过哪怕一次“勇敢”的行为。</strong>从枪杀会长的幻想场景切回现实，他正在为会长驾驶私人直升机，因为分神造成了飞机颠簸。会长的保镖责骂，他用唯唯诺诺的语气道歉。“Reset The World”的25日到来当天，他的所作所为仅仅是跟管理者提出了请假，第二天又回来上班——驾驶直升机。就连他自诩是天选之人的自命不凡，都被一件小事无情揭穿：当他回来上班时，对直升机后座的会长谦卑道歉，表示昨天请假为老板带来了麻烦。会长说，还有这回事？</p><p>基诺偶遇过一个一见钟情的女性。他幻想着拿全部积蓄去“收买”这位女人，但画面切换，现实中的他只敢拿着钱去找妓女。当基诺与妓女共处一室，镜头暗示他因为战争失去了下体，故未遂。他曾经抱怨：「我被迫奔赴战场，谁都无法理解我在那里失去的东西有多巨大。」</p><p>最后一层反转到来。这位令他钟爱的女性，事实上是公安察觉到他的恐怖袭击计划后，派来调查他的警员（其实是《攻壳》的主角，但此处按住不表）。经过简单的电子脑入侵，警员简单地完成了调查，汇报结果：「他所描绘的暗杀计划完全只是妄想。他只是，对现实抱着一点希望和焦躁的不特定多数人中的一个，不会把计划付诸实施的。」</p><p>此外，公安调查表明，他失去下体与战争行动本身无关，而是在战争当地感染了一种恶性的性病。</p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922013157267.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922013329708.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922013221862.png" /></p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922013232961.png" /></p><p>这句话为本集结尾：</p><p><img src="https://www.comp.nus.edu.sg/~zhujiay/images/image-20210922013303359.png" /></p><h2 id="讨论">讨论</h2><h3 id="讽刺的是每一个人与真相的关系与普通的关系">1. 讽刺的是每一个人——与真相的关系，与普通的关系</h3><p>我认为这一集精彩，主要是因为它把讽刺性发挥到了极致——<strong>讽刺的就是每一个人</strong>，每一个普通人、无产阶级。简言之，它讽刺了普通人自以为多清醒其实对真相一概不知，自以为多英勇其实又只是完全的犬儒。能深刻揭露人性既是一种水平，何况又演绎得如此精彩。</p><p>作为被骂的普通人之一，也作为观剧的普通人之一，我的感想：虽然被骂了可是又觉得自己对世界更懂了呢（这里是在讽刺自己）。</p><h4 id="普通人与真相的关系">普通人与真相的关系</h4><p>剧中的基诺认为媒体所呈现给人的并不真实，而是由于利益勾结带来的谎言。他通过不断的思考与反思，得出了自认为的这个社会的真相。然而通过其他剧集的信息补充，或者仅凭观剧人自己的思考对其进行批判，不难发现其中许多不完备的逻辑、愚蠢的认知。例如他认为媒体是这个社会真正的敌人，而自己枪杀会长便可以把真相昭告天下。但这实则“无知到可悲”。认真举现实中的例子来类比也没意思，但确实与每个人身上所发生的、正在发生的太相似了。还是举个例子吧，新冠疫情以来，每个人都知道防疫政策、疫苗政策的背后有复杂的利益与博弈关系，但<strong>我们脑海中所认知的情况与真相相去多远呢</strong>？</p><p>另一方面，不仅是社会真相的呈现受到他人的干扰，有时候<strong>自己身上的真相也会受到自己的欺瞒</strong>。基诺拒不反思自身问题，将自己完全地放在战争受害者的位置，并把身体的残疾也归咎为战争的掠夺；但事实上，主体责任恐怕并不在战争上，而是他自己由于某些原因感染了恶性性病……正如我们也常常很难正视自己。</p><p>说起真相，也让我联想到拉康提出的精神分析理论：客观世界是每个人心中的幻境。我所了解浅薄，无意过多引申，只是觉得这集和这样的说法太过相似：基诺给自己的睿智、正义、勇敢的形象，对真实世界的所有认知，都建立在妄想的幻象之中。在他者看来，他只是一个唯唯诺诺（上司眼中）、畏畏缩缩（素子眼中）的人。可是换位思考，每个人对世界的认知，又何尝不是由自己脑海加工而成，何尝不包含自己的幻想？因此<strong>幻境即是每个人的真实</strong>。我以为，拉康这样的定义事实上解放了每个人的心灵，不必要求去触碰那个唯一的真相（因为无法触及），只要自己的幻境是健康的，对自己及他人的身心都是有益的，那么就活在里面，进而活出自己的意义（存在主义？）。</p><h4 id="普通人与普通的关系">普通人与普通的关系</h4><p>犬儒主义，追根溯源是一种古希腊哲学的流派。人们认为世道诸多不公，但自己却缺少与之抗衡的力量，因此采取的态度是逃避的、委曲求全的。扪心自问，我近来发现自己是一定程度上犬儒主义的，虽然对诸多不平不公有反对与愤怒，但却缺少抗衡的动力，这是因为对一切的态度都是<strong>不相信</strong>的，甚至不相信有一种办法能够改变我所不认同的处境。</p><p>我是切实地被这一集讽刺到了。基诺脑海中多次妄想的正义出头的场景又何尝不是我多次妄想过的；基诺每次回到现实中所表现的可憎的顺从又何尝不是我那可憎的顺从。<strong>「把对现有秩序的不满转化为一种不拒绝的理解，一种不反抗的清醒和一种不认同的接受」</strong>，仅此而已。这方面来说，得过且过、难得糊涂，不是普通人生存之道，而是犬儒。这样的知行不一，就是普通人的普通。我妄下断言：犬儒主义早就扎根在当下普通人的心中。（指我在此定义的这种犬儒主义，但我或许对这个流派本身理解有误。）</p><p>怀疑从来没有问题。我以为犬儒主义的反面是盲目信仰，二者皆不可取。要对抗犬儒主义，需要的大概是理性思考罢。</p><h3 id="战争的创伤">2. 战争的创伤</h3><p>我理解这集除了主要探讨上述的话题之外，既然选择了退役军人作为主角，那么附带地也是想探讨战争带给参与战争的人的创伤。剧中的人物设定显而易见是致敬了海明威的《太阳照常升起》，而战争带给迷惘的一代人的创伤也是这本书的主要话题之一。我在这里分析一些这方面话题，主要也是出于对这本书的敬意。</p><p>《太阳照常升起》中，主角是参与了二战后的美国退役士兵，他来到法国与西班牙，从事一些编辑与创作的工作。主角以及周围的人都是这个文艺创作圈子中的人，虽然在钱的方面不愁，但各个都在生活方面令人发愁。我是指，他们都过得太颓废了，除了喝酒与享乐，并没有生活的主旋律。这是海明威对二战后“迷惘的一代”的真实写照。一场战争改变了太多人的生活态度，他们的世界观被残酷地打碎，无法重建起生活的意义感。尽管迷惘，尽管糟糕，但他们没有真的被生活打败——这不是仍然在好端端地去感受一切吗。</p><p>“饱食的我”倒是没有完全令我想通。从剧集名着手，基诺是“吃饱了撑的”，在脑海中幻想了过多远远跟生活本身无关的事物，整个人脱离了生活，变得轻飘飘，但同时也怪异、格格不入。浅显的是，他所崇拜的那些暴力手段大概是跟参与过战争脱不了干系的。另一方面，他的身体所受的战争的创伤，同样浅显地体现在了全身的高度义体化——这同时意味着他失去了原本的肉身，连带着失去了进食、性的快感。所以人变得麻木，一切的普通的欲望变得虚假，失去了真实，人变得迷惘。这里造成迷惘的原因比《太阳照常升起》描述得更浅显具体。同时着力探讨的话题或许也在于迷惘而后的幻灭感：不相信，也就是犬儒，也就是不相信社会的公正但同时也不相信与不公抗衡的可能性。</p><h3 id="一些致敬与细节">3. 一些致敬与细节</h3><p>这一集有太多致敬的影子了：</p><ul><li>（据豆瓣）对《出租车司机》的再演绎</li><li>参加过战争然后落下了下半身残疾的病症这个设定，完全就是海明威《太阳照常升起》的设定</li><li>《麦田里的守望者》</li><li>少佐的搞笑发型我感觉是致敬的银翼杀手哈哈哈哈，那里面仿生人瑞秋就是这样的发型</li></ul><p>几个小细节：</p><ul><li>这集开头标题页英文背景里描述这集剧情梗概的时候，专门提到了他拿的枪是沙漠之鹰，我也不懂有没有深意</li><li>基诺作为义体人不用吃东西，但因为吃了东西，去厕所吐的时候，他的同事在隔间外面小便池尿尿，但其实也没有尿，可能也是和他一样「明明不用小便可是还是会有小便的欲望」；这或许是在暗示主角并非特殊的，只是普通人之一</li></ul><p>还有一个方面……实在是太可以把这集当作是在讽刺EVA的导演庵野秀明了哈哈哈哈哈哈，「自以为只有自己知道真实，并且觉得自己有把真实昭告天下的使命，所以画了个eva」；而且整集的调性也和EVA整体很相似。</p><h2 id="题外话">题外话</h2><p>影视、文学这类虚构作品的意义，在我看来并不仅仅是带给人超出现实生活的体验，而是可以借助一些架空的，从而更加凸显主题的世界观框架，来探讨具有现实意义的，但往往比较抽象的话题。具体来说，攻壳机动队利用一些比较简单的设定——未来、高度义体化、高度电子脑化、公安与犯罪——在其上设计一些合理发生的情节，来实现对科技、社会、政治、哲学话题的探讨。这就是我眼中科幻哲学作品的魅力与意义。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ghost In The Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shortcut Modification for Amethyst</title>
      <link href="/blog/Shortcut-Modification-for-Amethyst/"/>
      <url>/blog/Shortcut-Modification-for-Amethyst/</url>
      
        <content type="html"><![CDATA[<p>Today I installed a window layout manager on MacOS -- <a href="https://github.com/ianyh/Amethyst">Amethyst</a>. It allows to use shortcuts to swich windows into different layouts. Because I am using 2 monitors, and always work with lots of windows together, I really need one to smoothly set up the layouts.</p><p>In fact, I wanted an app to help me remember the layouts and automatically recover it at the beginning. And I've downloaded the <strong>Layouts</strong>. But I don't wanna learn to use 2 apps together. I hope I'll make use both of them one day.</p><h3 id="shortcuts-for-me">Shortcuts for me</h3><p>Here I comment on the default shortcuts. I myself has only 2 monitors, so I don't need some of the functions.</p><p>Amethyst uses two modifier combinations.</p><table><thead><tr class="header"><th>Default Shortcut</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1</code></td><td><code>option + shift</code></td></tr><tr class="even"><td><code>mod2</code></td><td><code>ctrl + option + shift</code></td></tr></tbody></table><table><colgroup><col style="width: 21%" /><col style="width: 78%" /></colgroup><thead><tr class="header"><th>Default Shortcut</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1 + space</code></td><td><del>Cycle layout forward</del></td></tr><tr class="even"><td><code>mod2 + space</code></td><td><del>Cycle layout backwards</del></td></tr><tr class="odd"><td><code>mod1 + h</code></td><td><strong>main pane缩小。</strong>Shrink the main pane</td></tr><tr class="even"><td><code>mod1 + l</code></td><td><strong>main pane扩大。</strong>Expand the main pane</td></tr><tr class="odd"><td><code>mod1 + ,</code></td><td><strong>main pane 增加数量</strong> Increase main pane count</td></tr><tr class="even"><td><code>mod1 + .</code></td><td><strong>main pane减少数量</strong> Decrease main pane count</td></tr><tr class="odd"><td><code>mod1 + j</code></td><td><strong>逆时针移动焦点。</strong>Move focus counter clockwise</td></tr><tr class="even"><td><code>mod1 + k</code></td><td><strong>顺时针移动焦点。</strong>Move focus clockwise</td></tr><tr class="odd"><td><code>mod1 + p</code></td><td><del>Move focus to counter clockwise screen</del></td></tr><tr class="even"><td><code>mod1 + n</code></td><td><del>Move focus to clockwise screen</del> no need coz I've only 2 screens</td></tr><tr class="odd"><td><code>mod2 + h</code></td><td><del>Swap focused window to counter clockwise screen</del></td></tr><tr class="even"><td><code>mod2 + l</code></td><td><del>Swap focused window to clockwise screen</del></td></tr><tr class="odd"><td><code>mod2 + j</code></td><td><strong>逆时针移动当前pane</strong> Swap focused window counter clockwise</td></tr><tr class="even"><td><code>mod2 + k</code></td><td><strong>顺时针移动当前pane</strong> Swap focused window clockwise</td></tr><tr class="odd"><td><code>mod1 + enter</code></td><td><strong>把当前pane作为main pane</strong> Swap focused window with main window</td></tr><tr class="even"><td><code>mod1 + z</code></td><td>？Force windows to be reevalulated</td></tr><tr class="odd"><td><code>mod2 + z</code></td><td>Relaunch Amethyst</td></tr><tr class="even"><td><code>mod2 + left</code></td><td><strong>把当前pane移到左边的桌面</strong> Throw focused window to space left</td></tr><tr class="odd"><td><code>mod2 + right</code></td><td><strong>把当前pane移到右边的桌面</strong> Throw focused window to space right</td></tr><tr class="even"><td><code>mod2 + 1</code></td><td><strong>把当前pane移到桌面1</strong> Throw focused window to space 1</td></tr><tr class="odd"><td><code>mod2 + 2</code></td><td><strong>移到桌面2</strong> Throw focused window to space 2</td></tr><tr class="even"><td><code>mod2 + 9</code></td><td><strong>移到桌面9</strong> Throw focused window to space 9</td></tr><tr class="odd"><td><code>mod2 + 0</code></td><td><strong>移到桌面10</strong> Throw focused window to space 10</td></tr><tr class="even"><td><code>mod1 + w</code></td><td><strong>聚焦显示屏1</strong> Focus Screen 1</td></tr><tr class="odd"><td><code>mod2 + w</code></td><td><strong>移动pane到显示屏1</strong> Throw focused window to screen 1</td></tr><tr class="even"><td><code>mod1 + e</code></td><td><strong>聚焦显示屏2</strong> Focus Screen 2</td></tr><tr class="odd"><td><code>mod2 + e</code></td><td><strong>移动pane到显示屏2</strong> Throw focused window to screen 2</td></tr><tr class="even"><td><code>mod1 + r</code></td><td><del>Focus Screen 3</del></td></tr><tr class="odd"><td><code>mod2 + r</code></td><td><del>Throw focused window to screen 3</del></td></tr><tr class="even"><td><del><code>mod1 + q</code></del></td><td><del>Focus Screen 4</del></td></tr><tr class="odd"><td><code>mod2 + q</code></td><td><del>Throw focused window to screen 4</del></td></tr><tr class="even"><td><del><code>mod1 + t</code></del> q</td><td><strong>float，暂时不要amethyst</strong> Toggle float for focused window</td></tr><tr class="odd"><td><code>mod1 + i</code></td><td><strong>显示当前布局</strong> Display current layout</td></tr><tr class="even"><td><code>mod2 + t</code></td><td>？Toggle global tiling</td></tr><tr class="odd"><td><del><code>mod1 + a</code></del> t</td><td><strong>tall layout</strong> Select tall layout</td></tr><tr class="even"><td><code>none</code></td><td>Select tall-right layout</td></tr><tr class="odd"><td><code>mod1 + s</code></td><td><del>Select wide layout</del> I don't need wide layout, ugly</td></tr><tr class="even"><td><code>none</code></td><td>Select middle-wide layout</td></tr><tr class="odd"><td><del><code>mod1 + d</code></del> f</td><td><strong>full screen</strong> Select fullscreen layout (rotate between each of the windows)</td></tr><tr class="even"><td><del><code>mod1 + f</code></del></td><td><del>Select column layout</del></td></tr><tr class="odd"><td><code>none</code></td><td>Select row layout</td></tr><tr class="even"><td><code>none</code></td><td>Select floating layout</td></tr><tr class="odd"><td><code>none</code></td><td>Select widescreen-tall layout</td></tr><tr class="even"><td><code>none</code></td><td>Select bsp layout</td></tr><tr class="odd"><td>Add: <code>mod1 + c</code></td><td><strong>3Column Right</strong></td></tr></tbody></table><h3 id="a-more-readable-version-of-my-shortcuts">A more readable version of My Shortcuts</h3><table><thead><tr class="header"><th>Modifier Combinations</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1</code></td><td><code>option + shift</code></td></tr><tr class="even"><td><code>mod2</code></td><td><code>ctrl + option + shift</code></td></tr></tbody></table><table><thead><tr class="header"><th>Move Focus</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1 + j</code></td><td><strong>逆时针</strong> Move focus counter clockwise</td></tr><tr class="even"><td><code>mod1 + k</code></td><td><strong>顺时针</strong> Move focus clockwise</td></tr><tr class="odd"><td><code>mod1 + w</code></td><td><strong>到显示屏1</strong> Focus Screen 1</td></tr><tr class="even"><td><code>mod1 + e</code></td><td><strong>到显示屏2</strong> Focus Screen 2</td></tr></tbody></table><table><thead><tr class="header"><th>Main Pane</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1 + h</code></td><td><strong>main pane缩小。</strong>Shrink the main pane</td></tr><tr class="even"><td><code>mod1 + l</code></td><td><strong>main pane扩大。</strong>Expand the main pane</td></tr><tr class="odd"><td><code>mod1 + ,</code></td><td><strong>main pane 增加数量</strong> Increase main pane count</td></tr><tr class="even"><td><code>mod1 + .</code></td><td><strong>main pane减少数量</strong> Decrease main pane count</td></tr></tbody></table><table><thead><tr class="header"><th>移动pane Move Focused Pane</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod2 + j</code></td><td><strong>逆时针</strong> Swap focused window counter clockwise</td></tr><tr class="even"><td><code>mod2 + k</code></td><td><strong>顺时针</strong> Swap focused window clockwise</td></tr><tr class="odd"><td><code>mod1 + enter</code></td><td><strong>作为main pane</strong> Swap focused window with main window</td></tr><tr class="even"><td><code>mod2 + left</code></td><td><strong>到左边的桌面</strong> Throw focused window to space left</td></tr><tr class="odd"><td><code>mod2 + right</code></td><td><strong>到右边的桌面</strong> Throw focused window to space right</td></tr><tr class="even"><td><code>mod2 + 1~0</code></td><td><strong>到桌面1~10</strong> Throw focused window to space 1-10</td></tr><tr class="odd"><td><code>mod2 + w</code></td><td><strong>到显示屏1</strong> Throw focused window to screen 1</td></tr><tr class="even"><td><code>mod2 + e</code></td><td><strong>到显示屏2</strong> Throw focused window to screen 2</td></tr></tbody></table><table><colgroup><col style="width: 14%" /><col style="width: 85%" /></colgroup><thead><tr class="header"><th>Layout</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod1 + i</code></td><td><strong>显示当前布局</strong> Display current layout</td></tr><tr class="even"><td><code>mod1 + q</code></td><td><strong>float，暂时不要amethyst</strong> Toggle float for focused window</td></tr><tr class="odd"><td><code>mod1 + f</code></td><td><strong>full screen</strong> Select fullscreen layout (rotate between each of the windows)</td></tr><tr class="even"><td><code>mod1 + t</code></td><td><strong>tall layout</strong> Select tall layout</td></tr><tr class="odd"><td><code>mod1 + c</code></td><td><strong>3Column Right</strong></td></tr></tbody></table><table><thead><tr class="header"><th>Other</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>mod2 + z</code></td><td>Relaunch Amethyst</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Everything I should know about Git</title>
      <link href="/blog/git-notebook/"/>
      <url>/blog/git-notebook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference:</p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰 - Git教程</a></p><p><a href="https://www.coursera.org/learn/server-side-nodejs/home/welcome">Coursera - Server-side Development with NodeJS, Express and MongoDB</a></p></blockquote><h2 id="git-diagram">0. Git Diagram</h2><p>工作区(Working Directory) <strong>--add--&gt;</strong> 暂存区(Staging area) <strong>--commit--&gt;</strong> Master</p><p>HEAD refers to master</p><h2 id="global-configuration-for-git">1. Global Configuration for Git</h2><ul><li>Check to make sure that Git is installed and available on the command line, by typing the following at the command prompt:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><ul><li>To configure your user name to be used by Git, type the following at the prompt:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure><ul><li>To configure your email to be used by Git, type the following at the prompt:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &lt;your email address&gt;</span><br></pre></td></tr></table></figure><ul><li>Check your default Git global configuration:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h2 id="start">2. Start</h2><ul><li>Initializes the current folder as a git repository, just go to the folder and type the following at the prompt:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>Now the folder will be mark as a master</p><ul><li>Current status of the foler:<ul><li>current branch</li><li>untracked files: files that are not been added to Git repository. Use <code>add</code> to add.</li><li>Changes not staged for commit: still use <code>add</code> to update</li><li>changes to be committed: files listed below are ready to be committed</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>See change details of a file:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li>Add files to staging area:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file(s)/folder(s)&gt;</span><br><span class="line">git add . <span class="comment"># the &quot;.&quot; means all files</span></span><br></pre></td></tr></table></figure><ul><li>After adding some files, you can commit the current state of the folder into Git repository:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line"><span class="comment"># use -m &lt;message&gt; to add message</span></span><br></pre></td></tr></table></figure><ul><li>Show the brief log of all the commits with messages</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><h2 id="checkoutresetrestore">3. Checkout/Reset/Restore</h2><ul><li>Discard changes of the last commit, and checkout the file from an older commit. <strong>last commit -&gt; any commit (staged)</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;commit&gt; &lt;file&gt;</span><br><span class="line"><span class="comment"># commit means commit id, using first several chars is ok</span></span><br></pre></td></tr></table></figure><p>The file changes will be automatically set into the staging area, all you need to do is submitting.</p><ul><li>Reset a file from staged to untracked: <strong>staged -&gt; untracked</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit [default=HEAD]&gt; &lt;file&gt;</span><br><span class="line">git reset &lt;commit-id-found-from-log&gt; <span class="comment"># use git log to find previous commit</span></span><br><span class="line">git reset HEAD^ <span class="comment"># previous version</span></span><br></pre></td></tr></table></figure><p>This command essentially has deeper meaning: You can return to past versions by config the <code>&lt;commit&gt;</code>.</p><p><code>HEAD</code>: current version; <code>HEAD^</code>: previous version; <code>HEAD^^</code>: previous previous version...;<code>HEAD-100</code>: 100 versions before</p><ul><li>Reset the staging area to untracked. (Just status, not actually discarding your changes on the files)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br></pre></td></tr></table></figure><ul><li>Discard changes of an untracked file: <strong>untracked -&gt; last commit</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;file&gt;</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><ul><li>Return to a future version? Still use commit id as reference in <code>git reset</code>. But how to know the commit id of a future version? Use <code>reflog</code> to see command history.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h3 id="说人话">说人话</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>或者<code>git restore &lt;file&gt;</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，用<code>git reset HEAD^</code>，不过前提是没有推送到远程库。</p><p>场景4：那已经推送到远程库了咋办呢？当然还是先在本地撤销到合适的历史版本（同场景3），然后再强制推送到远程库：<code>git push --force</code></p><h2 id="stash的简单使用">4. Stash的简单使用</h2><p>如果本地有更改，暂时不想commit；可是远程库又有了新的更新，需要同步过来。那就</p><ul><li>先用stash把本地更改暂存起来：<code>git stash</code></li><li>然后正常pull：<code>git pull</code></li><li>最后，把刚存起来的本地更改pop出来：<code>git stash pop</code></li></ul><p>如果有太多stash，想清空：<code>git stash clear</code></p><h2 id="github">Github</h2><h3 id="connect-with-your-github-account-using-ssh">0. Connect with your Github account using SSH</h3><h3 id="connect-with-a-remote-repo">1. Connect with a remote repo</h3><ul><li>Suppose you have a blank repo on Github, and an existing repo on your computer</li><li>Connect local repo with a remote one:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:username/repoName.git</span><br></pre></td></tr></table></figure><p><code>origin</code> is the default name of a remote repo.</p><ul><li>Push local repo to the remote one:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>command <code>-u</code> is for: Branch 'master' set up to track remote branch 'master' from 'origin'.</p><p>After the first push, you don't need the <code>-u</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><ul><li>Show info of remote repo:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><ul><li>Disconnect remote repo by name:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="clone-an-existing-remote-repo">2. Clone an existing remote repo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/repoName.git</span><br></pre></td></tr></table></figure><p>Instead of ssh, https is also available.</p><h2 id="branch">Branch</h2><ul><li>Create a new branch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>Switch to a branch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>Show branchs:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>Current bransh has a <code>*</code> ahead.</p><ul><li>Merge branch to current one:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>Delete a branch</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="solve-conflicts">Solve conflicts</h3><p>When you merge a branch to current branch, sometimes there are conflicts.</p><p>The conflicts will be directly showed in the files as:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">Creating a new branch is quick &amp; simple.</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">Creating a new branch is quick AND simple.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span><br></pre></td></tr></table></figure><ul><li>Just fix it manually, then <code>add</code>, then <code>commit</code>.</li><li>Show merge logs:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><h3 id="stash-to-save-current-work"><code>stash</code> to save current work</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="comment"># save the work</span></span><br><span class="line">git stash list <span class="comment"># list saved works</span></span><br><span class="line">git stash pop <span class="comment"># restore the saved works and delete the stash</span></span><br></pre></td></tr></table></figure><h3 id="cherry-pick-to-copy-a-specific-commit"><code>cherry-pick</code> to copy a specific commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit id&gt;</span><br></pre></td></tr></table></figure><h3 id="cooperation">Cooperation</h3><ul><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h2 id="tag">Tag</h2><p>Tag is a name that we give to a commit.</p><ul><li>Set a new tag to the newest commit:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;name&gt;</span><br><span class="line"><span class="comment"># add message:</span></span><br><span class="line">git tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span></span><br></pre></td></tr></table></figure><p>To a past commit?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;name&gt; &lt;commit id&gt;</span><br></pre></td></tr></table></figure><ul><li>List all tag:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>Show info of a tag:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tagname&gt;</span><br></pre></td></tr></table></figure><ul><li>Delete a tag:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notebook </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记在转变之即</title>
      <link href="/blog/me-changing/"/>
      <url>/blog/me-changing/</url>
      
        <content type="html"><![CDATA[<center><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=316938&amp;auto=1&amp;height=66"></iframe></center><p>最近总在担心我的网站哪天就没了。因为搭载网站的阿里云服务器不到一个月就要过期了。接下来的续租费用惊人，一年几千块钱，谁能承受得起？我还没有想好下一步网站要搭在哪里。悬而未决，很难呀。</p><p>难得来保持更新。先记录一下我的个人状况吧：本科毕业，美签被拒，Purdue CS PhD成为遗憾，转而来了新加坡，读NUS Master of Computing。我的人生目标也从「读博-科研-永葆好奇」迅而转为了「读硕-找工-好好生活」。既然如此，就为本科没选毕业设计而选了毕业论文而稍稍遗憾。另外，觉得我对AI的好奇在此受阻，software可能是最保险选择。如此这般，前功半弃，挑战重重。</p><p>这是我刚来新加坡的第三天。第一次出国，口语很烂，Singlish又比较难懂，生活好比踽踽独行。两位合租室友都已经开始工作，她们会做饭，我搭伙吃，故挑食的毛病并不敢声张，容易吃到不爱吃的东西，半饱不饱。这里的外卖配送费惊人，上喜茶看中了一杯豆乳波波，他妈的，加上配送费要80人民币。没舍得点。正式的学生签证还没下来，因之还没办信用卡，揣着值两千多块钱的现金，是我全身上下的积蓄。出门采购，艰难沟通，慢悠悠掏出来给钱，慢悠悠等着找钱。楼下的泳池令我觊觎万分，但是一来疫情期间不是很放心，二来我并不会游泳😅，遂三过泳池而不入，惜哉。</p><p>受的委屈也就这么点，但也让我时不时偷偷哭一下。只敢跟女票说，跟家人报喜不报忧。</p><p>我记日记的习惯已经完全丢了。与之相应的记录、梳理、反思的习惯也都丢了，怪可惜的，一直可惜着。对接下来的日子该怎么憧憬？挺憧憬的，自己也感觉到了，但是到底该怎样面对这些散漫、荒废、漫长但一去不复返的时光？</p><p>好好听课、100%热忱地编程，是必须的。为之做准备，我想添置一个向往已久的显示屏，这是我开学前最后一件待办事项。摆在卧室里，让我从拥挤的14寸屏幕上解脱，让我更全方位多角度地沉浸在代码中。想想真向往。</p><p>房租很贵。既然来了，是想要好好利用这独自一人畅游异国的时间。多游玩、多体验、多感受、多生活吧。大三大四梦魇一样的懒惰，请终止吧。既然把加缪的话奉为圭臬了，那就贯彻荒诞英雄的作风，把体验的量尽量填充满吧。</p><p>确乎，我的心态有了一个转变，我该总结之。本质上我理解不了「上进」这一概念，也不认同「努力」这一信仰。因为这太肤浅了，根本没看清荒诞、无意义的生活的本质。所以高中那会儿我求于道家老庄顺其自然的哲学，求于陶渊明归隐无求的作风。现在本质未变，但是有了存在哲学那一套观点，我就把「最大化生活体验」作为目的了。自己想来觉得挺自洽的🤔。</p><p>我心中的那个中心词，从「思考」过渡到了「理解」。尽量理解一切，就是于我的对生活体验的最大化。yeah... so, 记录、梳理、反思也该是相匹配的行动了。就在这里进行吧，我还是放弃公众号吧，那玩意太正式了，我发一遍总要鼓足勇气，我鼓不起。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“小有藏书”</title>
      <link href="/blog/%E5%B0%8F%E6%9C%89%E8%97%8F%E4%B9%A6/"/>
      <url>/blog/%E5%B0%8F%E6%9C%89%E8%97%8F%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>要出发去新加坡了。临行前啥也没收拾，就把一柜子书码整齐了…从来没抗拒过电子书，但很多书还是习惯读纸质的，莫名其妙买了一柜子书📖📖📖📖📖 达成自定义成就：「小有藏书」👏</p><figure><img src="https://jyzhu.top/mydocs/pics/IMG_26552.jpg" alt="shelf" /><figcaption>shelf</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>covid and my family</title>
      <link href="/blog/covid-and-my-family/"/>
      <url>/blog/covid-and-my-family/</url>
      
        <content type="html"><![CDATA[<p>今天外公出院了，搬到我们小区里，明天他就能见到我弟弟了。弟弟两个多月了，每天都很爱睡觉，也很爱笑。我带女朋友回家旅游，妈妈接我们的第一晚，轻松地跟我说，外公之前病得很重，武汉的医院只让火化，所以才接回恩施，可以入土。医院的医生都没想到，外公奇迹般地转好了，出院了，只要好好照顾，别感冒。外公的肺很衰弱了，妈妈说，这八成是新冠的后遗症。新冠爆发期间，外公外婆在武汉家中得了重感冒，封锁了多久，就双双卧床了多久。一年后带外公体检，查抗体才意外发现，两位老人属于感染新冠后已痊愈的状态。那真的是新冠。妈妈和舅舅错愣良久，没敢告诉他们。妈妈说，以外婆的性子，只会后怕。唉，妈妈说，新冠影响了我们家太多，我说大家都这样。唉，愿家人平安。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> family </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇论文发表了--Using machine learning to examine street green space types at a high spatial resolution- Application in Los Angeles County on socioeconomic disparities in exposure</title>
      <link href="/blog/%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%E4%BA%86/"/>
      <url>/blog/%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>Yi Sun, Xingzhi Wang, Jiayin Zhu, Liangjian Chen, Yuhang Jia, Jean M. Lawrence, Luo-hua Jiang, Xiaohui Xie, Jun Wu, Using machine learning to examine street green space types at a high spatial resolution: Application in Los Angeles County on socioeconomic disparities in exposure, Science of The Total Environment, Volume 787, 2021, 147653, ISSN 0048-9697, <a href="https://doi.org/10.1016/j.scitotenv.2021.147653" class="uri">https://doi.org/10.1016/j.scitotenv.2021.147653</a>. (<a href="https://www.sciencedirect.com/science/article/pii/S0048969721027248" class="uri">https://www.sciencedirect.com/science/article/pii/S0048969721027248</a>)</p><p><a href="https://jyzhu.top/mydocs/STOTEN-greenSpace-publication.pdf">PDF</a></p><h3 id="abstract">Abstract:</h3><p><strong>Background</strong> Compared to commonly-used green space indicators from downward-facing satellite imagery, street view-based green space may capture different types of green space and represent how environments are perceived and experienced by people on the ground, which is important to elucidate the underlying mechanisms linking green space and health. <strong>Objectives</strong> This study aimed to evaluate machine learning models that can classify the type of vegetation (i.e., tree, low-lying vegetation, grass) from street view images; and to investigate the associations between street green space and socioeconomic (SES) factors, in Los Angeles County, California. <strong>Methods</strong> SES variables were obtained from the CalEnviroScreen3.0 dataset. Microsoft Bing Maps images in conjunction with deep learning were used to measure total and types of street view green space, which were compared to normalized difference vegetation index (NDVI) as commonly-used satellite-based green space measure. Generalized linear mixed model was used to examine associations between green space and census tract SES, adjusting for population density and rural/urban status. <strong>Results</strong> The accuracy of the deep learning model was high with 92.5% mean intersection over union. NDVI were moderately correlated with total street view-based green space and tree, and weakly correlated with low-lying vegetation and grass. Total and three types of green space showed significant negative associations with neighborhood SES. The percentage of total green space decreased by 2.62 [95% confidence interval (CI): −3.02, −2.21, p &lt; 0.001] with each interquartile range increase in CalEnviroScreen3.0 score. Disadvantaged communities contained approximately 5% less average street green space than other communities. <strong>Conclusion</strong> Street view imagery coupled with deep learning approach can accurately and efficiently measure eye-level street green space and distinguish vegetation types. In Los Angeles County, disadvantaged communities had substantively less street green space. Governments and urban planners need to consider the type and visibility of street green space from pedestrian's perspective.</p><p>Keywords: Green space; Street view image; Machine learning; Socioeconomic status; Environmental health disparity</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas最基础的操作</title>
      <link href="/blog/pandas-notes/"/>
      <url>/blog/pandas-notes/</url>
      
        <content type="html"><![CDATA[<p>tmd，用惯了r，开始用Python pandas，每一步我都知道要干啥，就是不知道要怎么做，太烦了！！我来把最基础的操作系统学习一下，记在这里备忘：</p><h1 id="索引行列">-1. 索引行列</h1><p>直接用<code>loc</code>和<code>iloc</code>就好了：</p><ol type="1"><li>用行名、列名索引，就用<code>loc</code>；用行号、列号索引，就用<code>iloc</code></li><li>注意这个不是函数，是用<code>df.loc[]</code>，后面接方括号用的</li><li>方括号里面的东西就好说了<ol type="1"><li>用逗号<code>,</code>分隔不同的维度，比如2维表格就是<code>[行, 列]</code></li><li>用字符串表示行名列名，或者数字表示行号列号</li><li>用冒号<code>:</code>表示连续区间，比如<code>2:5</code>就是区间2、3、4；还可以单用冒号表示一整个维度全选</li><li>举例子，第二行第三列：<code>df.iloc[1, 2]</code>，第四列：<code>df.iloc[:, 3]</code>，行名为<code>name</code>的那一行：<code>df.loc['name', :]</code></li></ol></li></ol><h1 id="创建df">0. 创建df：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>), index=<span class="built_in">list</span>(<span class="string">&#x27;1234&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">    A   B   C   D</span><br><span class="line"><span class="number">1</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">3</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="number">4</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br></pre></td></tr></table></figure><h1 id="删除行列">1. 删除行列</h1><h2 id="drop删除行列">1.1. drop删除行列</h2><p><code>inplace=True</code> 表示就地修改，如果不设置，则会创建副本返回</p><p>通过行名删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df =df.drop([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>])      <span class="comment"># 不指定axis默认为0, 即“行”</span></span><br><span class="line">df.drop([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>], inplace=<span class="literal">True</span>) <span class="comment"># inplace=True 就地修改</span></span><br></pre></td></tr></table></figure><p>通过行号删除，传入参数是int、列表或切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.drop(df.index[<span class="number">0</span>], inplace=<span class="literal">True</span>)    <span class="comment"># 删除第1行</span></span><br><span class="line">df.drop(df.index[<span class="number">0</span>:<span class="number">3</span>], inplace=<span class="literal">True</span>)   <span class="comment"># 删除前3行</span></span><br><span class="line">df.drop(df.index[[<span class="number">0</span>, <span class="number">2</span>]], inplace=<span class="literal">True</span>) <span class="comment"># 删除第1第3行</span></span><br></pre></td></tr></table></figure><p>通过列名删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = df.drop([<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], axis=<span class="number">1</span>)               <span class="comment"># drop不会就地修改，创建副本返回</span></span><br><span class="line">df.drop([<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)      </span><br></pre></td></tr></table></figure><p>通过列号删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.drop(df.columns[<span class="number">0</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)       <span class="comment"># 删除第1列</span></span><br><span class="line">df.drop(df.columns[<span class="number">0</span>:<span class="number">3</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)     <span class="comment"># 删除前3列</span></span><br><span class="line">df.drop(df.columns[[<span class="number">0</span>, <span class="number">2</span>]], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 删除第1第3列</span></span><br></pre></td></tr></table></figure><h2 id="去重">1.2. 去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]=<span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">    A   B   C   D</span><br><span class="line"><span class="number">1</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">9</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">3</span>   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="number">4</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chooses = df[<span class="string">&#x27;B&#x27;</span>].drop_duplicates().index <span class="comment"># B列删除重复行后的索引</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[chooses] <span class="comment"># 删除B列重复的行</span></span><br><span class="line">    A   B   C   D</span><br><span class="line"><span class="number">1</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">9</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">4</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="del删除列">1.3. del删除列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">&#x27;A&#x27;</span>]  <span class="comment"># 删除A列，会就地修改</span></span><br></pre></td></tr></table></figure><h1 id="增加行">2. 增加行</h1><h2 id="loc-at-set_value">2.1. loc / at / set_value</h2><p>想增加一行，行名为'5'，内容为[16, 17, 18, 19]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">&#x27;5&#x27;</span>] = [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]    <span class="comment"># 后面的序列是Iterable就行</span></span><br><span class="line">df.at[<span class="string">&#x27;5&#x27;</span>] = [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br><span class="line">df.set_value(<span class="string">&#x27;5&#x27;</span>, df.columns, [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], takeable=<span class="literal">False</span>)    <span class="comment"># 过时</span></span><br></pre></td></tr></table></figure><h2 id="append">2.2. append</h2><p>添加有name的Series：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], index=df.columns, name=<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">df = df.append(s)</span><br></pre></td></tr></table></figure><p>添加没有name的Series，必须<strong>ignore_index</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], index=df.columns)</span><br><span class="line">df = df.append(s, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>可以 append字典列表，同样需要必须ignore_index：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = [&#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">17</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">19</span>&#125;, &#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">23</span>&#125;]</span><br><span class="line">df = df.append(ls, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="df.loc行号-xxx">2.3. df.loc[行号] = [x,x,x]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="built_in">len</span>(df)] = [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><p>len(df)生成的是最后一行行数，正好表示在最后一行增加。如果选择已经存在的行，会覆盖该行数据</p><h2 id="插入行">2.4. 插入行</h2><p>没有类似insert的方法，暂时替代方法可以先用reindex在行索引中增加一个索引，再给该索引对应的行赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = df.reindex(index=df.index.insert(<span class="number">2</span>, <span class="string">&#x27;5&#x27;</span>))</span><br><span class="line">df.loc[<span class="string">&#x27;5&#x27;</span>] = [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h1 id="增加列">3. 增加列</h1><p>序列s = 列A+列C的5种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = [a + c <span class="keyword">for</span> a, c <span class="keyword">in</span> <span class="built_in">zip</span>(df[<span class="string">&#x27;A&#x27;</span>], df[<span class="string">&#x27;C&#x27;</span>])]          </span><br><span class="line">s = [row[<span class="string">&#x27;A&#x27;</span>] + row[<span class="string">&#x27;C&#x27;</span>] <span class="keyword">for</span> i, row <span class="keyword">in</span> df.iterrows()]  <span class="comment"># 通过iterrows()获取序列，s为list</span></span><br><span class="line">s = df.apply(<span class="keyword">lambda</span> row: row[<span class="string">&#x27;A&#x27;</span>] + row[<span class="string">&#x27;C&#x27;</span>], axis=<span class="number">1</span>)  <span class="comment"># 通过apply获取序列，s为Series</span></span><br><span class="line">s = df[<span class="string">&#x27;A&#x27;</span>] + df[<span class="string">&#x27;C&#x27;</span>]                                  <span class="comment"># 通过Series矢量相加获取序列</span></span><br><span class="line">s = df[<span class="string">&#x27;A&#x27;</span>].values + df[<span class="string">&#x27;C&#x27;</span>].values                    <span class="comment"># 通过Numpy矢量相加获取序列</span></span><br></pre></td></tr></table></figure><h2 id="df或者df.loc">3.1. df[]或者df.loc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.loc[:, <span class="string">&#x27;E&#x27;</span>] = s</span><br><span class="line">df[<span class="string">&#x27;E&#x27;</span>] = s</span><br></pre></td></tr></table></figure><h2 id="df.insert">3.2. df.insert()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.insert(<span class="number">0</span>, <span class="string">&#x27;E&#x27;</span>, s) </span><br></pre></td></tr></table></figure><h2 id="pd.concat">3.3. pd.concat()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>], name=<span class="string">&#x27;E&#x27;</span>, index=df.index)</span><br><span class="line">df = pd.concat([df, s], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="iloc和loc遍历过程中给列赋值">3.4. iloc和loc遍历过程中给列赋值</h2><p><strong>效率比较低</strong></p><p>df['E']是DataFrame的一个Series，是引用，对其修改也能改变DataFrame，但运行时报了Warning</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;E&#x27;</span>] = <span class="literal">None</span>  <span class="comment"># 需事先创建e列，否则iloc遍历会报错，loc遍历无需事先创建</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    df[<span class="string">&#x27;E&#x27;</span>].iloc[i] = df[<span class="string">&#x27;A&#x27;</span>].iloc[i] + df[<span class="string">&#x27;C&#x27;</span>].iloc[i] </span><br><span class="line"><span class="comment"># SettingWithCopyWarning:　A value is trying to be set on a copy of a slice from a DataFrame</span></span><br></pre></td></tr></table></figure><p>不用Series不会报Warning：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;E&#x27;</span>] = <span class="literal">None</span></span><br><span class="line">col_no = [i <span class="keyword">for</span> i <span class="keyword">in</span> df.columns].index(<span class="string">&#x27;E&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    df.iloc[i, col_no] = df[<span class="string">&#x27;A&#x27;</span>].iloc[i] + df[<span class="string">&#x27;C&#x27;</span>].iloc[i]</span><br></pre></td></tr></table></figure><p>用loc无需先给E列赋空值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index:</span><br><span class="line">    df.loc[i, <span class="string">&#x27;E&#x27;</span>] = df.loc[i, <span class="string">&#x27;A&#x27;</span>] + df.loc[i, <span class="string">&#x27;C&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="df列号-xxx">3.5. df[列号] = [x,x,x]</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="built_in">len</span>(df)] = [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h2 id="其他方法">3.6. 其他方法</h2><p>增加3列，EFG，value默认为np.NaN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.concat([df, pd.DataFrame(columns=<span class="built_in">list</span>(<span class="string">&#x27;EFG&#x27;</span>))])   <span class="comment"># 列的次序无法指定，并且fillna时会对整个df做出调整</span></span><br><span class="line">df = df.reindex(columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCDEFG&#x27;</span>),  fill_value=<span class="number">0</span>)   <span class="comment"># 列的次序按照list指定，并且fill_value只对新增列做出调整，推荐！</span></span><br></pre></td></tr></table></figure><h1 id="修改行列">4. 修改行列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># loc和iloc 可以更换单行、单列、多行、多列的值</span></span><br><span class="line">df1.loc[<span class="number">0</span>,<span class="string">&#x27;age&#x27;</span>]=<span class="number">25</span>      <span class="comment"># 思路：先用loc找到要更改的值，再用赋值（=）的方法实现更换值</span></span><br><span class="line">df1.iloc[<span class="number">0</span>,<span class="number">2</span>]=<span class="number">25</span>         <span class="comment"># iloc：用索引位置来查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># at 、iat只能更换单个值</span></span><br><span class="line">df1.at[<span class="number">0</span>,<span class="string">&#x27;age&#x27;</span>]=<span class="number">25</span>      <span class="comment"># iat 用来取某个单值,参数只能用数字索引</span></span><br><span class="line">df1.iat[<span class="number">0</span>,<span class="number">2</span>]=<span class="number">25</span>         <span class="comment"># at 用来取某个单值,参数只能用index和columns索引名称</span></span><br></pre></td></tr></table></figure><h1 id="dataframe拼接">5. dataFrame拼接</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.concat([data1, data2], axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>第一个参数放入的是我们要拼接的数据，记住当有多组数据时，必须要用[]括起来，让其变为一个整体（因为这个参数只占一个位置，不加会抛出错误）</p><p>axis参数：用来设置拼接方式（0-从下方纵向增加记录；1-从右侧增加字段），其中axis=0为默认值</p><h1 id="改列名">6. 改列名</h1><p>1、修改列名a，b为A、B。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure><p>2、只修改列名a为A</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020随想</title>
      <link href="/blog/2020%E9%9A%8F%E6%83%B3/"/>
      <url>/blog/2020%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>在这个目的、功利、简历至上的时代（这无可指摘），我所信奉的一种生活方式（懒惰主义/浪漫主义）是：在某些上不了台面/不足为外人道的兴致上持续投入精力。例如在自己建的小破网站写狗屁诗，读对本专业毫无用处的书，喝酒，玩单机游戏，等等。</p><p>2020.10.19</p><hr /><p>做人好难，人真的有连贯性和完整性吗，午睡前后心态会有重大变化，在客厅里和在卧室里觉得人生目标都不一样，支离破碎的一个人怎样勠力同心？</p><p>2021.1.28</p><hr /><p>过去我对生活的思考，似乎陷入「应然」的逻辑陷阱。平凡与不平凡应该追求哪个？深远的理想和肤浅的快乐应该追求哪个？物质和精神应该追求哪个？可是这些问题没有真正合乎理性的答案，因为人生是偶然的，生命是无意义的。倒是换个角度，恰好是从「实然」出发，生活实际过成什么样的，也就<em>应该</em>是什么样的。每一次做出行动的时候，背后并没有真正的理性来赋予它意义，倒不如说行动本身就是意义。所有的人生都是平等的，跟巨大的荒谬对抗而已。这样说还是太抽象，像是把加缪说的话汉译英再英译汉。最后试着举个例子，这个道理下，爱的本质就是，你要怎样，我们就怎样。</p><p>2021.2.17</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Little Django Notes</title>
      <link href="/blog/A-Little-Django-Notes/"/>
      <url>/blog/A-Little-Django-Notes/</url>
      
        <content type="html"><![CDATA[<p>Well!!!! I had thought my website was closed down and had no energy to recover it. But now I find it still accessible from a network outside CN. It's banned just because... I hadn't set up the website Bei'an asked by CN gov on time. I'm just lazy and busy.</p><p>So, now, I can still post something.</p><hr /><h2 id="start">Start</h2><p>setup:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject HelloWorld</span><br></pre></td></tr></table></figure><p>runserver:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><h2 id="结构">结构</h2><p><code>views.py</code> 视图：把变量传给网页模板</p><p><code>urls.py</code> 路由：指定url地址对应的view</p><p><code>templates/xxx.html</code> 模板：静态的网页模板，其中留一些变量空</p><h3 id="e.g.">e.g.</h3><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;he.html&#x27;</span>, &#123;<span class="string">&#x27;viewName&#x27;</span>: name&#125;) <span class="comment"># 把name传给了he.html模板</span></span><br></pre></td></tr></table></figure><p><code>urls.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">&#x27;hello/&#x27;</span>, views.re), <span class="comment"># 指定了views里的re，用/hello/</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>templates/he.html</code>:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;viewName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> // 变量</span></span><br></pre></td></tr></table></figure><h2 id="模板中的语法">模板中的语法</h2><p>基本：<code>&#123;&#123;变量名&#125;&#125;</code></p><h3 id="变量名的具体操作">变量名的具体操作</h3><ol type="1"><li>列表：可以用 <strong>.</strong> 索引下标取出对应的元素：<code>&lt;p&gt;&#123;&#123; views_list.0 &#125;&#125;&lt;/p&gt;</code></li><li>字典：可以用 <strong>.键</strong> 取出对应的值：<code>&lt;p&gt;&#123;&#123; views_dict.name &#125;&#125;&lt;/p&gt;</code></li><li>过滤器：<code>&#123;&#123; 变量名 | 过滤器：可选参数 &#125;&#125;</code><ol type="1"><li>小写：<code>&#123;&#123; name|lower &#125;&#125;</code></li><li>首字母大写：<code>&#123;&#123; my_list|first|upper &#125;&#125;</code></li><li>截取：<code>&#123;&#123; bio|truncatewords:"30" &#125;&#125;</code>；truncatechars</li><li>addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面。</li><li>date : 按指定的格式字符串参数格式化 date 或者 datetime 对象：<code>&#123;&#123; pub_date|date:"F j, Y" &#125;&#125;</code></li><li>length : 返回变量的长度</li><li>如果views传来的参数是false，则采用默认值：<code>&#123;&#123; name|default:"菜鸟教程666" &#125;&#125;</code></li><li>filesizeformat：文件大小</li><li>safe：不需要转义</li><li>自定义过滤器</li></ol></li></ol><h3 id="语法">语法</h3><h4 id="if...elif...else">if...elif...else</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> condition1 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   ... display 1</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span> condition2 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   ... display 2</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   ... display 3</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="comment">&#123;# 这是一个注释 #&#125;</span></span><br></pre></td></tr></table></figure><p><code>&#123;% if %&#125;</code>标签接受 and ， or 或者 not 关键字来对多个变量做判断 ，或者对变量取反（ not )</p><h4 id="ifequalifnotequal">ifequal/ifnotequal</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">ifequal</span></span> a b %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Site News<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>No News Here<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endifequal</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h4 id="for...in...">for...in...</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> athlete <span class="keyword">in</span> athlete_list reversed %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; athlete.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">empty</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    如果循环为空则执行</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>给标签增加一个 reversed 使得该列表被反向迭代</p><p><strong>遍历字典</strong>: 可以直接用字典 <strong>.items</strong> 方法，用变量的解包分别获取键和值</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> i,j <span class="keyword">in</span> views_dict.items %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; i &#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123; j &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>在 <code>&#123;% for %&#125;</code> 标签里可以通过<code>&#123;&#123;forloop&#125;&#125;</code>变量获取循环序号。</p><ul><li>forloop.counter: 顺序获取循环序号，从 1 开始计算</li><li>forloop.counter0: 顺序获取循环序号，从 0 开始计算</li><li>forloop.revcounter: 倒叙获取循环序号，结尾序号为 1</li><li>forloop.revcounter0: 倒叙获取循环序号，结尾序号为 0</li><li>forloop.first（一般配合if标签使用）: 第一条数据返回 True，其他数据返回 False</li><li>forloop.last（一般配合if标签使用）: 最后一条数据返回 True，其他数据返回 False</li></ul><h4 id="嵌套其他模板">嵌套其他模板</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &quot;nav.html&quot; %&#125;</span></span><br></pre></td></tr></table></figure><h4 id="csrf_token">csrf_token</h4><p>csrf_token 用于form表单中，作用是跨站请求伪造保护。</p><p>如果不用<code>｛% csrf_token %｝</code>标签，在用 form 表单时，要再次跳转页面会报403权限错误。</p><p>用了<code>｛% csrf_token %｝</code>标签，在 form 表单提交数据时，才会成功。</p><h2 id="静态文件">静态文件</h2><p>1、在项目根目录下创建 statics 目录。</p><p>2、在 settings 文件的最下方配置添加以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27; # 别名 </span><br><span class="line">STATICFILES_DIRS = [ </span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;statics&quot;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3、在 statics 目录下创建 css 目录，js 目录，images 目录，plugins 目录， 分别放 css文件，js文件，图片，插件。</p><p>4、把 bootstrap 框架放入插件目录 plugins。</p><p>5、在 HTML 文件的 head 标签中引入 bootstrap。</p><p><strong>注意：</strong>此时引用路径中的要用配置文件中的别名 static，而不是目录 statics。</p><p>在模板中使用需要加入 <code>&#123;% load static %&#125;</code> 代码，以下实例我们从静态目录中引入图片。</p><p><code>views.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runoob</span>(<span class="params">request</span>):</span></span><br><span class="line">    name =<span class="string">&quot;菜鸟教程&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;runoob.html&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>: name&#125;)</span><br></pre></td></tr></table></figure><p><code>templates/runoob.html</code>:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> &quot;images/runoob-logo.png&quot; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;runoob-logo&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模板继承">模板继承</h2><h3 id="父模板">父模板</h3><p>标签block 是预留区域，给子模板填充差异性的内容，不同预留区域名字不能相同</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> 名称 %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">预留给子模板的区域，可以设置默认内容</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="子模板">子模板</h3><p>使用标签 extends 继承父模板：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &quot;父模板路径&quot;%&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="comment">&#123;# 设置预留区域内容 #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> 名称 %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">内容 </span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> 名称 %&#125;</span></span><br></pre></td></tr></table></figure><h2 id="视图层的函数">视图层的函数</h2><h3 id="输入request">输入：Request</h3><p>常用的 request 属性：</p><ol type="1"><li><code>GET</code>`POST`</li><li><code>body</code></li><li><code>path</code> url中的路径部分</li><li><code>method</code> 获取当前请求的方式，数据类型是字符串，且结果为大写</li></ol><h4 id="输入的其他形参">输入的其他形参</h4><p>就是url路径里后面的层，一层是一个形参</p><h3 id="输出">输出：</h3><p>三种：HttpResponse()、render()、redirect()</p><ol type="1"><li><strong>HttpResponse():</strong> 返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有 html 标签，也可以渲染</li><li><strong>render():</strong> 返回文本，第一个参数为<code>request</code>，第二个参数为<code>'页面名'</code>，第三个参数为字典<code>['页面参数名' : views参数名]</code></li><li><strong>redirect()</strong>：重定向，跳转新页面。参数为<code>'页面路径'</code>。一般用于 form 表单提交后，跳转到新页面。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Found an amazing App - Sonic-Pi, for coding the music</title>
      <link href="/blog/Found-an-amazing-App-Sonic-Pi-for-coding-the-music/"/>
      <url>/blog/Found-an-amazing-App-Sonic-Pi-for-coding-the-music/</url>
      
        <content type="html"><![CDATA[<p>I found an amazing software named sonic-pi.</p><p>You code the music.</p><p>You can write codes with loops, controlling sound effects with synthesizers.</p><p>And you can edit your codes while playing the music to control it, making you like a DJ!</p><p>It's an App on github open-sourced by the company of Raspberry Pi: <a href="https://github.com/sonic-pi-net/sonic-pi">Sonic Pi</a></p><figure><img src="https://jyzhu.top/mydocs/pics/105231607690070_.pic_hd.jpg" alt="105231607690070_.pic_hd" /><figcaption>105231607690070_.pic_hd</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据分析知识补充：Hadoop、YARN、Spark、Hive</title>
      <link href="/blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85%EF%BC%9AHadoop%E3%80%81YARN%E3%80%81Spark%E3%80%81Hive/"/>
      <url>/blog/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85%EF%BC%9AHadoop%E3%80%81YARN%E3%80%81Spark%E3%80%81Hive/</url>
      
        <content type="html"><![CDATA[<h2 id="hadoop">Hadoop</h2><h3 id="概念"><a href="https://blog.csdn.net/houbin0912/article/details/72967178">概念</a></h3><p>HDFS文件系统+MapReduce数据处理</p><p>假如有1T的数据，我想一行一行正则过滤出想要的内容。就需要</p><ol type="1"><li>把数据导入HDFS</li><li>定义map方式，也就是把key设置成行数，把value设置为每行内容</li><li>定义reduce：通过正则方式进行匹配，正确的内容通过reduce聚合起来返回</li></ol><p>那么Hadoop就会把这个工作自动分配给你已有的n个计算结点去完成</p><p><strong>YARN</strong>是MapReduce团队对原本框架的重构，可以理解成MapReduce v2</p><p><strong>Spark</strong>是微软在Hadoop基础上改的，主要是解决了多余的中间结果读写问题，而是用cache来存（貌似？）；并且还可以同时包含多个map和reduce。spark用起来比mr方便点</p><p>另外spark适用于实时计算，但是Hadoop不大适合，适合离线计算；这肯定也是因为那个鸡肋的中间结果读写</p><p><strong>Hive</strong>是包在Hadoop外面的壳，Facebook搞的，把MapReduce程序包装成了类SQL，可能不会代码的人用起来方便点吧</p><h3 id="hdfs基本原理"><a href="https://segmentfault.com/a/1190000011575458">HDFS基本原理</a></h3><p>原理简单但是……估计操作更简单？</p><figure><img src="https://image-static.segmentfault.com/933/562/933562272-59e41fa4740d8_articlex" alt="struc" /><figcaption>struc</figcaption></figure><p>结构：</p><ol type="1"><li>nameNode负责维护数据block对应的dataNote映射信息</li><li>DataNode当然就存具体block了</li></ol><p>形式：</p><ol type="1"><li>一个block存在3个区域中，这3个区域还要分布在2个主机上，防止数据挂掉（不知道这数据是默认的还是？）</li><li>原始的数据是会被分成小的block的。比如一个100m的数据可能被分成66m的block1和36m的block2</li><li>block被写入HDFS的时候，是流式的，即一个block被分为更小的块，第一块写进host1，然后host1把它写给host2，这时候第二块又写进host1，同时host2写完了再把刚刚的第一块写给host3……</li></ol><h3 id="mapreduce基本原理"><a href="https://blog.csdn.net/oppo62258801/article/details/72884633">MapReduce基本原理</a></h3><p>用户自己定义好map和reduce两个函数。</p><ul><li>map函数：接受一个键值对（key-value pair），产生一组中间键值对。MapReduce框架会将map函数产生的中间键值对里键相同的值传递给一个reduce函数。</li><li>reduce函数：接受一个键，以及相关的一组值，将这组值进行合并产生一组规模更小的值（通常只有一个或零个值）。</li></ul><h4 id="例统计词频">例：统计词频:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">map(String key, String value): </span><br><span class="line">　　<span class="comment">// key: document name </span></span><br><span class="line">　　<span class="comment">// value: document contents </span></span><br><span class="line">　　<span class="keyword">for</span> each word w in value: </span><br><span class="line">　　　　EmitIntermediate(w, <span class="string">&quot;1&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce(String key, Iterator values): </span><br><span class="line">　　<span class="comment">// key: a word </span></span><br><span class="line">　　<span class="comment">// values: a list of counts </span></span><br><span class="line">　　<span class="keyword">int</span> result = <span class="number">0</span>; </span><br><span class="line">　　<span class="keyword">for</span> each v in values: </span><br><span class="line">　　　　result += ParseInt(v); </span><br><span class="line">　　　　Emit(AsString(result)); </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow搭建RNN网络</title>
      <link href="/blog/TensorFlow%E6%90%AD%E5%BB%BARNN%E7%BD%91%E7%BB%9C/"/>
      <url>/blog/TensorFlow%E6%90%AD%E5%BB%BARNN%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="tensorflow搭建rnn网络">TensorFlow搭建RNN网络</h1><p>b站看的爱可可老师上传的公开课<a href="https://www.bilibili.com/video/BV1Sx411S7Dv?t=3341">《不用博士学位玩转Tensorflow深度学习》</a>。这是第二集，<a href="https://jyzhu.top/2020/12/10/TensorFlow%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%BD%91%E7%BB%9C/">第一集讲的是全连接和卷积网络</a>。</p><h2 id="recurrent-neural-network">Recurrent Neural Network</h2><figure><img src="https://jyzhu.top/mydocs/pics/image-20201212150337929-7759680.png" alt="image-20201212150337929" /><figcaption>image-20201212150337929</figcaption></figure><p>关键就是绿色那部分的结果，在下一次又会和蓝色的inputs连接在一起，再次作为输入，称其为state</p><p>(To be continued...)</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow搭建手写识别网络</title>
      <link href="/blog/TensorFlow%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%BD%91%E7%BB%9C/"/>
      <url>/blog/TensorFlow%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="tensorflow搭建手写识别网络">TensorFlow搭建手写识别网络</h1><p>b站看的爱可可老师上传的公开课<a href="https://www.bilibili.com/video/BV1Sx411S7Dv?t=3341">《不用博士学位玩转Tensorflow深度学习》</a>。</p><p>话说爱可可-爱生活老师真·神仙老师，我从微博关注到b站。上次宣姐问我居然也关注他们老师，我才知道是北邮的老师。羡慕！！</p><h2 id="理解">理解</h2><h3 id="每层神经网络的公式">每层神经网络的公式：</h3><p><span class="math display">\[softmax(X.W + b)\]</span></p><p>X是输入的量，假如有100张图片，每张图片784像素，那么X就是100*784</p><p>W是权重向量，假如有10个神经单元，要给784个输入的值赋权，W就是784*10</p><p>b是bias，感觉类似一个常数。它会给没一张图片的结果最后加一个同样的b</p><p>那么得到的X.W + b就是100*10, 是给100张图片分别计算的10个output，如果对应手写数字识别的最后一层，就可以理解成对应数字0-9的预测值了。用softmax针对每张图片的结果，转换成一个总合为1的概率值，其中概率最高的那个就值对应的位置(比如第六个值是98%),就是预测结果了（手写数字6）</p><p>（后边还有讲，中间层不用softmax，用sigmoid，用relu）</p><h3 id="cross-entropy损失函数">cross entropy损失函数</h3><p><span class="math display">\[cross\_entropy=-\sum Y\_{true} * \log (Y)\]</span></p><h3 id="看训练效果">看训练效果</h3><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209232637919.png" alt="image-20201209232637919.png" /><figcaption>image-20201209232637919.png</figcaption></figure><p>这是把训练和测试曲线放在一起，同时看准确率和loss。</p><p>当<strong>噪声</strong>很大，像training curve那样，那说明learning rate太大了。调小点，或者让它自动下降，很ok的trick。</p><p>当出现loss图那样，training loss不断下降，test loss反升，这就是<strong>过拟合</strong>。解决方法是正则化。具体的方法其实叫dropout。</p><h5 id="过拟合的本质">过拟合的本质：</h5><p>给了模型太多自由的空间，想象它太大了，可以把训练集中每一张图都存进去，那它肯定不是在学习可以generalize的feature，而是一些easy treaty</p><h4 id="dropout解决过拟合">dropout：解决过拟合</h4><p>就是在每一轮训练的时候随机shoot掉一些neoron，让它值变成0。</p><p>对于CNN来说，在卷积层搞dropout，it hurts too much，所以在全连接层搞就行</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209233058152.png" alt="image-20201209233058152" /><figcaption>image-20201209233058152</figcaption></figure><h2 id="代码">代码</h2><h3 id="一层的simplest-model">一层的simplest model</h3><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209224614996.png" alt="image-20201209224614996" /><figcaption>image-20201209224614996</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209225643852.png" alt="image-20201209225643852" /><figcaption>image-20201209225643852</figcaption></figure><p>tf.matmul是matrix multiply</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209230244362.png" alt="image-20201209230244362" /><figcaption>image-20201209230244362</figcaption></figure><p>用的Gradient Descent是梯度下降啦</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209230715571.png" alt="image-20201209230715571" /><figcaption>image-20201209230715571</figcaption></figure><p>概念上，前面几步只是定义要用哪些公式，是formal的，是graph的；定义好了公式之后，也方便在多gpu里跑代码。现在这一步，才是让它动起来</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209231158567.png" alt="image-20201209231158567" /><figcaption>image-20201209231158567</figcaption></figure><p>回顾所有代码</p><h3 id="多层的全连接model">多层的全连接model</h3><p>全连接就是数据1维嘛，扁平的，丢失了像图片这种2维数据的形状等信息</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209231606387.png" alt="image-20201209231606387" /><figcaption>image-20201209231606387</figcaption></figure><p>过去sigmoid是中间层最常用的激活函数，简单地给一个0-1之间的结果</p><p>现在有了relu，都用它: 超简单，负值舍弃为0，正值原封不动。它为啥效果更好?不知道，人们试了，它更好，仅此而已。有传说说是生物学家说现在人脑中更接近relu，计算机人就用了，真的更好。</p><p>用relu往往模型收敛得更sharply。有时候在很深的神经网络里，它俩优劣分明，用sigmoid的话模型甚至不收敛</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209231908137.png" alt="image-20201209231908137" /><figcaption>image-20201209231908137</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209231624774.png" alt="image-20201209231624774" /><figcaption>image-20201209231624774</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209231649554.png" alt="image-20201209231649554" /><figcaption>image-20201209231649554</figcaption></figure><h3 id="卷积神经网络">卷积神经网络</h3><p>本质上就是保持2维的信息量嘛。它跟全连接网络有个概念上的不同，就是每层layer的4个维度（channels）, 每个维度的所有神经单元用的权重向量是一样的。</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209234526249.png" alt="image-20201209234526249" /><figcaption>image-20201209234526249</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209235119829.png" alt="image-20201209235119829" /><figcaption>image-20201209235119829</figcaption></figure><p>truncated_normal is just complicated way of saying ramdom</p><figure><img src="https://jyzhu.top/mydocs/pics/image-20201209235327646.png" alt="image-20201209235327646" /><figcaption>image-20201209235327646</figcaption></figure><p>tf的conv2d函数可以方便地让你指定步长之后，自动在图片的长和宽2维上走</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch Quick Notes</title>
      <link href="/blog/Pytorch-Notes/"/>
      <url>/blog/Pytorch-Notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Reference: https://zhuanlan.zhihu.com/p/25572330</p></blockquote><h2 id="pytorch">Pytorch</h2><ol type="1"><li>基于Python</li><li>替代numpy，可以用gpu进行计算</li><li>还能有深度学习相关的库</li></ol><p>Pytorch 核心3库：Tensors数据类、Autograd自动求导、nn神经网络类</p><h2 id="tensors">Tensors</h2><p>Tensors和numpy中的ndarrays很像，二者可以互相转换，而它的优势在于可以被放在gpu上运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = torch.Tensor(<span class="number">5</span>, <span class="number">3</span>)  <span class="comment"># 构造一个未初始化的5*3的矩阵</span></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)  <span class="comment"># 构造一个随机初始化的矩阵</span></span><br><span class="line">x</span><br><span class="line">x.size()</span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> torch.Size 事实上是一个tuple, 所以其支持相关的操作*</span></span><br><span class="line"></span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#此处 将两个同形矩阵相加有两种语法结构</span></span><br><span class="line">x + y <span class="comment"># 语法一</span></span><br><span class="line">torch.add(x, y) <span class="comment"># 语法二</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外 输出tensor也有两种写法</span></span><br><span class="line">result = torch.Tensor(<span class="number">5</span>, <span class="number">3</span>) <span class="comment"># 语法一</span></span><br><span class="line">torch.add(x, y, out=result) <span class="comment"># 语法二</span></span><br><span class="line">y.add_(x) <span class="comment"># 将y与x相加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特别注明：任何可以改变tensor内容的操作都会在方法名后加一个下划线&#x27;_&#x27;</span></span><br><span class="line"><span class="comment"># 例如：x.copy_(y), x.t_(), 这俩都会改变x的值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#另外python中的切片操作也是资次的。</span></span><br><span class="line">x[:,<span class="number">1</span>] <span class="comment">#这一操作会输出x矩阵的第二列的所有值</span></span><br></pre></td></tr></table></figure><p>Tensors和ndarray可以互相转化。Torch的Tensor和numpy的array会共享他们的存储空间，修改一个会导致另外的一个也被修改:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处演示tensor和numpy数据结构的相互转换</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">b = a.numpy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处演示当修改numpy数组之后,与之相关联的tensor也会相应的被修改</span></span><br><span class="line">a.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将numpy的Array转换为torch的Tensor</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外除了CharTensor之外，所有的tensor都可以在CPU运算和GPU预算之间相互转换</span></span><br><span class="line"><span class="comment"># 使用CUDA函数来将Tensor移动到GPU上</span></span><br><span class="line"><span class="comment"># 当CUDA可用时会进行GPU的运算</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    x = x.cuda()</span><br><span class="line">    y = y.cuda()</span><br><span class="line">    x + y</span><br></pre></td></tr></table></figure><p>注意：把一个Tensor移动到gpu上运算，只需要调用<code>tensor1.cuda()</code></p><h2 id="autograd">Autograd</h2><p>Autograd可以进行自动求导。一旦把一个Tensor包装成autograd.Variable类，它就会自动有grad（梯度值）和creator（引用了上一个创建这个Variable的Function）。当通过一系列运算，将input转变成output之后，只要对output调用<code>output.backward()</code>，则input就会由反向传播获得其grad值<code>input.grad</code>。</p><figure><img src="https://i.loli.net/2021/11/27/wGf5RALVuyvP1cs.png" alt="img" /><figcaption>img</figcaption></figure><ul><li><p>autograd.Variable 这是这个包中最核心的类。 它包装了一个Tensor，并且几乎支持所有的定义在其上的操作。一旦完成了你的运算，你可以调用 .backward()来自动计算出所有的梯度。</p></li><li><p>可以通过属性 .data 来访问原始的tensor，而关于这一Variable的梯度则集中于 .grad 属性中</p></li><li><p>还有一个在自动求导中非常重要的类 Function。</p><p>Variable 和 Function 二者相互联系并且构建了一个描述整个运算过程的无环图。每个Variable拥有一个 .creator 属性，其引用了一个创建Variable的 Function。(除了用户创建的Variable其 creator 部分是 None)。(新版本把creator改成了grad_fn)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line">x = Variable(torch.ones(<span class="number">2</span>, <span class="number">2</span>), requires_grad = <span class="literal">True</span>)</span><br><span class="line">y = x + <span class="number">2</span></span><br><span class="line">y.creator</span><br><span class="line"></span><br><span class="line"><span class="comment"># y 是作为一个操作的结果创建的因此y有一个creator </span></span><br><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们来使用反向传播</span></span><br><span class="line">out.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># out.backward()和操作out.backward(torch.Tensor([1.0]))是等价的</span></span><br><span class="line"><span class="comment"># 在此处输出 d(out)/dx</span></span><br><span class="line">x.grad</span><br></pre></td></tr></table></figure><h2 id="torch.nn">torch.nn</h2><p>通常写一个神经网络的方法为：将一个神经网络模型定义为一个<code>nn.Module</code>的子类，然后在<code>__init__</code>中定义网络结构，在<code>forward</code>中定义前向传播的计算过程。【nb的是backward甚至不用写，autograd自动会做。】</p><p>举个例子，来看一下这个数字图像分类的神经网络。</p><figure><img src="https://i.loli.net/2021/11/27/DFMb2kwsHcuKo9j.png" alt="preview" /><figcaption>preview</figcaption></figure><p>这是一个简单的前馈神经网络。 从前面获取到输入的结果，从一层传递到另一层，最后输出最后结果。</p><p>一个典型的神经网络的训练过程是这样的：</p><ul><li><p>定义一个有着可学习的参数（或者权重）的神经网络</p></li><li><p>对着一个输入的数据集进行迭代:</p></li><li><ul><li><p>用神经网络对输入进行处理</p></li><li><p>计算代价值 (对输出值的修正到底有多少)</p></li><li><p>将梯度传播回神经网络的参数中</p></li><li><p>更新网络中的权重</p></li><li><ul><li>通常使用简单的更新规则: weight = weight + learning_rate * gradient</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>) <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution kernel</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1   = nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>) <span class="comment"># 16*5*5: input, 120: output</span></span><br><span class="line">        self.fc2   = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3   = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span> <span class="comment"># x is input</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>)) <span class="comment"># Max pooling over a (2, 2) window; x -&gt; relu -&gt; maxPool</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>) <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = x.view(-<span class="number">1</span>, self._num_flat_features(x)) <span class="comment"># need to flaten the x for the fc layer</span></span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x <span class="comment"># now return the output</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_num_flat_features</span>(<span class="params">self, x</span>):</span> <span class="comment"># for flaten x</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:] <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">net</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;神经网络的输出结果是这样的</span></span><br><span class="line"><span class="string">Net (</span></span><br><span class="line"><span class="string">  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</span></span><br><span class="line"><span class="string">  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))</span></span><br><span class="line"><span class="string">  (fc1): Linear (400 -&gt; 120)</span></span><br><span class="line"><span class="string">  (fc2): Linear (120 -&gt; 84)</span></span><br><span class="line"><span class="string">  (fc3): Linear (84 -&gt; 10)</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>仅仅需要定义一个forward函数就可以了，backward会自动地生成。</p><p>你可以在forward函数中使用所有的Tensor中的操作。</p><p>模型中可学习的参数会由net.parameters()返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(params))</span><br><span class="line"><span class="built_in">print</span>(params[<span class="number">0</span>].size()) <span class="comment"># conv1&#x27;s .weight</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = Variable(torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;out 的输出结果如下</span></span><br><span class="line"><span class="string">Variable containing:</span></span><br><span class="line"><span class="string">-0.0158 -0.0682 -0.1239 -0.0136 -0.0645  0.0107 -0.0230 -0.0085  0.1172 -0.0393</span></span><br><span class="line"><span class="string">[torch.FloatTensor of size 1x10]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">net.zero_grad() <span class="comment"># 对所有的参数的梯度缓冲区进行归零</span></span><br><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>)) <span class="comment"># 使用随机的梯度进行反向传播</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意: torch.nn 接收的数据的第一个维度为batch size</strong> 整个torch.nn包只接受那种小批量样本的数据，而非单个样本。 例如，nn.Conv2d能够结构一个四维的TensornSamples x nChannels x Height x Width。 <em>如果你拿的是单个样本，使用input.unsqueeze(0)来加一个假维度就可以了。</em></p></blockquote><p>到现在我们已经明白的部分:</p><ul><li>定义了一个神经网络。</li><li>处理了输入以及实现了反馈。</li></ul><hr /><p>仍然没整的:</p><ul><li>计算代价。</li><li>更新网络中的权重。</li></ul><h2 id="计算代价">计算代价</h2><p>用nn.loss function，接收（预测值，真实值）这一对输入，然后会算出loss值。</p><p>执行<code>loss.backward()</code>，这样就会直接对网络中所有结构计算出其grad了</p><h2 id="更新权重">更新权重</h2><p>这个也很简单。以最简单的随机梯度下降法SGD为例： <span class="math display">\[weight = weight - learning\_rate * gradient\]</span> 有一个写满了各种optimizer的包<code>torch.optim</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="comment"># create your optimizer</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr = <span class="number">0.01</span>) <span class="comment"># 把网络的参数绑定到optimizer上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in your training loop:</span></span><br><span class="line">optimizer.zero_grad() <span class="comment"># zero the gradient buffers</span></span><br><span class="line">output = net(<span class="built_in">input</span>) <span class="comment"># 网络输出</span></span><br><span class="line">loss = criterion(output, target) <span class="comment"># 计算loss</span></span><br><span class="line">loss.backward() <span class="comment"># 反馈计算grad</span></span><br><span class="line">optimizer.step() <span class="comment"># 它就会自动根据parameters，以及各自已经被更新好的grad，来更新parameters了</span></span><br></pre></td></tr></table></figure><p>有两个我自己一直在混淆的概念，但其实很简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">criterion = loss_function(outputs, real_outputs) </span><br><span class="line"><span class="comment"># 损失计算方法，例如最简单的MSE均方误差；当然还有mIoU等等</span></span><br><span class="line">optimizer = 权重更新方法(net.parameters(), lr = <span class="number">0.001</span>)</span><br><span class="line"><span class="comment"># 例如最简单的SGD随机梯度下降；当然还有Adam等等</span></span><br><span class="line"><span class="comment"># 还可以给optimizer定义learning rate的scheduler</span></span><br></pre></td></tr></table></figure><h2 id="在gpu上训练">在GPU上训练</h2><ol type="1"><li><code>net.cuda()</code></li><li><code>inputs.cuda()</code></li><li><code>labels.cuda()</code></li></ol><h1 id="一个典型的图片分类练习">一个典型的图片分类练习</h1><p>下面是对torch神经网络使用的一个实战练习。</p><h2 id="训练一个图片分类器"><strong>训练一个图片分类器</strong></h2><p>我们要按顺序做这几个步骤：</p><ol type="1"><li>使用torchvision来读取并预处理CIFAR10数据集</li><li>定义一个卷积神经网络</li><li>定义一个代价函数</li><li>在神经网络中训练训练集数据</li><li>使用测试集数据测试神经网络</li></ol><h2 id="读取并预处理cifar10">1. 读取并预处理CIFAR10</h2><p>使用torchvision读取CIFAR10相当的方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># torchvision数据集的输出是在[0, 1]范围内的PILImage图片。</span></span><br><span class="line"><span class="comment"># 我们此处使用归一化的方法将其转化为Tensor，数据范围为[-1, 1]</span></span><br><span class="line"></span><br><span class="line">transform=transforms.Compose([transforms.ToTensor(),</span><br><span class="line">                              transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">                             ])</span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>, </span><br><span class="line">                                          shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>, </span><br><span class="line">                                          shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;注：这一部分需要下载部分数据集 因此速度可能会有一些慢 同时你会看到这样的输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Downloading http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz</span></span><br><span class="line"><span class="string">Extracting tar file</span></span><br><span class="line"><span class="string">Done!</span></span><br><span class="line"><span class="string">Files already downloaded and verified</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们来从中找几张图片看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># functions to show an image</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">%matplotlib inline</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imshow</span>(<span class="params">img</span>):</span></span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span> <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># show some random training images</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="comment"># print labels</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span>%classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>结果是这样的：</p><figure><img src="https://i.loli.net/2021/11/27/zKrBOE7d6hasiJm.jpg" alt="img" /><figcaption>img</figcaption></figure><h2 id="定义一个卷积神经网络">2. 定义一个卷积神经网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool  = nn.MaxPool2d(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1   = nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2   = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3   = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net()</span><br></pre></td></tr></table></figure><h2 id="定义代价函数和优化器">3. 定义代价函数和优化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">criterion = nn.CrossEntropyLoss() <span class="comment"># use a Classification Cross-Entropy loss</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><h2 id="训练网络">4. 训练网络</h2><p>事情变得有趣起来了。 我们只需一轮一轮迭代然后不断通过输入来进行参数调整就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>): <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line">    </span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># get the inputs</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># wrap them in Variable</span></span><br><span class="line">        inputs, labels = Variable(inputs), Variable(labels)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># zero the parameter gradients</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># forward + backward + optimize</span></span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        loss.backward()        </span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print statistics</span></span><br><span class="line">        running_loss += loss.data[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>: <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> % (epoch+<span class="number">1</span>, i+<span class="number">1</span>, running_loss / <span class="number">2000</span>))</span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;这部分的输出结果为</span></span><br><span class="line"><span class="string">[1,  2000] loss: 2.212</span></span><br><span class="line"><span class="string">[1,  4000] loss: 1.892</span></span><br><span class="line"><span class="string">[1,  6000] loss: 1.681</span></span><br><span class="line"><span class="string">[1,  8000] loss: 1.590</span></span><br><span class="line"><span class="string">[1, 10000] loss: 1.515</span></span><br><span class="line"><span class="string">[1, 12000] loss: 1.475</span></span><br><span class="line"><span class="string">[2,  2000] loss: 1.409</span></span><br><span class="line"><span class="string">[2,  4000] loss: 1.394</span></span><br><span class="line"><span class="string">[2,  6000] loss: 1.376</span></span><br><span class="line"><span class="string">[2,  8000] loss: 1.334</span></span><br><span class="line"><span class="string">[2, 10000] loss: 1.313</span></span><br><span class="line"><span class="string">[2, 12000] loss: 1.264</span></span><br><span class="line"><span class="string">Finished Training</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>我们已经训练了两遍了。 此时需要测试一下到底结果如何。</p><p>通过对比神经网络给出的分类和已知的类别结果，可以得出正确与否，如果预测的正确，我们可以将样本加入正确预测的结果的列表中。</p><p>好的第一步，让我们展示几张照片来熟悉一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(testloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;GroundTruth: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span>%classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>结果是这样的：</p><figure><img src="https://i.loli.net/2021/11/27/ZhGfPN6evJHs4yj.jpg" alt="img" /><figcaption>img</figcaption></figure><p>好的，接下来看看神经网络如何看待这几个照片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">outputs = net(Variable(images))</span><br><span class="line"></span><br><span class="line"><span class="comment"># the outputs are energies for the 10 classes. </span></span><br><span class="line"><span class="comment"># Higher the energy for a class, the more the network </span></span><br><span class="line"><span class="comment"># thinks that the image is of the particular class</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># So, let&#x27;s get the index of the highest energy</span></span><br><span class="line">_, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predicted: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span>% classes[predicted[j][<span class="number">0</span>]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为</span></span><br><span class="line"><span class="string">Predicted:    cat plane   car plane</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>结果看起来挺好。</p><p>看看神经网络在整个数据集上的表现结果如何。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">    images, labels = data</span><br><span class="line">    outputs = net(Variable(images))</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">    total += labels.size(<span class="number">0</span>)</span><br><span class="line">    correct += (predicted == labels).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy of the network on the 10000 test images: %d %%&#x27;</span> % (<span class="number">100</span> * correct / total))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为</span></span><br><span class="line"><span class="string">Accuracy of the network on the 10000 test images: 54 %</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>看上去这玩意输出的结果比随机整的要好，随机选择的话从十个中选择一个出来，准确率大概只有10%。</p><p>看上去神经网络学到了点东西。</p><p>嗯。。。那么到底哪些类别表现良好又是哪些类别不太行呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class_correct = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">class_total = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">    images, labels = data</span><br><span class="line">    outputs = net(Variable(images))</span><br><span class="line">    _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">    c = (predicted == labels).squeeze()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        label = labels[i]</span><br><span class="line">        class_correct[label] += c[i]</span><br><span class="line">        class_total[label] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Accuracy of %5s : %2d %%&#x27;</span> % (classes[i], <span class="number">100</span> * class_correct[i] / class_total[i]))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;输出结果为</span></span><br><span class="line"><span class="string">Accuracy of plane : 73 %</span></span><br><span class="line"><span class="string">Accuracy of   car : 70 %</span></span><br><span class="line"><span class="string">Accuracy of  bird : 52 %</span></span><br><span class="line"><span class="string">Accuracy of   cat : 27 %</span></span><br><span class="line"><span class="string">Accuracy of  deer : 34 %</span></span><br><span class="line"><span class="string">Accuracy of   dog : 37 %</span></span><br><span class="line"><span class="string">Accuracy of  frog : 62 %</span></span><br><span class="line"><span class="string">Accuracy of horse : 72 %</span></span><br><span class="line"><span class="string">Accuracy of  ship : 64 %</span></span><br><span class="line"><span class="string">Accuracy of truck : 53 %</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomorrow Night - My fav color scheme</title>
      <link href="/blog/Tomorrow-Night-My-fav-color-scheme/"/>
      <url>/blog/Tomorrow-Night-My-fav-color-scheme/</url>
      
        <content type="html"><![CDATA[<p>用 Sublime Text 3 太久了，太爱这个配色了。今天上<a href="https://github.com/chriskempson/tomorrow-theme">GitHub</a>上找到了，我要把配色方案记下来:</p><h2 id="take-a-look">Take a look!</h2><p>Tomorrow theme variations in shown in TextMate with Ruby code and the font &quot;Menlo&quot;.<br /><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night.png" alt="Ruby Code in Tomorrow Night" /> <img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow.png" alt="Ruby Code in Tomorrow" /> <img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Eighties.png" alt="Ruby Code in Tomorrow Night Eighties" /> <img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Blue.png" alt="Ruby Code in Tomorrow Night Blue" /> <img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Bright.png" alt="Ruby Code in Tomorrow Night Bright" /></p><h2 id="hex-palettes">Hex Palettes</h2><h3 id="tomorrow-night">Tomorrow Night</h3><figure><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Palette.png" alt="Tomorrow Night" /><figcaption>Tomorrow Night</figcaption></figure><p><code>#1d1f21</code> Background<br /><code>#282a2e</code> Current Line<br /><code>#373b41</code> Selection<br /><code>#c5c8c6</code> Foreground<br /><code>#969896</code> Comment<br /><code>#cc6666</code> Red<br /><code>#de935f</code> Orange<br /><code>#f0c674</code> Yellow<br /><code>#b5bd68</code> Green<br /><code>#8abeb7</code> Aqua<br /><code>#81a2be</code> Blue<br /><code>#b294bb</code> Purple</p><h3 id="tomorrow">Tomorrow</h3><figure><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Palette.png" alt="Tomorrow" /><figcaption>Tomorrow</figcaption></figure><p><code>#ffffff</code> Background<br /><code>#efefef</code> Current Line<br /><code>#d6d6d6</code> Selection<br /><code>#4d4d4c</code> Foreground<br /><code>#8e908c</code> Comment<br /><code>#c82829</code> Red<br /><code>#f5871f</code> Orange<br /><code>#eab700</code> Yellow<br /><code>#718c00</code> Green<br /><code>#3e999f</code> Aqua<br /><code>#4271ae</code> Blue<br /><code>#8959a8</code> Purple</p><h3 id="tomorrow-night-eighties">Tomorrow Night Eighties</h3><figure><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Eighties-Palette.png" alt="Tomorrow Night Eighties" /><figcaption>Tomorrow Night Eighties</figcaption></figure><p><code>#2d2d2d</code> Background<br /><code>#393939</code> Current Line<br /><code>#515151</code> Selection<br /><code>#cccccc</code> Foreground<br /><code>#999999</code> Comment<br /><code>#f2777a</code> Red<br /><code>#f99157</code> Orange<br /><code>#ffcc66</code> Yellow<br /><code>#99cc99</code> Green<br /><code>#66cccc</code> Aqua<br /><code>#6699cc</code> Blue<br /><code>#cc99cc</code> Purple</p><h3 id="tomorrow-night-blue">Tomorrow Night Blue</h3><figure><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Blue-Palette.png" alt="Tomorrow Night Blue" /><figcaption>Tomorrow Night Blue</figcaption></figure><p><code>#002451</code> Background<br /><code>#00346e</code> Current Line<br /><code>#003f8e</code> Selection<br /><code>#ffffff</code> Foreground<br /><code>#7285b7</code> Comment<br /><code>#ff9da4</code> Red<br /><code>#ffc58f</code> Orange<br /><code>#ffeead</code> Yellow<br /><code>#d1f1a9</code> Green<br /><code>#99ffff</code> Aqua<br /><code>#bbdaff</code> Blue<br /><code>#ebbbff</code> Purple</p><h3 id="tomorrow-night-bright">Tomorrow Night Bright</h3><figure><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Bright-Palette.png" alt="Tomorrow Night Bright" /><figcaption>Tomorrow Night Bright</figcaption></figure><p><code>#000000</code> Background<br /><code>#2a2a2a</code> Current Line<br /><code>#424242</code> Selection<br /><code>#eaeaea</code> Foreground<br /><code>#969896</code> Comment<br /><code>#d54e53</code> Red<br /><code>#e78c45</code> Orange<br /><code>#e7c547</code> Yellow<br /><code>#b9ca4a</code> Green<br /><code>#70c0b1</code> Aqua<br /><code>#7aa6da</code> Blue<br /><code>#c397d8</code> Purple</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Busy but still have to configure my server!</title>
      <link href="/blog/Busy-but-still-have-to-configure-my-server/"/>
      <url>/blog/Busy-but-still-have-to-configure-my-server/</url>
      
        <content type="html"><![CDATA[<p>Oh my god. I'm so busy recently. It's stressful for me to prepare for the GRE test. And I'm going to apply for graduate schools. And I also wanna find an internship before I graduate.</p><p>But my personal server met some problems several months ago. After I bought a new server in Ali cloud, I have to configure a new certification for the https. But some weird problems always stop me.</p><p>Now I have gotten several reasons to finish these tasks:</p><ol type="1"><li>Xiao Nf is waiting for my new website.</li><li>I wanna build a personal research page on my website for showing for professors.</li><li>I need this place to write.</li><li>My new website is really beautiful and I miss it.</li></ol><p>Come on.</p><p>搞一下github.io网站 先用它</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Upload pics automatically via Typora</title>
      <link href="/blog/Upload-pics-automatically-via-Typora/"/>
      <url>/blog/Upload-pics-automatically-via-Typora/</url>
      
        <content type="html"><![CDATA[<p>Well, my last post met some problem that the picture of my beautiful console can not be seen.</p><p>I find the Typora can automatically upload every pic now. It gives a custom command for me to config.</p><p>My personal server now gets some problems in configuring the https road. So I'll note the method here. After I solve the problem of the server, I'll configure a <code>.sh</code> file to automatically upload the pics in the markdown file, and then my website will successfully show them.</p><p>I really really hope in the future I won't forget these things.</p><h2 id="upload-pics-automatically-via-typora">Upload pics automatically via Typora</h2><h3 id="custom">Custom</h3><p>You could config a custom command to upload images, using tools that is not listed in above options, or event write your own tools / scripts. Typora will append all images that needs to be uploaded after the custom command you filled.</p><p>Then, Typora will fetch image urls from the last N lines of the standard output of your custom command. (N is the number of images to upload).</p><p>For example, if you write a tool <code>upload-image.sh</code>, then you can input <code>[some path]/upload-image.sh</code> in the command filed. Typora will call <code>[some path]/upload-image.sh &quot;image-path-1&quot; &quot;image-path-2&quot;</code> to upload two images located in <code>image-path-1</code> and <code>image-path-2</code>. Then the command may return something like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Upload Success:</span><br><span class="line">http://remote-image-1.png</span><br><span class="line">http://remote-image-2.png</span><br></pre></td></tr></table></figure><p>Then Typora will get the two remote image url from the output, and replace the original local images used in the Markdown document.</p><p>You could click the “Test Uploader” button to verify your custom commands.</p><h4 id="use-current-filename-filepath-in-custom-commands">Use current filename / filepath in custom commands</h4><p>You can use <code>$&#123;filename&#125;</code> and <code>$&#123;filepath&#125;</code> in your custom commands, they will be replace as the current markdown file name and current file path. For “untitled” files that have not been saved on your disk, they will be empty strings.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Look at my console!</title>
      <link href="/blog/Look-at-my-console/"/>
      <url>/blog/Look-at-my-console/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://raw.githubusercontent.com/viridityzhu/viridityzhu.github.io/master/mydocs/pics/console.png" alt="console" /><figcaption>console</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外公终日会想些什么呢</title>
      <link href="/blog/%E6%88%91%E7%9A%84%E5%A4%96%E5%85%AC/"/>
      <url>/blog/%E6%88%91%E7%9A%84%E5%A4%96%E5%85%AC/</url>
      
        <content type="html"><![CDATA[<p>外公77了，因为脑梗的缘故，几乎是动不了了。另外他有震颤，头一直在不受控地颤动，世界一直晕晕乎乎。声带坏了，讲不了话；耳朵也不好使了，听不清声。偏偏脑子里思维很清晰。</p><p>前天带他去医院看肩膀的摔伤。早上我醒来，脑子里第一件事，忽然开始模拟外公的精神世界。跟外界信息交流几乎阻断了，外公聪明、敏感的大脑里，终日会想些什么呢。如果他想写一本自传的话……他或许也觉得，他大概再没有办法了吧？他会想写一本自传吗？没有人会去问他吧，因为大家都没有什么办法。我很悲伤。</p><p>也挂了神经内科的号，希望专家能做一个系统性的检查，外公的各种各样的病因，我们从来没有了解清楚过。几乎是被医生骂走的，他淡然说，这是衰老了，多器官系统性衰竭，没什么好办法；你们作为家属，有什么需求，可以针对性地解决。外婆说，他现在不受控地淌口水。医生说，那给脸上打几针就行。妈妈说那当然不必。</p><p>最后什么也没做，就悻悻地从诊室出来了。我止不住地哭。妈妈和外婆劝我，外公老了，这很正常；但是你看，外公思路清晰着呢，内脏也没有大碍，外婆好好照顾着，还能活好久好久。可是我难过的正是这个不是吗？外公终日会想些什么呢？他过去会作画作文，捣鼓电路，养狗养花，骑着他心爱的古董摩托，带我去看新建的桥……如今他终日会想些什么呢？他自尊心仍极强，拒绝在小区里坐轮椅，拒绝在人前被喂饭……如今仍然用摇头来表达抗拒，却也别无他法了。</p><p>肩上的摔伤查出是骨折，一周以来只当扭伤处理，已经错位到需要手术了。家人和医生商量，外公点头同意，决定保守治疗：不手术了，兜住静养，两个月后畸形愈合。我又流泪。妈妈说因为脑梗本来就不能动了，外公这么大年纪，何苦承受手术的折磨。可是，这意味着再一次不可逆的改变，外公的右臂再也不可能动了啊；可是，明明是还有希望通过手术复原的……</p><p>我想不通的大概是，为什么衰老过后，一切判断的标准仿佛都已经不一样了？他们为什么都能如此轻易接受一些东西，放弃一些东西？我想起自传，假若外公真的想写一本自传，假若我们真的问了他，那真的找不到办法吗？我们都想尽力对外公好，可是尽力是什么？我感到我的幼稚……可我能想通吗，外公近在眼前，可我甚至无法知道，外公终日会想些什么呢？</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grandpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正式把网站迁移到hexo上啦！为了Markdown。</title>
      <link href="/blog/%E6%AD%A3%E5%BC%8F%E6%8A%8A%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%88%B0hexo%E4%B8%8A%E5%95%A6%EF%BC%81%E4%B8%BA%E4%BA%86Markdown%E3%80%82/"/>
      <url>/blog/%E6%AD%A3%E5%BC%8F%E6%8A%8A%E7%BD%91%E7%AB%99%E8%BF%81%E7%A7%BB%E5%88%B0hexo%E4%B8%8A%E5%95%A6%EF%BC%81%E4%B8%BA%E4%BA%86Markdown%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>捣鼓了两天，终于迁移过来了。碰到一些小坑，但还好，还算顺利。hexo还是挺舒服的，但是我目前还有问题没解决，就是图片存储位置的问题。</p><p>TODO:</p><ul><li>[] 图片是放到阿里云上了，但是GitHub到时候咋引用呢？两边都放嘛？反正我图不多</li><li>[] 尼玛，主页文章没有自动截断诶</li><li>[] WordPress的一个无敌强的功能：邮箱发文。配合iPhone的捷径，我随时可以发文到博客里，比hexo这个必须用电脑，还得用命令行输好几个命令，不知道方便到哪里去了，唉唉唉。再想想办法</li></ul><p>就这样吧，老婆等着我跟她聊天，一起睡觉呢。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text 3 Package Control报错OSError: The specified item could not be found in the keychain解决</title>
      <link href="/blog/sublime-oserror-keychain/"/>
      <url>/blog/sublime-oserror-keychain/</url>
      
        <content type="html"><![CDATA[<p>Sublime Text 3 Package Control 报错 OSError: The specified item could not be found in the keychain解决了，喜大普奔。</p><p>他妈的，这是什么天坑。花了我一整天，好多根头发，最后的解决方法是：在<code>钥匙串</code>中把<code>Apple Worldwide Developer Relations Certification Authority</code>这个证书的信任权限从<code>系统默认</code>改为<code>始终信任</code>。</p><p>我迄今也不太清楚这个证书是干嘛用的，也来不及去搞清楚了。我猜测肯定是系统咋的一更新，出于安全考虑，这个证书的权限被降低了；一般的程序不管是用curl还是用urllib来访问url的时候，一旦遇上https类型的，就需要跟OS沟通来签相关证书，但在这个时候被OS给拒绝了。</p><p>网上搜来搜去也没有直接提到这个问题的解决方案的。记录一下我的debug思路吧，多机智啊：</p><ol type="1"><li>解锁新技能，把<code>Package Control.sublime-package</code>后缀改成<code>.zip</code>（网上说.sublime-package本质上就是.zip压缩文件，只是改了个后缀，好的吧…），解压看了源码，然后发现不管是通过curl还是通过urllib来使用package control，都会出现同样的错，排除了sublime text源码的问题，确认问题出在OS上。</li><li>另一方面我看源码的时候发现好像得是https类型的url才会触发这个证书签发的机制，灵机一动把channels手动改成http类型的，发现果然成功了。</li><li>所以我定位到了问题，搜了一下“urllib https 报错The specified item could not be found in the keychain”，终于找到<a href="https://github.com/electron-userland/electron-builder/issues/820">github一个issue里</a>有人提到了这个证书Apple Worldwide Developer Relations Certification Authority。</li><li>打开钥匙串，找到这个证书，随便改了一下权限，发现ok了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> https </tag>
            
            <tag> Sublime Text 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的状态：伸手接过空无一物</title>
      <link href="/blog/%E6%88%91%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%9A%E4%BC%B8%E6%89%8B%E6%8E%A5%E8%BF%87%E7%A9%BA%E6%97%A0%E4%B8%80%E7%89%A9/"/>
      <url>/blog/%E6%88%91%E7%9A%84%E7%8A%B6%E6%80%81%EF%BC%9A%E4%BC%B8%E6%89%8B%E6%8E%A5%E8%BF%87%E7%A9%BA%E6%97%A0%E4%B8%80%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<p>网络空间安全成立<br />世上人心不齐<br />一把横放的吉他<br />会受损吗<br />我不在意<br />窗外的小区楼<br />晚饭后变得嘈杂<br />那好 无人听见我的琴声<br />电子书落了尘埃<br />当天的考试沉甸甸<br />吉他心律不齐<br />我的状态：<br />伸手接过空无一物</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>说起享乐观</title>
      <link href="/blog/%E8%AF%B4%E8%B5%B7%E4%BA%AB%E4%B9%90%E8%A7%82/"/>
      <url>/blog/%E8%AF%B4%E8%B5%B7%E4%BA%AB%E4%B9%90%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<p>说起享乐观，享乐大抵是我的生活追求，只是设有一个底线，有一类享乐不会去接触：极致的，一旦体验过一次，生活再回不了头的。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三年前的今天高考出分</title>
      <link href="/blog/%E4%B8%89%E5%B9%B4%E5%89%8D%E7%9A%84%E4%BB%8A%E5%A4%A9%E9%AB%98%E8%80%83%E5%87%BA%E5%88%86/"/>
      <url>/blog/%E4%B8%89%E5%B9%B4%E5%89%8D%E7%9A%84%E4%BB%8A%E5%A4%A9%E9%AB%98%E8%80%83%E5%87%BA%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>三年前的今天高考出分，北京难得的大雨夜，魏公村常年疏水不畅的下水道，积水没过鞋面。十一二点我跟朋友从ktv出来，几个人各怀心事，没人说很深的话。人生中第一次喝酒是在这次，四瓶忘了是啥的啤酒，喝完清醒得不得了。知道考砸了，栽跟头了，一下子所有都已经不一样了。</p><p>却不知道命运那头是什么样。这头是一股脑走下去了，懂承担选择的责任了，也多了股反叛味儿在骨子里。问起后悔我是不承认的，只是一丁点儿也不愿再回忆高中时期了，一切都蒙着灰，带着愊忆。三年里路过高中校门很多次，一次也没去看望过老师，暂时是无所谓了。</p><p>情绪一直没我妈担忧的差，糟糕的高考分，糟糕的选校，糟糕的专业，竟然就自然地度过了。说来有点玩味，支撑我的可能是那晚一句偏颇的领悟，被我奉为圭臬了：人生还是痛苦多。</p><p>后来发挥这种精神，痛苦的晚上喝点酒，什么也不想，就过去了，我觉得这是我的成年。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="/blog/%E6%97%A0%E9%A2%98-trashed/"/>
      <url>/blog/%E6%97%A0%E9%A2%98-trashed/</url>
      
        <content type="html"><![CDATA[<p>想念过去的你<br />我从未见过她<br />却如此熟悉她<br />命运使我们永不能相见<br />我却是深爱着她<br />是怎样的不幸<br />使我没有从一出生就遇见你<br />陪伴你 经历你<br />把更多的我献给你</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>荒诞笔记</title>
      <link href="/blog/%E8%8D%92%E8%AF%9E%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/%E8%8D%92%E8%AF%9E%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="荒诞是什么">荒诞是什么</h1><ol type="1"><li>人对永恒的追求与横亘在人面前的不得不面对的死亡之间的矛盾</li><li>死囚在临死之前什么也看不到，独独看到近在眼前的他的鞋带，荒诞就是死囚的鞋带</li><li>人对透明的追求与世界的混沌之间的矛盾</li><li>人意识到活着的无意义、无价值，一种脱离生活规则的感受</li><li>人一下子把握住时间，即感受到时间对自己的扼杀，将自己与永恒撇开关系</li><li>人同时从介入者和旁观者的视角观看生活而产生的差距（齐泽克）</li></ol><h1 id="面对荒诞的三种人">面对荒诞的三种人</h1><ol type="1"><li>自杀者：肉体上逃避荒诞</li><li>精神自杀者：选择信仰或希望，这是精神上自杀，同样是逃避荒诞</li><li>反抗者（<strong>荒诞英雄</strong>）：意识到荒诞，意识到荒诞的永恒性，而尽可能丰富地活着，增加生命体验的量（即活着的时长，而无质的差别）。这是真正的勇敢。（对生命最大的反抗即是尽可能活着，对荒诞真正的反抗即是延续荒诞。（因为已知荒诞是永恒的。））</li></ol><h1 id="荒诞英雄二例">荒诞英雄二例</h1><ol type="1"><li><h2 id="西西弗">西西弗</h2></li></ol><p>因贪恋人世而受到诸神的惩罚，终其生命重复推巨石上山，巨石到达山顶后滑落，重新推之。</p><p>西西弗接受其荒诞的命运，破除对永恒的希冀而完全掌握巨石，掌握命运。西西弗将推巨石视作命运，与自己此前所做相联系，因而不被视作惩罚，本无惩罚。西西弗每次从山顶下山时，是完成了一次反抗之后重新走入命运的空隙，是直视荒诞的时刻，是勇敢。</p><p>另一视角，西西弗通过不断地推巨石，不断坚持这一选择，使之存在，进而影响其他的人做出的选择，这是他对自己的选择所负的责任（我这么理解）。</p><p>不可以推测西西弗不幸福。</p><ol start="2" type="1"><li><h2 id="唐璜">唐璜</h2></li></ol><p>爱过一个又一个女人，重复地深情，重复地离开；接受此后惩罚一般的命运；从未体会失望与忧伤。</p><p>唐璜是追求生命体验的量，是荒诞人的典范。他有知识，也有意识，通过自己的选择做出对荒诞的反抗。专于一人的爱情本质上是对永恒的信仰，是精神自杀；唐璜跳出这样的藩篱，清楚自己想要的是什么。唐璜是否自私，加缪留给读者解读，我以为是。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逃吧</title>
      <link href="/blog/%E9%80%83%E5%90%A7/"/>
      <url>/blog/%E9%80%83%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p>加速吧下坠吧<br />不要放弃希望<br />希望在下一代<br />逃吧快逃吧<br />逃去荒芜的赛博空间里<br />逃去原始的阅读欲望里<br />逃到他乡<br />没有枷锁一样的联结<br />没有大爱只有私情</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>世间的野火</title>
      <link href="/blog/%E4%B8%96%E9%97%B4%E7%9A%84%E9%87%8E%E7%81%AB/"/>
      <url>/blog/%E4%B8%96%E9%97%B4%E7%9A%84%E9%87%8E%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p>你成全我<br />世间的野火<br />一种年轻的沉迷<br />我们一起浪费生活<br />从一句重复的话到另一句<br />数到第五百二十句爱你<br />小写的牧歌正是循环<br />不再怕梦中的寂寞<br />没有等待的戈多</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>狭窄的人生</title>
      <link href="/blog/%E7%8B%AD%E7%AA%84%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
      <url>/blog/%E7%8B%AD%E7%AA%84%E7%9A%84%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>狭窄的人生里<br />如果重逢<br />是拾起所有偏见<br />旧日之情是死结<br />那么孤独<br />不是傲慢<br />是与黄昏的和解<br />狭窄的人生里<br />如果酒后除了呓语<br />还剩见不得人的诗<br />那么告别是在最早一次<br />或是趁早这次</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xp</title>
      <link href="/blog/xp/"/>
      <url>/blog/xp/</url>
      
        <content type="html"><![CDATA[<p>她远远地站在卧室<br />我却喊出了性癖之句：<br />我远远望着的时候你在凝视</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>geek</title>
      <link href="/blog/geek/"/>
      <url>/blog/geek/</url>
      
        <content type="html"><![CDATA[<p>遥远的<br />宇宙中央<br />那里有极客吗</p><p>遥远的<br />宇宙中央<br />那里有嫖客吗</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>盆栽</title>
      <link href="/blog/%E7%9B%86%E6%A0%BD/"/>
      <url>/blog/%E7%9B%86%E6%A0%BD/</url>
      
        <content type="html"><![CDATA[<p>今天妈妈新买的五盆盆栽到家了，我有一种感觉，家庭成员新添了好几个小家伙，家里变得热闹起来。可是总的来说，我跟植物相处的经验还比较欠缺，互相还处于小心翼翼、斯抬斯敬的阶段，慢慢熟悉吧。 ​​​</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ITerm2-必须让Mac终端花里胡哨一点</title>
      <link href="/blog/iterm2-mac/"/>
      <url>/blog/iterm2-mac/</url>
      
        <content type="html"><![CDATA[<p>一个重度Mac用户不好好魔改一下终端怎么能行……今天终于上道了。</p><p><img src="https://jyzhu.top/mydocs/2020/04/image-1.png" /></p><p>暂且这样，功能有了，美观度还没</p><h2 id="使用">1. 使用</h2><h3 id="巧用-command-键">巧用 Command 键</h3><p>按住⌘键:</p><ul><li>可以拖拽选中的字符串；</li><li>点击 url：调用默认浏览器访问该网址；</li><li>点击文件：调用默认程序打开文件；</li><li>如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；</li><li>点击文件夹：在 finder 中打开该文件夹；</li><li>同时按住option键，可以以矩形选中，类似于vim中的ctrl v操作。</li></ul><h3 id="常用快捷键">常用快捷键</h3><ul><li>切换 tab：⌘+←, ⌘+→, ⌘+{, ⌘+}。⌘+数字直接定位到该 tab；</li><li>新建 tab：⌘+t；</li><li>顺序切换 pane：⌘+[, ⌘+]；</li><li>按方向切换 pane：⌘+Option+方向键；</li><li>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；</li><li>智能查找，支持正则查找：⌘+f。</li></ul><h3 id="自动完成">自动完成</h3><p>iTerm2 可以自动补齐命令，输入若干字符，按⌘+;弹出自动补齐窗口，列出曾经使用过的命令。</p><p>iTerm2 也可以使用历史记录，按⌘+Shift+h弹出历史粘贴记录窗口，⌘+Shift+;弹出历史命令记录窗口。</p><h3 id="高亮当前鼠标的位置">高亮当前鼠标的位置</h3><p>一个标签页中开的窗口太多，有时候会找不到当前的鼠标，⌘+/找到它。</p><h2 id="配置主题"><a href="https://www.jianshu.com/p/53eb1075f627">2. 配置主题</a></h2><h3 id="安装oh-my-zsh">安装oh-my-zsh</h3><p><a href="https://link.jianshu.com?t=http://ohmyz.sh">官网</a>有介绍，或者直接在iTerm2终端执行以下代码：</p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</code></p><h4 id="下载安装powerline字体库">下载安装Powerline字体库</h4><p>从<a href="https://link.jianshu.com/?t=https://github.com/powerline/fonts">Powerline fonts</a>下载字体库</p><h3 id="导入色彩预设">导入色彩预设</h3><p>下载色彩预设和下载字体库是一样的，从<a href="https://link.jianshu.com/?t=http://iterm2colorschemes.com">官网</a>可以看到更多介绍，运行代码将文件保存到下载文件夹：</p><h3 id="修改一长串的hostnamemacbook">修改一长串的hostname（<span class="citation" data-cites="macbook">@macbook</span>）</h3><p>选择agnoster有一个好处就是可以把路径前面一长串的user@user-macbook选择不显示。。</p><p>打开agnoster.zsh-theme文件，具体操作如下：</p><p><code>vim ~/.oh-my-zsh/themes/agnoster.zsh-theme</code></p><p>找到prompt_context()，然后修改光标附近的区域就可以了 $USER@%m 就是user@user-macbook</p><h2 id="插件">3. 插件</h2><h3 id="autojump">3.1. autojump</h3><p>自动跳转到最可能的目录</p><p>autojump的工作方式很简单：它会在你每次启动命令时记录你当前位置，并把它添加进它自身的数据库中。这样，某些目录比其它一些目录添加的次数多，这些目录一般就代表你最重要的目录，而它们的“权重”也会增大。</p><p>现在不管你在哪个目录，你都可以使用下面的语法来直接跳转到这些目录：</p><p><code>autojump [目录的名字或名字的一部分]</code></p><h3 id="自动补全">3.2. 自动补全</h3><h3 id="语法高亮">3.3. 语法高亮</h3><h2 id="todo-mosh">TODO: mosh</h2><p><a href="https://mosh.mit.edu/">mosh</a> 是全平台更好的 ssh 工具，更健壮，支持断续连接，支持除了 iPhone 之外的几乎任何平台。（iOS 让人爱不释手的优点，也正是它让人恨之入骨的缺点）</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> iTerm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A pic of the relationship between CRM, SCM &amp; ERP</title>
      <link href="/blog/a-pic-of-the-relationship-between-crm-scm-erp/"/>
      <url>/blog/a-pic-of-the-relationship-between-crm-scm-erp/</url>
      
        <content type="html"><![CDATA[<p>What a good pic. It helped me a lot.</p><p>CRM and SCM are outside of the ERP, that connect the ERP with customers or suppliers. And the ERP regards to the core business functions of a company, with Financial Management, Human Resource Management, Marketing &amp; Sales, Operations Management, etc in it.</p><p>I think we've already learned these different fields of management. HRM, SCM, Marketing, OM, FM... I should have combined them together.</p><p><img src="https://jyzhu.top/mydocs/2020/04/image.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ERP </tag>
            
            <tag> Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫期-大三上-碎念</title>
      <link href="/blog/%E7%96%AB%E6%9C%9F-%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%A2%8E%E5%BF%B5/"/>
      <url>/blog/%E7%96%AB%E6%9C%9F-%E5%A4%A7%E4%B8%89%E4%B8%8A-%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>唉，疫情在家，这都多少天了。有安稳进行的，有新鲜的，有措手不及的。</p><p>跟她的状态算是安稳。几天之前写下的：</p><blockquote><p>对她的喜欢到了半夜自己一个人喃喃自语：Oh my fucking god, I love her. 的地步。闻所未闻吧，朱jy还会这样呢？并且这份爱没有给我不安全感。我觉得它是值得的，她值得，她对我的爱也值得。虽然一大片阴霾在眼前：疫情导致这学期见不到，交换导致大四一年见不到，留学就跑更远了……如果能认定的话，能把这些看上去很漫长但其实很短暂的人生给普通地消磨过去的话，未来有能力朝着她前进的时候，就不是什么问题了吧。<br />挺安稳的，踏踏实实走自己的路的感觉，有归宿有期待的感觉。</p></blockquote><p>安稳的还有学习，不知不觉已经过完前八周了，结了一波课，马上新开一波课。我对新的课没啥期待。</p><p>新鲜的是最近开始学吉他了。现在是每天左手指尖麻麻疼疼的状态。我真的不理解这是人能按的弦吗？在彻底改变身体的一部分（指让左手指尖痛觉彻底坏掉以便按弦）跟学会一门乐器之间选，我还真纠结了一下。不过学吉他还挺有意思的，我甚至花了一天把一整本教材的乐理都给看了一遍，调啊和弦啊节奏啊之类的概念，算是明白了，还挺妙。音乐真有意思，不啻文学嘛！</p><p>措手不及的是ANU交换给取消了，因为疫情。好不容易被选上的，当初我还真怪期待的。挺珍贵的机会，而且从我这破烂学校破烂专业，到人家好学校去学我想学的课程，简直美丽新人生。虽然要提前跟她异地（国）也很让人进退两难。但如今梦幻泡影一场，不胜难受。</p><p>另外还要自己反思一些：</p><ol type="1"><li>GRE背单词也太不积极了。要完啊。</li><li>爬虫真的恶心死我了。下次请学会拒绝，时间留在更宝贵的事情上不好吗。你现在整个人方向还是偏的，还没走上ds正途，你岌岌可危哎。</li><li>太懒了，天天只想发呆只想玩。以前那种学习新东西的兴奋劲呢？什么时候才能从这种漫长的疲劳状态中恢复过来啊？</li></ol><p>快让我回学校吧。我想见她。真的想。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anki使用笔记</title>
      <link href="/blog/anki%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/anki%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="特殊字段">特殊字段</h1><p>笔记标签: <code>&#123;&#123;Tags&#125;&#125;</code></p><p>笔记类型: <code>&#123;&#123;Type&#125;&#125;</code></p><p>所属记忆库（牌组）: <code>&#123;&#123;Deck&#125;&#125;</code></p><p>卡片类型（卡片模板中的标签名--译注）(&quot;正向&quot;等等): <code>&#123;&#123;Card&#125;&#125;</code></p><p>正面模板的内容（仅在背面模板有效）： <code>&#123;&#123;FrontSide&#125;&#125;</code></p><h1 id="特殊字段类型">特殊字段类型</h1><p>填空：<code>&#123;&#123;cloze:text&#125;&#125;</code> <strong>必须要单独用cloze类型的卡片创建才有效</strong></p><p>拼写：<code>&#123;&#123;type:text&#125;&#125;</code></p><p>提示：<code>&#123;&#123;hint:text&#125;&#125;</code></p><h1 id="图片引用">图片引用</h1><p>如果希望在所有卡片上包含相同的图像或声音 （例如每张卡片上方的公司标志）：</p><ol type="1"><li>重命名文件使其以下划线开头，如“_logo.jpg”。 下划线提示Anki该文件被模板使用并在分享记忆库（牌组）时同时导出。</li><li>在卡片正面或背面模板添加该媒体文件的引用，如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;_logo.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="条件替换">条件替换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#字段名&#125;&#125;</span><br><span class="line">本条文本只在字段名字段非空时显示。</span><br><span class="line">&#123;&#123;/字段名&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;^字段名&#125;&#125;</span><br><span class="line">本条文本只在字段名字段为空时显示。</span><br><span class="line">&#123;&#123;/字段名&#125;&#125;</span><br></pre></td></tr></table></figure><p>还可以在有笔记存在的条件下给某个字段设置额外的格式哦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#笔记&#125;&#125;&lt;span style=&quot;color:blue;&quot;&gt;&#123;&#123;/笔记&#125;&#125;</span><br><span class="line">&#123;&#123;要设定格式的字段&#125;&#125;</span><br><span class="line">&#123;&#123;#笔记&#125;&#125;&lt;/span&gt;&#123;&#123;/笔记&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="词典链接">词典链接</h1><p><code>&lt;a href=&quot;http://example.com/search?q=&#123;&#123;表达&#125;&#125;&quot;&gt;在词典中查询&lt;/a&gt;</code></p><p>如果给字段名称加一个“text:”的前缀， Anki就不会包含任何格式信息。</p><h1 id="浏览器搜索">浏览器搜索</h1><p>dog</p><p>搜索&quot;dog&quot;，将会匹配像“doggy”和“underdog”这类卡片。</p><p>dog cat</p><p>发现“dog”和“cat”的笔记，如“a dog and cat”。</p><p>dog or cat</p><p>发现有“dog”或“cat”的笔记</p><p>dog（cat或mouse）</p><p>发现dog和cat，或dog和mouse的笔记。</p><p>-cat</p><p>发现笔记没有“cat”这个词</p><p>-cat -mouse</p><p>发现笔记既不是“cat”也不是“mouse”。</p><p>-(cat或mouse)</p><p>与上述相同。</p><p>&quot;a dog&quot;</p><p>发现笔记对“a dog”有精确地短语。</p><p>-&quot;a dog&quot;</p><p>发现笔记对“a dog”没有精确地短语。</p><p>d_g</p><p>发现d，\, g,像dog, dig, dug等等的笔记。</p><p>d*g</p><p>发现d, \, g, 像dg, dog, dung等等的笔记。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shodan初体验</title>
      <link href="/blog/shodan%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/shodan%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>此前有听过关于网络摄像头泄露隐私的新闻，没想到此次自己也成了一名「偷窥者」。在老师的ppt以及其他一些资料的指导下，我理解了Shodan是一个可以搜索一切暴露在网络上的设备、端口，以及它们的HTTP header或者其他信息的搜索引擎。初体验Shodan之下，我理解了一些头文件格式、视频设备信息等知识，体验了一些弱口令漏洞，主要的还是透过弱口令看到了一些在线摄像头。</p><h3 id="常用摄像头设备及其弱口令搜集">1 常用摄像头设备及其弱口令搜集</h3><ul><li>ACTi: admin/123456 or Admin/123456</li><li>American Dynamics: admin/admin or admin/9999</li><li>Arecont Vision: none</li><li>Avigilon: admin/admin</li><li>Axis: traditionally root/pass, new Axis cameras require password creation during first login</li><li>Basler: admin/admin</li><li>Bosch: none</li><li>Brickcom: admin/admin</li><li>Canon: root/camera</li><li>Cisco: No default password, requires creation during first login</li><li>Dahua: admin/admin</li><li>Digital Watchdog: admin/admin</li><li>DRS: admin/1234</li><li>DVTel: Admin/1234</li><li>DynaColor: Admin/1234</li><li>FLIR: admin/fliradmin</li><li>Foscam: admin/</li><li>GeoVision: admin/admin</li><li>Grandstream: admin/admin</li><li>Hikvision: admin/12345</li><li>Honeywell: admin/1234</li><li>IQinVision: root/system</li><li>IPX-DDK: root/admin or root/Admin\</li><li>JVC: admin/jvc</li><li>March: Networks: admin/</li><li>Mobotix: admin/meinsm</li><li>Panasonic: admin/12345</li><li>Pelco Sarix: admin/admin</li><li>Pixord: admin/admin</li><li>Samsung Electronics: root/root or admin/4321</li><li>Samsung Techwin (old): admin/1111111</li><li>Samsung (new): admin/4321</li><li>Sanyo: admin/admin</li><li>Scallop: admin/password</li><li>Sentry360 (mini): admin/1234</li><li>Sentry360 (pro): none</li><li>Sony: admin/admin</li><li>Speco: admin/1234</li><li>Stardot: admin/admin</li><li>Starvedia: admin/</li><li>Trendnet: admin/admin</li><li>Toshiba: root/ikwd</li><li>VideoIQ: supervisor/supervisor</li><li>Vivotek: root/</li><li>Ubiquiti: ubnt/ubnt</li><li>Wodsee: admin/</li></ul><p>1.海康威视IP网络摄像机： 用户：admin，密码：12345 zoomeye搜索关键词：hikvision 2.大华网络摄像机： user:admin pass:admin 管理权限 user:default pass:user 用户默认登陆帐号 user:888888 pass:admin user:666666 pass:user zoomeye搜索关键词：WEB SERVICE 3.cctv摄像机： user：admin pass：空 telnet登陆 user：root pass：”juantech” zoomeye搜索关键词：JAWS/1.0 4.SQ-WEBCAM摄像机： user：admin pass：admin zoomeye搜索关键词：SQ-WEBCAM</p><h3 id="尝试的搜索指令">2 尝试的搜索指令</h3><p>Server: uc-httpd 1.0.0 200 OK Country:&quot;CN&quot;</p><p>Webcam Country:&quot;CN&quot;</p><h3 id="搜到的摄像头">3 搜到的摄像头</h3><h4 id="section">1</h4><p><a href="http://153.223.242.81:81/home.htm" class="uri">http://153.223.242.81:81/home.htm</a></p><p>location: japan</p><p>用户名：admin 密码：admin</p><h4 id="section-1">2</h4><p><a href="http://78.186.241.146:81/home.htm" class="uri">http://78.186.241.146:81/home.htm</a></p><p>location：turkey</p><p>用户名：admin 密码：admin</p><h4 id="section-2">3</h4><p><a href="http://60.16.233.108:60001/view2.html" class="uri">http://60.16.233.108:60001/view2.html</a></p><p>location：沈阳</p><p>用户名：空</p><p>密码：空</p><h4 id="section-3">4</h4><p><a href="http://92.108.85.124:83/home.htm" class="uri">http://92.108.85.124:83/home.htm</a></p><p>location：Germany</p><p>用户名：admin 密码：admin</p><h4 id="section-4">5</h4><p>搜到了自己的网站头文件信息……</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shodan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles抓包知乎app&amp;尝试tcpdump抓包微信</title>
      <link href="/blog/charles%E6%8A%93%E5%8C%85%E7%9F%A5%E4%B9%8Eapp%E5%B0%9D%E8%AF%95tcpdump%E6%8A%93%E5%8C%85%E5%BE%AE%E4%BF%A1/"/>
      <url>/blog/charles%E6%8A%93%E5%8C%85%E7%9F%A5%E4%B9%8Eapp%E5%B0%9D%E8%AF%95tcpdump%E6%8A%93%E5%8C%85%E5%BE%AE%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="charles抓包知乎app">1. Charles抓包知乎app</h1><h2 id="一配置http代理并连接">一、配置http代理并连接</h2><p>手动将charles端口设置为8887（8888已有其他程序使用）</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418202227829.png" /></p><p>查看Mac ip地址</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418202326968.png" /></p><p>将上述ip地址和端口填入手机http代理</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418203302486.png" /></p><p>charles收到连接请求，点击allow</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418202628755.png" /></p><p>手机访问baidu，charles抓到，表示成功连接</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418204227530.png" /></p><h2 id="二下载并安装ssl证书解开https">二、下载并安装SSL证书，解开https</h2><p>在设置中打开SSL proxying，并添加*:*，表示抓包所有https请求</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418204655402.png" /></p><p>在手机中访问<code>chls.pro/ssl</code>，下载并安装证书</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418205452977.jpg" /></p><p>在通用-关于中打开证书信任</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418205537380.png" /></p><h2 id="三抓包知乎app">三、抓包知乎app</h2><p>使用手机浏览知乎</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418210744247.png" /></p><p>charles抓到许多相关请求：</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418210211496.png" /></p><p>在<code>https://api.zhihu.com/answers</code>中发现的json内容，即为刚刚所浏览的知乎回答及相关的许多信息，例如回答id、内容、问题id、作者id、作者名等等，如下：</p><p><img src="https://jyzhu.top/mydocs/2020/05/image-20200418210405745.png" /></p><p>抓到json内容如下：</p><p> {<br />  &quot;id&quot;: 1162030612,<br />  &quot;type&quot;: &quot;answer&quot;,<br />  &quot;answer_type&quot;: &quot;normal&quot;,<br />  &quot;question&quot;: {<br />  &quot;type&quot;: &quot;question&quot;,<br />  &quot;id&quot;: 388669115,<br />  &quot;title&quot;: &quot;4月18号美国新冠肺炎确诊病例达70万，死亡人数到达36721人，美国还会坚持复工么？&quot;,<br />  &quot;question_type&quot;: &quot;normal&quot;,<br />  &quot;created&quot;: 1587163853,<br />  &quot;updated_time&quot;: 1587184466,<br />  &quot;url&quot;: &quot;https://api.zhihu.com/questions/388669115&quot;,<br />  &quot;admin_closed_comment&quot;: false,<br />  &quot;relationship&quot;: {},<br />  &quot;mute_info&quot;: {<br />  &quot;type&quot;: &quot;&quot;<br />  }<br />  },<br />  &quot;author&quot;: {<br />  &quot;id&quot;: &quot;e4a0b00c8c04bc16c0fed1563f1a0444&quot;,<br />  &quot;url_token&quot;: &quot;liu-xue-sheng-ri-bao&quot;,<br />  &quot;name&quot;: &quot;留学生日报&quot;,<br />  &quot;avatar_url&quot;: &quot;https://pic2.zhimg.com/v2-825f782641b2bda1317f444f9fa09691_s.jpg&quot;,<br />  &quot;avatar_url_template&quot;: &quot;https://pic2.zhimg.com/v2-825f782641b2bda1317f444f9fa09691_{size}.jpg&quot;,<br />  &quot;is_org&quot;: true,<br />  &quot;type&quot;: &quot;people&quot;,<br />  &quot;url&quot;: &quot;https://api.zhihu.com/people/e4a0b00c8c04bc16c0fed1563f1a0444&quot;,<br />  &quot;user_type&quot;: &quot;organization&quot;,<br />  &quot;headline&quot;: &quot;百万中国留学生都在关注&quot;,<br />  &quot;badge&quot;: [{<br />  &quot;type&quot;: &quot;identity&quot;,<br />  &quot;description&quot;: &quot;已认证的官方帐号&quot;,<br />  &quot;topics&quot;: []<br />  }],<br />  &quot;gender&quot;: -1,<br />  &quot;is_advertiser&quot;: false,<br />  &quot;is_followed&quot;: false,<br />  &quot;is_privacy&quot;: false<br />  },<br />  &quot;url&quot;: &quot;https://api.zhihu.com/answers/1162030612&quot;,<br />  &quot;thumbnail&quot;: &quot;https://pic1.zhimg.com/50/v2-a43e1cad6d10fb88bc31af266b018783_xl.jpg&quot;,<br />  &quot;is_collapsed&quot;: false,<br />  &quot;is_copyable&quot;: false,<br />  &quot;voteup_count&quot;: 5879,<br />  &quot;comment_count&quot;: 424,<br />  &quot;thanks_count&quot;: 480,<br />  &quot;is_mine&quot;: false,<br />  &quot;admin_closed_comment&quot;: false,<br />  &quot;comment_permission&quot;: &quot;all&quot;,<br />  &quot;can_comment&quot;: {<br />  &quot;reason&quot;: &quot;&quot;,<br />  &quot;status&quot;: true<br />  },<br />  &quot;has_publishing_draft&quot;: false,<br />  &quot;editable_content&quot;: &quot;&quot;,<br />  &quot;excerpt&quot;: &quot;我来了。我是芳芳·菲克纽斯 。 这是我的美国疫情日记 第十七篇 《特朗普带血的复工，各州长反水，美国民众持枪上街抗议》 看日记全集的在这里芳芳美国疫情日记汇总 目前更新到第十六篇 ——— 当雪崩发生时，每一篇雪花都在勇闯天涯。 在过去的四周中，一共有2200万美国人失业 越来越多的美国城市，很多手停口停的普通白人民众不戴任何防护措施持枪走上街头，举着声援特朗普的口号，开始示威游行，要求复工。 [图片] [图片] [图片] [图片] 4月30日，特…&quot;,<br />  &quot;relevant_info&quot;: {<br />  &quot;is_relevant&quot;: false,<br />  &quot;relevant_type&quot;: &quot;&quot;,<br />  &quot;relevant_text&quot;: &quot;&quot;<br />  },<br />  &quot;suggest_edit&quot;: {<br />  &quot;reason&quot;: &quot;&quot;,<br />  &quot;status&quot;: false,<br />  &quot;tip&quot;: &quot;&quot;,<br />  &quot;title&quot;: &quot;&quot;,<br />  &quot;unnormal_details&quot;: {<br />  &quot;status&quot;: &quot;&quot;,<br />  &quot;description&quot;: &quot;&quot;,<br />  &quot;reason&quot;: &quot;&quot;,<br />  &quot;reason_id&quot;: 0,<br />  &quot;note&quot;: &quot;&quot;<br />  },<br />  &quot;url&quot;: &quot;&quot;<br />  },<br />  &quot;attached_info&quot;: &quot;ogEQCAQQAxiU3IyqBCC7vaq5AQ==&quot;,<br />  &quot;mcn_fp_show&quot;: -1,<br />  &quot;reward_info&quot;: {<br />  &quot;can_open_reward&quot;: false,<br />  &quot;is_rewardable&quot;: false,<br />  &quot;reward_member_count&quot;: 0,<br />  &quot;reward_total_money&quot;: 0,<br />  &quot;tagline&quot;: &quot;&quot;<br />  },<br />  &quot;relationship&quot;: {<br />  &quot;is_thanked&quot;: false,<br />  &quot;upvoted_followees&quot;: []<br />  },<br />  &quot;ad_answer&quot;: null<br /> }</p><p>抓包知乎app成功！</p><h1 id="尝试tcpdump抓包微信">2. 尝试tcpdump抓包微信</h1><h3 id="获取自己手机的udid">1.获取自己手机的udid</h3><p>使用数据线将iPhone与Mac连接，找到iPhone的UDID</p><h3 id="打开mac终端将udid添加到rvictl命令中">2.打开mac终端，将udid添加到rvictl命令中</h3><p><code>rvictl -s udid</code></p><h3 id="tcpdump运行抓包命令实施监控">3.tcpdump运行抓包命令实施监控</h3><p><code>sudo tcpdump -i rvi0 -AAl</code></p><p>找到微信相关的包含weixin WeChat等等关键字</p><p>看不懂了……</p><h3 id="将自己的设备从rvictl移除">4.将自己的设备从rvictl移除</h3><p> rvictl -x UUID</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles </tag>
            
            <tag> tcpdump </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why isn&#39;t there automatic crawler?</title>
      <link href="/blog/why-isnt-there-automatic-crawler/"/>
      <url>/blog/why-isnt-there-automatic-crawler/</url>
      
        <content type="html"><![CDATA[<p>初中的时候常感慨，为什么没人写个中文的编程语言，那得减少多少学习成本，造福多少人。现在感觉到，不是中文编程语言难，是真没必要，入行编程的人不差这点英语水平。</p><p>最近我又常感慨，为什么没人写个自动生成爬虫代码的应用，那得减少多少重复劳动，造福多少人。再一想，那可能也没必要，有那水平的人也不搞爬虫</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>童年</title>
      <link href="/blog/%E7%AB%A5%E5%B9%B4/"/>
      <url>/blog/%E7%AB%A5%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>外婆家门口的水井<br />沿着垃圾堆下山<br />可以走到一条小河边<br />河对岸有杀猪厂<br />我仿佛记得惨叫的声音<br />垃圾小山有一个山洞<br />从洞口钻进 可以从另一个稍小的洞口钻出<br />洞里有很多人的粪便 和苍蝇<br />我记得许多的垃圾 被挑拣进去<br />那里一定曾经住着一个人 以垃圾为生<br />我忘了我是否真见过那人 兴许没有<br />我将那人写进了高中时期的作文里<br />被老师批：没有意义<br />写作文需要升华出一些意义来 否则就是故事<br />何况你还把垃圾山写得绘声绘色 很恶心<br />我想念童年了 尽管它们是那么没有知觉<br />我也没有知觉<br />重复的前进的路上 我只着眼于特定的方向<br />当我在党校里运球<br />我丝毫不在意荆棘林深处的桑树<br />桑树 我去摘过一次桑叶 或者几次<br />用来养蚕 养了一鞋盒<br />我还养过一鞋盒蜗牛<br />从外公的盆栽里摘的一群蜗牛<br />第二天它们就全爬不见了 在书房里<br />我不敢声张 把鞋盒处理掉了<br />啊 养的那一盒蚕也在书房里<br />结了蛹 再打开鞋盒的时候<br />噼里啪啦飞出来一堆<br />把我吓坏了 从此不再养蚕<br />还有陀螺 带有打火石的那种<br />撞到墙壁上会溅起火花<br />我跟邻居小男孩一起抓蚂蚁🐜<br />放进陀螺盘里 被抛下的陀螺弹得飞开<br />我观察过蚂蚁 从一道地缝里钻进去<br />又从哪一道缝钻出来<br />我试过往里灌水 无果<br />小学的午休我不愿睡觉<br />带着外公的放大镜<br />去教室里 烧纸玩<br />正午的阳光对焦到一个点上 可以把纸烧冒烟<br />烧出许多个黑色的洞来<br />后来围了太多人 被老师发现<br />没收了放大镜<br />我又去全场两元折扣店买了一个<br />那个煤老板的邋遢的儿子<br />见我捣鼓一个魔方<br />放学路上他跟我说<br />给你钱 你多买两个玩<br />我至今不解这是为什么<br />我说不用 我自己已有了魔方<br />当我照着网上的教程 学会了复原魔方<br />我记下那几个公式 在班上开课教学<br />那是午休的时候 我跟大家说：提前半小时来教室<br />踊跃来了一些人 没有人真的在学<br />我没教会任何人 直到初中 是另一些故事<br />还有妈妈给我买的遥控直升机🚁<br />我飞了两次 不会控制 怕撞坏了<br />放在书柜上成为令我骄傲的摆件<br />又被我遗忘<br />还有那个讨厌的邻居女孩<br />把我压在地上 脚踩在我胸口 叫我求饶<br />我不敢跟大人说起这件事<br />我觉得只是小事<br />也真的被我忘掉<br />邻居家小男孩很聪明<br />象棋五子棋军旗 跟他下没意思<br />我们一起玩4399双人小游戏<br />拳皇<br />我的耍无赖哈多尅隆 师承他<br />后来他搬回了乡下 听说是一个满是黄色的泥巴的地方<br />在那边他会学会爬树吗 我总在想<br />我再也没有见过他<br />他长得有点不好看 他适合长得帅帅的 我想<br />一条蛇 我在外婆家的墙上见过<br />放学回家的路上 爬完长长的上坡<br />我欲扶墙喘气的时候 差点按在上面<br />一条青色的 有点细的蛇<br />吓坏我了<br />外婆家背后 通往烈士陵园的路上<br />有一个小山坡 我们不会爬树的孩子<br />也就会爬小坡了<br />翻下去翻上来 下面有一个老体育馆废弃的茅厕<br />满是白色的蛆 我见过一次 在门上 我跑了<br />蛆 有一个暴雨的早上<br />那是我刚开始独自上学的时候<br />路上发现一只奄奄一息的雏鸟<br />被暴雨从树上高高的鸟巢打下来<br />湿透了 嘴一张一合<br />我捡起鸟 飞奔回家<br />安顿在小椅子的柱子的空洞里<br />我不敢告诉大人 因为那天我迟到了<br />那时我太小了 转瞬把小鸟给忘掉<br />真的忘掉 直到书房里弥漫着一股腐臭味<br />外婆说：死老鼠了<br />我吓坏了 才想起那只可怜的小鸟<br />它腐坏了 生出一些白色的蛆<br />外婆连带着把小椅子丢掉了<br />我对不起它 从小到大<br />从那天起<br />我已不是我在活着了</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anything</title>
      <link href="/blog/anything/"/>
      <url>/blog/anything/</url>
      
        <content type="html"><![CDATA[<p>一切的风请吹向我<br />一切远山的细节请吹向我<br />一切的季节请穿过我<br />一切微醺和酩酊请穿过我<br />一切的沉默请指涉我<br />一切绵软无力的诗请指涉我<br />一切的纪念请忘却我<br />还请你远远地凝视我</p><p>—— 20.3.9 ​​​</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圈养的命运</title>
      <link href="/blog/%E5%9C%88%E5%85%BB%E7%9A%84%E5%91%BD%E8%BF%90/"/>
      <url>/blog/%E5%9C%88%E5%85%BB%E7%9A%84%E5%91%BD%E8%BF%90/</url>
      
        <content type="html"><![CDATA[<p>鸭窠围的小羊羔，<br />永远活在临过年的夜里。<br />它的鸣叫声我时时刻刻听到，<br />使我联想到我那些夜里的歌唱。</p><p>“小畜生明不明白 只能在这个世界上活过十天八天？<br />明白也罢， 不明白也罢，<br />这小畜生是为了过年而赶来，<br />应在这个地方死去的。”</p><p>这小畜生是应在这个地方死去的，<br />死去，被吃掉，为了过年。<br />它明不明白<br />我在夜里固执而温柔地唱的那些，<br />和它鸣着的那些是一样的？<br />年轻气盛时候被宰来吃掉的肉猪，<br />只是为了吃掉而已，<br />宠物狗锦衣玉食地活着，<br />永远是主人的财产，<br />我在唱着的也正是<br />人活着被另一些人圈养的命运。</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020一月感想：有关人性</title>
      <link href="/blog/2020%E4%B8%80%E6%9C%88%E6%84%9F%E6%83%B3%EF%BC%9A%E6%9C%89%E5%85%B3%E4%BA%BA%E6%80%A7/"/>
      <url>/blog/2020%E4%B8%80%E6%9C%88%E6%84%9F%E6%83%B3%EF%BC%9A%E6%9C%89%E5%85%B3%E4%BA%BA%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>• 人性有弱点，可是人性有光辉。我现在觉得有必要守护那些光辉，甚至奉献。</p><p>• 小时候我无脑善良，后来我无限不相信善良，到现阶段我选择善良。我没想到我能做到。</p><p>• 保持愤怒是好的。年轻人，就是对这个社会愤怒，凭什么要我跟它和解，错的又不是我。</p><p>• 最近是有点深入地体会到苦难了，真的一下子改变很多。过去那种观望心态，只是还没遇上事儿。我根本无法说服自己去看淡别人的苦痛。</p><p>• 武汉，真的很近。那些鲜血淋漓的个人的故事会让我在深夜里哭。家人也有令人担忧的情况。作为普通人，真的很无力。毫无疑问我站people，毫无疑问我选择文明。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>独处的夜晚</title>
      <link href="/blog/alone-night/"/>
      <url>/blog/alone-night/</url>
      
        <content type="html"><![CDATA[<p>尽管如此，<br />尽管天底缝满了伤口撕裂的声音，<br />乱石上裂开着无力的祷告，<br />寂寥的文化被咒骂的唾沫切开。</p><p>尽管活着像一场手术，<br />世界像手术台，<br />语言只不过是麻醉剂，<br />尽管如此。</p><p>尽管如此，<br />你从腐烂的肠子里钻出来，<br />照样要面对旋转的，<br />数不尽的星星啊。</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>雪</title>
      <link href="/blog/%E9%9B%AA/"/>
      <url>/blog/%E9%9B%AA/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://jyzhu.top/mydocs/2020/01/IMG_8505.jpg" alt="snow-pic" /><figcaption>snow-pic</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>摘 Annie Hall</title>
      <link href="/blog/%E6%91%98-annie-hall/"/>
      <url>/blog/%E6%91%98-annie-hall/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Touch my heart... With your foot.</p></li><li>Hey, listen. Give me a kiss.</li><li>That was the most fun I've ever had without laughing.</li><li>Love is... too weak a word for... the way I feel. I lurve you. You know. I loave you. I luff you. With two Fs. Yes, I have to invent...</li><li><p>I know. A relationship, I think, is like a shark. It has to constantly move forward, or it dies. And I think what we got on our hands is a dead shark.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>悲观是我的一根病骨</title>
      <link href="/blog/%E6%82%B2%E8%A7%82%E6%98%AF%E6%88%91%E7%9A%84%E4%B8%80%E6%A0%B9%E7%97%85%E9%AA%A8/"/>
      <url>/blog/%E6%82%B2%E8%A7%82%E6%98%AF%E6%88%91%E7%9A%84%E4%B8%80%E6%A0%B9%E7%97%85%E9%AA%A8/</url>
      
        <content type="html"><![CDATA[<p>悲观是我的一根病骨<br />在凛冽的一生中不胜侵扰</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>可我仍然在谈论爱</title>
      <link href="/blog/%E5%8F%AF%E6%88%91%E4%BB%8D%E7%84%B6%E5%9C%A8%E8%B0%88%E8%AE%BA%E7%88%B1/"/>
      <url>/blog/%E5%8F%AF%E6%88%91%E4%BB%8D%E7%84%B6%E5%9C%A8%E8%B0%88%E8%AE%BA%E7%88%B1/</url>
      
        <content type="html"><![CDATA[<p>我们谈论过了爱，<br />我们做爱，<br />我们表达爱，<br />我们相爱，<br />可我仍然不相信爱。</p><p>我仍然防备所谓爱，<br />可我仍然奉爱为信仰，<br />我侍奉以浪荡，<br />我全心全意地<br />剖开鲜血的肉，<br />可我仍然没有见到爱。</p><p>我仍然不见爱，<br />可我仍然在谈论爱，<br />我推翻爱，<br />重塑以情与欲，<br />我贬损爱，掷进心里的淤泥。<br />可我仍然在等待爱。</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一月随想</title>
      <link href="/blog/thoughts-in-jan/"/>
      <url>/blog/thoughts-in-jan/</url>
      
        <content type="html"><![CDATA[<p>还说什么国家政治这种东西的存在就是为了每一个普通人的福祉，可是战争斗争这些东西哪里是每个普通人的愿景。人类社会现在这种局面不就是乱七八糟的嘛，非常庞大的矛盾跟谎话。</p><p>他们不是口口声声说民主嘛，说总统是一人一票选出来的，代表大众的利益跟选择。我们这边也是……这么说的。果真如此的话，政治的事根本不应该受某个人个人风格所影响。但现在显然是。所以根本不民主，根本不那么正当。就是说整个制度都不咋地，这就是我说的矛盾跟谎话。</p><p>当然我也想不出来更好的制度，不然也早有人想出来了。现阶段也就只能这样。但是很惨淡就是了，大家都活在不咋地的现实社会里。比封建好点[呲牙]</p><p>我觉得我这个思路也不算负能量，它能让我们更积极地看待自己，就是说遇到很多矛盾挫折的时候，知道其实并不归咎于自己。这样反而更洒脱。</p><p>「不用跟自己和解，都怪社会。」</p><p>我已经初步拥有后现代嬉皮精神了[呲牙]</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>让我们赞美一个冬天</title>
      <link href="/blog/winter-praise/"/>
      <url>/blog/winter-praise/</url>
      
        <content type="html"><![CDATA[<p>一</p><p>一切就绪，<br />天空熄灭，<br />一颗金星胆怯地接近月亮。</p><p>雪下了，<br />丝丝入扣，<br />反光的大地上<br />她发着光亮。</p><p>二</p><p>一位怀疑主义者，<br />偏信了一场雪，<br />继而偏信<br />世界停靠的港湾，<br />偏信一对望眼中<br />露怯的命运。</p><p>三</p><p>让我们赞美这个冬天，<br />让穿着白色礼服的孩童<br />高歌你与我。</p><p>20.1.7</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二零二零</title>
      <link href="/blog/2020/"/>
      <url>/blog/2020/</url>
      
        <content type="html"><![CDATA[<p>为什么人们不能更成熟而绝望一些<br />为什么总有那些天真的眼光<br />仪式感和意义都是人类的谎言吗<br />一如那些水面的月亮<br />我的路会通往哪里呢<br />我的画会画成什么样<br />银河吗 一张床吗<br />神的模样吗 跳舞的小人吗<br />在每一个年与年之交<br />我用我空洞的眼神展望</p><p>19.12.31</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020给三嗨</title>
      <link href="/blog/2020%E7%BB%99%E4%B8%89%E5%97%A8/"/>
      <url>/blog/2020%E7%BB%99%E4%B8%89%E5%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="说说过去两年和三嗨的故事最难忘的事">1.说说过去两年和三嗨的故事/最难忘的事</h2><p>一转眼公众号「三嗨」已经创立两年有余。我特地去回顾了一遍推送，72篇，居然也是个丰硕的数字了。这么久了，「三嗨」仍然在定位不明的路上走着，从某种程度上来说倒跟我的这两年轨迹一样，「千回百转自彷徨」。</p><p>遗憾的是一些变化：一是，众嗨坚持在这里写下去的，似乎只剩我一个了。（「坚持」这个词也暗含辛酸。）大家专业各异，都很忙，写下来一篇聊以自慰式长文，（又不赚稿费，）实在不易。另一是，我个人来说，愈发浮躁，静下心来读书明显变少了，长篇论述或表达的欲望也是渐少。从这个意义上来说，「三嗨」的初衷是美好而前瞻的，可是如今形势是危如累卵的。</p><p>但也有一些值得骄傲跟感动的：一是众嗨的奇妙缘分，大家共同热闹地表达或是表达过，这是「三嗨」的本质。另一是这么久了，「三嗨」还活着，偶尔会有新来的朋友投稿，也竟然一直有忠实读者催更。这是「三嗨」的意义。</p><p>怎么讲呢，「三嗨」的路到哪里，我的路到哪里，我一概不知。2020继续边走边嗨吧。</p><h2 id="新年有什么愿望">2.新年有什么愿望</h2><p>我没什么仪式感，新年好像不会给我猛地增加什么勇气跟信心，所以立不起来什么flag。连年累月地压力倍增，无意义感又不减，只是用空洞的眼神展望新年罢了。尽管如此，我也有一些超过我自身的，永恒的愿望。新年愿望便是：全家人都开心且健康。</p><h2 id="对大家的祝福">3.对大家的祝福</h2><p>衷心地祝愿大家：嗨。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三嗨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枯叶</title>
      <link href="/blog/kuye/"/>
      <url>/blog/kuye/</url>
      
        <content type="html"><![CDATA[<p>一片枯叶<br />钻进了我晾在阳台的卫衣衣袖<br />是谁叫你到这里来，我的朋友？<br />是我的命运<br />还是你的命运？</p><p>19.12.20</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你拯救我，从我那将熄未熄的夜晚</title>
      <link href="/blog/you-saved-me/"/>
      <url>/blog/you-saved-me/</url>
      
        <content type="html"><![CDATA[<p>你拯救我<br />从我那将熄未熄的夜晚<br />你带来光，眼泪<br />和漫长的祷告<br />当外面的一切在悄悄地结霜<br />你跟我碰杯了一杯可乐<br />我一直以来<br />甘愿做一个虔诚的人</p><p>19.12.17</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十二月随想两则</title>
      <link href="/blog/%E5%8D%81%E4%BA%8C%E6%9C%88%E9%9A%8F%E6%83%B3%E4%B8%A4%E5%88%99/"/>
      <url>/blog/%E5%8D%81%E4%BA%8C%E6%9C%88%E9%9A%8F%E6%83%B3%E4%B8%A4%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一">一</h2><p>屁话：「读书多让人变得有趣。」</p><p>有趣是读书本身带给人的一种体验，读多了又不会让你变得更像一本书，人怎么变得有趣？<br />要真拿书里所谓高级趣味跟人聊天，人群中你就是最冷那一位。阳春白雪曲高和寡，低级趣味才是趣味的普世形态。</p><p>跟人聊天要是这么聊，两个人聊得火热，聊到灵魂贯穿，最后聊到把人家在心里供奉起来……传说举案齐眉相敬如宾的夫妻生活和谐无比，我以为了无生趣。</p><p>要破除对高级趣味的信仰，要用低级趣味丰盈自己，光读书是不能让人变得有趣的。</p><h2 id="二">二</h2><p>每当听到同龄人说出那种得体的场面话，我都一阵悚然。虽然是到了那样的年龄了，逐渐熟稔成人世界的运作规则，这种类似规则还有很多，除了虚伪不由衷倒也无伤大雅。但是这类虚伪令我本能抗拒，要说长大有什么不好，必须参与这一套规则中算是首当其冲了。 ​​​</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无声的花园</title>
      <link href="/blog/%E6%97%A0%E5%A3%B0%E7%9A%84%E8%8A%B1%E5%9B%AD/"/>
      <url>/blog/%E6%97%A0%E5%A3%B0%E7%9A%84%E8%8A%B1%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p>我在久陷的沼泽地里<br />发现一株花，<br />当我把我奉献给一段沉沦<br />不知道多少回<br />我挣扎，她也挣扎<br />如今我闻着她颤抖的香气<br />在一部分我与另一部分之间<br />我开设无声的花园<br />19.12.12 午夜</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>真相，永恒的痛苦</title>
      <link href="/blog/%E7%9C%9F%E7%9B%B8%EF%BC%8C%E6%B0%B8%E6%81%92%E7%9A%84%E7%97%9B%E8%8B%A6/"/>
      <url>/blog/%E7%9C%9F%E7%9B%B8%EF%BC%8C%E6%B0%B8%E6%81%92%E7%9A%84%E7%97%9B%E8%8B%A6/</url>
      
        <content type="html"><![CDATA[<p>为什么活着<br />为什么选择活着<br />为什么心甘情愿地选择活着？<br />因为好奇真相。</p><p>因为好奇真相而活着，<br />因为满足好奇而快乐，<br />因为真理本身而欣喜若狂。<br />「朝闻道，夕死可矣。」</p><p>因为一点一点地接近真相而一天一天地活着，<br />因为永远只能趋近真相<br />无法看到真相本身而痛苦。<br />因为真相活着也因为真相痛苦。<br />因为活着而痛苦。<br />因为永恒而痛苦。<br />生的痛苦。<br />永恒的痛苦。</p><p>19.12.6</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>麻木的齿轮</title>
      <link href="/blog/%E9%BA%BB%E6%9C%A8%E7%9A%84%E9%BD%BF%E8%BD%AE/"/>
      <url>/blog/%E9%BA%BB%E6%9C%A8%E7%9A%84%E9%BD%BF%E8%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>绝望 绝望<br />没有爱 没有生活<br />我是半锈不锈的齿轮<br />背负一整个旧机器的压力<br />一边怕死一边奔向死<br />一边奔向死一边试图挣脱死<br />我是生跟死的矛盾<br />可惜微不足道<br />我的振臂高呼比不过任何一个人的振臂高呼<br />此刻有千千万万个朋友正在声嘶力竭<br />没有用<br />没有退路<br />就这么走着<br />要么麻木<br />要么从哪天开始<br />没有明天</p><p>19.11.28</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用Charles抓包了一下学校跑步app，发现还挺简单，准备破一下？</title>
      <link href="/blog/charles-sport-app/"/>
      <url>/blog/charles-sport-app/</url>
      
        <content type="html"><![CDATA[<p>今天骑自行车的时候想要不顺道打开北理体育刷一刷，刷着刷着想起前几天北大因为跑步数据作弊体育挂科门，心生惶恐，开始拿起手机晃。晃着晃着觉得自己很sb为什么要把时间花在这破事上……一气之下回宿舍决定抓包看看能不能破掉。拿Charles抓包看了看发现原理就是定期post，防黑约等于没有……</p><p>流程：</p><ol type="1"><li>POST startRaceRecord.do 向那边表示开始跑步，那边返回一个本次跑步id</li><li>不停POST addRaceRecordGPS.do 向那边发送跑步速度、步数，经纬度</li><li>POST endRaceRecord.do 结束记录，其中包含了本次跑步的id</li></ol><p>识别：</p><ol type="1"><li>每次跑步有一个独立的token和一个id</li></ol><p>具体params：</p><ol type="1"><li>startRaceRecord.do：设备信息：系统、分辨率、app版本、设备名、机型、sdk</li><li>addRaceRecordGPS.do:1~4条一起发一次：速度、经度、纬度、跑步id、时间戳、总步数、总距离、总时长</li><li>endRaceRecord.do:跑步id</li></ol><p>具体content：</p><p>startRaceRecord.do:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /front/raceRecord/1.0/startRaceRecord.do HTTP/1.1</span><br><span class="line">Host: sport-appapi.bit.edu.cn</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: */*</span><br><span class="line">User-Agent: run/1.6.51 (iPhone; iOS 13.1.2; Scale/3.00)</span><br><span class="line">Accept-Language: zh-Hans-CN;q=1, en-CN;q=0.9, ko-KR;q=0.8</span><br><span class="line">Content-Length: 527</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">  &quot;deviceInfo&quot; : &#123;</span><br><span class="line">    &quot;os&quot; : &quot;iOS&quot;,</span><br><span class="line">    &quot;display&quot; : &quot;1125x2436&quot;,</span><br><span class="line">    &quot;appVersion&quot; : &quot;1.6.51&quot;,</span><br><span class="line">    &quot;deviceName&quot; : &quot;我也不认识加缪&quot;,</span><br><span class="line">    &quot;model&quot; : &quot;iPhone12,5&quot;,</span><br><span class="line">    &quot;appType&quot; : &quot;iPhone&quot;,</span><br><span class="line">    &quot;sdk&quot; : &quot;13.1.2&quot;</span><br><span class="line">  &#125;&amp;token=49FC62464801779D40B4A4505096CF52E37F</span><br></pre></td></tr></table></figure><p>addRaceRecordGPS.do:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">POST /front/raceRecord/1.0/addRaceRecordGPS.do HTTP/1.1</span><br><span class="line">Host: sport-appapi.bit.edu.cn</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: */*</span><br><span class="line">User-Agent: run/1.6.51 (iPhone; iOS 13.1.2; Scale/3.00)</span><br><span class="line">Accept-Language: zh-Hans-CN;q=1, en-CN;q=0.9, ko-KR;q=0.8</span><br><span class="line">Content-Length: 1373</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"></span><br><span class="line">params=[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;speed&quot; : 524,</span><br><span class="line">    &quot;longitude&quot; : &quot;116.169566&quot;,</span><br><span class="line">    &quot;raceRecordId&quot; : &quot;173661&quot;,</span><br><span class="line">    &quot;raceTimestamp&quot; : &quot;1574152129077&quot;,</span><br><span class="line">    &quot;totalStep&quot; : 40,</span><br><span class="line">    &quot;totalDistance&quot; : 581,</span><br><span class="line">    &quot;latitude&quot; : &quot;39.725749&quot;,</span><br><span class="line">    &quot;totalTime&quot; : 541</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;speed&quot; : 604,</span><br><span class="line">    &quot;longitude&quot; : &quot;116.169561&quot;,</span><br><span class="line">    &quot;raceRecordId&quot; : &quot;173661&quot;,</span><br><span class="line">    &quot;raceTimestamp&quot; : &quot;1574152135049&quot;,</span><br><span class="line">    &quot;totalStep&quot; : 40,</span><br><span class="line">    &quot;totalDistance&quot; : 591,</span><br><span class="line">    &quot;latitude&quot; : &quot;39.725668&quot;,</span><br><span class="line">    &quot;totalTime&quot; : 547</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;speed&quot; : 312,</span><br><span class="line">    &quot;longitude&quot; : &quot;116.169594&quot;,</span><br><span class="line">    &quot;raceRecordId&quot; : &quot;173661&quot;,</span><br><span class="line">    &quot;raceTimestamp&quot; : &quot;1574152141098&quot;,</span><br><span class="line">    &quot;totalStep&quot; : 40,</span><br><span class="line">    &quot;totalDistance&quot; : 610,</span><br><span class="line">    &quot;latitude&quot; : &quot;39.725825&quot;,</span><br><span class="line">    &quot;totalTime&quot; : 553</span><br><span class="line">  &#125;</span><br><span class="line">]&amp;token=49FC62464801779D40B4A4505096CF52E37F</span><br></pre></td></tr></table></figure><p>endRaceRecord.do:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /front/raceRecord/1.0/endRaceRecord.do HTTP/1.1</span><br><span class="line">Host: sport-appapi.bit.edu.cn</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept: */*</span><br><span class="line">User-Agent: run/1.6.51 (iPhone; iOS 13.1.2; Scale/3.00)</span><br><span class="line">Accept-Language: zh-Hans-CN;q=1, en-CN;q=0.9, ko-KR;q=0.8</span><br><span class="line">Content-Length: 62</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"></span><br><span class="line">raceRecordId=173661&amp;token=49FC62464801779D40B4A4505096CF52E37F</span><br></pre></td></tr></table></figure><h2 id="section">🤔</h2><p>start和end都不用管……从start拿到token和id之后，就可以直接配置gps各参数，然后发过去了……</p><p>关键是跑步数据要符合实际……最大的危机是拿自己号尝试会不会被挂科……</p><p>绝了 之前的跑步参数全都记录在里面，可以get…… 那就更好办了 稍微改动改动就行</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter notebook会导致Charles无法用</title>
      <link href="/blog/jupyter-notebook%E4%BC%9A%E5%AF%BC%E8%87%B4charles%E6%97%A0%E6%B3%95%E7%94%A8/"/>
      <url>/blog/jupyter-notebook%E4%BC%9A%E5%AF%BC%E8%87%B4charles%E6%97%A0%E6%B3%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>真的见鬼了，谁能想到我搜肠刮肚思考Charles为啥哪哪都是404，关了v2ray，关了Chrome的科学上网插件，关了系统vpn的自动配置，到处弄遍了，最后发现导致Charles不能用的是：</p><h2 id="jupyter">Jupyter！！！</h2><p>去看了一下原因……</p><p>真没注意Jupyter的默认端口和Charles一样，都是8888，你说巧不巧！？</p><p>以后看到8888一定要留个心眼……</p><p>也怪我没有早点去看一下端口占用情况。唉。</p><p>我打算用Charles抓包一下北理体育看看能不能破一破🌚</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态网站发布-我终于把网页设计课做的「指尖星空」网站弄上来了</title>
      <link href="/blog/static-website-posted/"/>
      <url>/blog/static-website-posted/</url>
      
        <content type="html"><![CDATA[<p>了解了一点点Nginx之后，我发现可以利用二级目录，随便把一些静态网站弄到服务器上来。大一跟几个小组同学在网页设计课一起撸的「指尖星空」网站终于可以拨云见日了——</p><p><a href="https://jyzhu.top/fingerspace/">指尖星空 https://jyzhu.top/fingerspace/</a></p><p>其实很简单，只要把整个静态网站用scp传到Ubuntu服务器上，然后在Nginx配置一下子目录的跳转就好了。</p><p>记录一下Nginx的配置吧，因为缺少系统的理解，我在这里绕了半天圈，看了一篇《<a href="https://www.cnblogs.com/kevingrace/p/6187482.html">Nginx虚拟目录alias和root目录</a>》才理解此处应该设置alias。</p><p>编辑配置文件：<code>/etc/nginx/conf.d/wordpress_https.conf</code></p><p>插入配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /fingerspace &#123;</span><br><span class="line">alias /var/www/html/fingerspace/;</span><br><span class="line">index index.html;</span><br><span class="line">try_files $uri @rewriteweb;</span><br><span class="line">&#125;</span><br><span class="line">location @rewriteweb&#123;</span><br><span class="line">rewrite ^/fingerspace/(.*)$ /fingerspace/index.html last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搞定。</p><p>今后自己做点啥项目了可以搞一些网页接口在这儿，指日可待~</p><p>目前还有两个TO-DO：</p><ol type="1"><li>指尖星空的网页图标显示不了，不知道是html里面出了问题，还是需要在Nginx里配置？</li><li>images文件也太大了，心疼我的小小服务器</li></ol><p>此处要感谢网页设计课的小组成员们。这里有<a href="https://jyzhu.top/fingerspace/html/%E4%BB%8B%E7%BB%8D%E7%BD%91%E9%A1%B5.html">我们的介绍</a>哈哈哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Nginx </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于可以被Google和Baidu搜索到了！</title>
      <link href="/blog/got-into-google-baidu-by-seo/"/>
      <url>/blog/got-into-google-baidu-by-seo/</url>
      
        <content type="html"><![CDATA[<p>太高兴了！糊里糊涂地搞了一堆SEO，我终于也出现在表层互联网世界了！</p><p>不过我到现在也搞不明白到底怎样做优化才是正确的，反正就是乱弄了一通，也没有什么精力……</p><p>不过也没关系……反正我的内容迄今为止也挺杂乱和没有干货的，整个网站好像也没什么价值。</p><p>搜「jyzhu.top」和「tianke youke」都可以搜到，虽然惨兮兮只被收录了域名和网站标题……但已经很不容易了……</p><p>Google显然比Baidu大度多了，还把我的各种归档给收录进去了~~~</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Every Day I Plan</title>
      <link href="/blog/every-day-i-plan/"/>
      <url>/blog/every-day-i-plan/</url>
      
        <content type="html"><![CDATA[<p>Recently I am really tired. I got tooo much to do, that I couldn't finish. And my mental as well as physical health status is just in danger. I am always tired, exhausted, losing my hair, eager to sleep. Sometimes I couldn't do anything, but most of the time I just buried myself into the task in my hands, thinking of nothing. I don't dare to think too much. Because there's always a question hanging there, that is, what's the meaning of all of this? Why on earth am I worried about my TOEFL? Why do I try my best to learn, to do everything? What do these things targeting? A success? Some happiness? What is a success? Is there any happiness?</p><p>I don't dare to ask. Not only because I do believe that there's no answer, but also because all of my intimates just told me to not bother myself thinking of these useless things. But I have another question here: if these questions don't have answers, then aren't those trivial problems in daily life truly useless?</p><p>Hell. I don't want to talk about them too much. I don't have time. I am trapped in these trivial things, and I just wanna be trapped. It's better than die, isn't it?</p><p>Soooooo, I am gonna set several rules for myself. That's about what to do and how to live:</p><ol type="1"><li>Get up 30 min earlier than routine and go to practice English speaking.</li><li>Get to sleep before 12 every night.</li><li>Definition of Things during Rest Time:<ol type="1"><li>Reading books. (Recommendation: ⭐️⭐️⭐️⭐️⭐️)</li><li>Sleeping. (⭐️⭐️⭐️⭐️⭐️)</li><li>Listen to English podcasts. (⭐️⭐️⭐️⭐️)</li><li>Coding. (⭐️⭐️⭐️⭐️)</li><li>Writing here. (⭐️⭐️⭐️)</li></ol></li><li>Definition of Rest Time:<ol type="1"><li>After the sunsets and there's no homework that must be done.</li><li>Naptime in the noon.</li><li>Weekends after finishing homework.</li></ol></li><li>Daily Tasks to choose from (2 out of 6):<ol type="1"><li>Running.</li><li>Learning vocabulary.</li><li>Listening to English.</li><li>TOEFL Tests.</li><li>Reviewing courses.</li><li>Learning extra computer knowledge.</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rubiks-Cube-Recover-Bot 魔方复原机器人</title>
      <link href="/blog/Rubiks-Cube-Recover-Bot-%E9%AD%94%E6%96%B9%E5%A4%8D%E5%8E%9F%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/blog/Rubiks-Cube-Recover-Bot-%E9%AD%94%E6%96%B9%E5%A4%8D%E5%8E%9F%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>A robot to recover Rubik's cube, based on Arduino, using Python combined with Machine Learning and OpenCV.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/PL91mQkZzbg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Thanks to these projects and resources:</p><ul><li>https://github.com/krustnic/RubikKeras</li><li>http://kociemba.org/cube.htm</li><li>https://github.com/g20150120/cubot</li><li>https://github.com/hkociemba/RubiksCube-TwophaseSolver</li></ul><h2 id="software-part">1. Software Part</h2><p>The function of this robot is divided into two parts: <strong>Rubik's cube recognition</strong> and <strong>automatically recover it</strong>.</p><p>The first part focuses on recognizing and solving Rubik's cube, which is mainly written in Python. The second part focuses on controlling the Arduino to move the Rubik's cube, which is written in a <code>.ino</code> Arduino program.</p><p>为实现魔方识别与自动复原，我们将程序主要分为两部分。</p><p>第一部分实现魔方的识别及求解功能，主要用Python编写；第二部分实现控制Arduino驱动步进电机实现转动魔方，主要实现为.ino格式的单个Arduino程序。</p><h3 id="recognizing-and-solve-the-rubiks-cube-魔方识别与求解">1.1. Recognizing and solve the Rubik's cube 魔方识别与求解</h3><p>Written in Python. There are 5 steps:</p><ol type="1"><li>Using Keras to build up a Unet model, and carve up the 6 faces of the Rubik's cube.</li><li>Using OpenCV to parse the colors of the bricks.</li><li>A GUI to show the colors, allowing correcting the color.</li><li>Solving the Rubik's cube via Two-phase algorithm.</li><li>Sending the solution to the Arduino via serial port.</li></ol><p>First, the computer's front camera captures images of every three sides of a Rubik’s cube. The the machine learning program then recognizes the six faces of the Rubik’s cube, with OpenCV to detect the color of each brick and read the HSV value in the image. In real-time, a visualization window outputs colors of 54 bricks on six faces. After obtaining the color data, Herbert Kociemba's two-phase algorithm solves the Rubik's cube. Then, the solution, in the form of a string, is transmitted to the Arduino through the serial port, and the Arduino controls the stepper motor to rotate the Rubik's cube and recover it.</p><p>本部分程序采用Python实现。将魔方识别与求解的步骤更具体地分为五个部分：</p><ol type="1"><li>采用Keras库建立Unet模型，实现从摄像头图像中分割魔方的6个面。感谢<a href="https://github.com/krustnic/RubikKeras">RubikKeras项目</a>提供的模型。</li><li>采用OpenCV，解析魔方块的颜色</li><li>以GUI界面显示魔方色块，提供手工校正魔方色块的功能</li><li>用Two-phase算法求出魔方最优解</li><li>将魔方解以字符串形式通过串口传给Arduino板</li></ol><p>首先通过电脑前置摄像头对魔方的三个面进行图像捕捉，使用机器学习分两次完成对魔方六个面的识别，配合OpenCV对图像中魔方块的颜色进行实时检测并读取HSV值，并输出六个面54块颜色，通过Tkinter做出可视化页面，显示解析结果。获得魔方数据后使用Herbert Kociemba's two-phase algorithm对魔方进行求解，得解后将解以字符串的形式通过串口传给Arduino，Arduino控制步进电机转动魔方将其还原。</p><h3 id="turn-the-cube-using-arduino-用arduino转动魔方">1.2. Turn the cube using Arduino 用Arduino转动魔方</h3><h2 id="hardware-part">2. Hardware Part</h2><ul><li>Arduino MEGA2560</li><li>42 Stepper * 6</li><li>L298N to drive</li></ul><p>The most common stepping motor-- 28BYJ-48 four-phase stepping motor was initially selected. But in the initial test, it was found that its torque was too small to turn the Rubik's Cube, so it was replaced with the 42 stepper motor with greater torque, driven by L298N. Due to the need to drive 6 four-phase stepper motors at the same time, the commonly used Arduino UNO has insufficient digital signal ports, so the Arduino MEGA2560 is used for control.</p><p>步进电机最开始选择了最为常见的28BYJ-48四相步进电机，在最初的测试中发现其扭矩过小，无法转动魔方，于是更换为扭矩更大的42步进电机，通过L298N驱动。由于需要同时驱动6个四相步进电机，常见的Arduino UNO存在数字信号端口输出不够的情况，因此选择Arduino MEGA2560来进行控制。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Science + Machine Learning Note 1: Classification with Linear Regression and Logistic Regression</title>
      <link href="/blog/data-science-machine-learning-note-1/"/>
      <url>/blog/data-science-machine-learning-note-1/</url>
      
        <content type="html"><![CDATA[<p>这学期开了数据科学课，很开心。我校信管还是有点跟上时代，不至于跟着整个老旧专业的没落而没落，而是有转型打算的嘛。听c老师说甚至学院开会打算把整个专业改名，安上「大数据」，但后来发现如此的话教学内容也要大改而师资不够。说白了就是学院里边很多老师还是太软了，技术不大行，教不了硬的。</p><p>这课两周内把前四章基础的东西讲完了，数据导入和简单数据预处理之类的，比我想象中快，我还比较期待后面能学到新东西。</p><p>第五章开了个头，讲的是「选择和评价模型」，大抵是介绍机器学习中的常用模型，分清遇到不同数据分析需求时适用的模型。令我失望的是，真的真的只是讲了一下模型的种类，告诉你模型可以用来做什么，连一点点原理都没有涉及。我希望今天把课程所学温习，把上学期的实践课学到的机器学习原理整合进知识框架里，顺道把之前的笔记好好整理一下。如果合适的话，再发个公众号文章也不错（心心念念的广告费）。</p><p>不同于ml角度，把机器学习模型分为监督学习和无监督学习；ds是从业务问题的角度出发，把模型分为分类、打分、概率、排名、聚类等。我显然更喜欢前者的分类，相比较之下后者的分法互相交叉，令人迷惑。</p><p>但我今天还是按照ds的分类来整理一下把。</p><h2 id="分类问题-classification">分类问题 Classification</h2><p>分类问题决定如何为对象分配（已知的）标签 。分类问题属于监督学习，即训练模型时需要数据已经被分类好了。监督（Supervised）本质上说的就是正确答案已知（right answer given），比如训练模型去学习猫狗图片分类时，每张图片已经事先被打上了「猫猫」或者「狗狗」的标签。模型拿到一张图片，给出自己的判断，再查看标准答案，得知自己答对了没有；然后不断修正自己，直到达到令人满意的准确率。这种数据标签都是人工打的，说起来L老师还提起过这甚至催生了一个新兴职业来着，叫「数据标注员」，还挺赚钱？</p><p>分类问题的常用算法，ds课上介绍了朴素贝叶斯、决策树、逻辑斯谛回归和支持向量机。我很遗憾的是这里介绍的几种算法都比较基础，并且不知道为什么似乎甚至不打算提及神经网络的样子……朴素贝叶斯、决策树和逻辑回归都是比较简易的模型，支持向量机虽然很深，但l老师说它是上个世纪的经典，现在已经逐渐过时，被很多算法给取代了……不过从应用角度来说，我们本科生处理处理小规模数据，用简单算法可能比神经网络效果好多了，学这些先入个门也挺合适把。</p><p><img src="https://jyzhu.top/mydocs/2019/09/image.png" /></p><p>（都是适合比较简单的任务，高级的还是神经网络给力）</p><ol type="1"><li>朴素贝叶斯很简单，所以适合处理比较多的变量；尤其在应用中发现它很适合文本分类。但是现在深度学习领域的自然语言处理不是靠谱多了……另一方面，朴素贝叶斯成立有一个必须的假设：各输入变量是相互独立的——这很限制它的靠谱性。</li><li>决策树就比较适合输入变量之间有相关性的情况，它的分类逻辑是一层一层的。</li><li>逻辑回归是可以输出概率值的。</li><li>支持向量机是上世纪的经典，能解决比较复杂的问题；但是巧了，神经网络也很适合解决这类问题，而且效果更好……</li></ol><p>好了现在把脑子切换到ml频道，我想整理一下逻辑回归的算法原理。</p><p>然而线性回归是逻辑回归的基础，所以我需要先整理一下线性回归的原理orz。</p><h2 id="线性回归linear-regression">线性回归Linear Regression</h2><p>线性回归很好理解，输入的是对象的一系列特征值x1、x2、x3……，输出则是需要预测的变量y。比如经典的房价预测问题，输入某地的一些特征值（比如犯罪率啊、住宅数啊、人均收入啊等等），输出预测的该地房价<span class="math inline">\(h_θ(x)\)</span>。公式表示起来是这样：</p><p><span class="math display">\[h_θ(x)=θ_0+θ_1x_1+θ_2x_2+...\]</span></p><p>刚开始非常迷惑我的是已知量未知量的问题。在训练的时候，输入值<span class="math inline">\(x_1\$、\)</span>x_2$和输出值y都是已知量，而参数<span class="math inline">\(θ_0\$、\)</span>θ_1$、$θ_2$……才是未知量，机器的根本任务就是拟合出合适的θ值；而在模型投入使用的时候，θ的值已经敲定了，我们拿输入的一堆x来预测未知的y。</p><p>接下来精彩的来了：模型怎样才能有方向地优化它的参数θ呢？这里所发生的事情实在很巧妙。</p><p>要实现模型优化，需要依次解决两个问题：</p><ol type="1"><li><strong>建模误差</strong>：反映模型所预测的值与训练集中实际值之间的差距</li><li><strong>自动优化</strong>：自动找出让误差更小的参数取值</li></ol><h3 id="用代价函数来建模误差cost-function">1. 用代价函数来建模误差Cost Function</h3><p>这个其实很容易想到。预测值和真实值之间的差即为误差，那所有的这些差的平均值就能表示整个模型的误差水平了。</p><p><img src="https://jyzhu.top/mydocs/2019/09/image-2.png" /></p><p>假如图中黑色直线就是我们拟合出来的线，直线上的每一个点，意味着在x取相应值时，y即为预测值；而同一横坐标的红色叉叉对应的y表示真实值。那么每一条蓝色线段即为一次预测的误差，所有蓝色线段长度加起来再除以总数就可以表示整个线的误差程度了。</p><p>当然，预测值与真实值的差可正可负，要全部加起来需要取绝对值；为了方便后续的计算，这里在定义代价函数的时候取了平方。代价函数的定义出来了：</p><p><span class="math display">\[J \left( \theta_0, \theta_1 \right) = \frac{1}{2m}\sum\limits_{i=1}^m \left( h_{\theta}(x^{(i)})-y^{(i)} \right)^{2}\]</span></p><p>（呃……本来除以训练个数m就够了，前面这个2是哪冒出来的？现在只好说是未卜先知，这个2是为了方便下一步的计算。）</p><p>好！有了代价函数来表示误差水平，那么模型接下来要做的事情就可以量化了：选取合适的参数θ，使代价函数值最小。</p><h3 id="用梯度下降算法来优化参数gradient-descent">2. 用梯度下降算法来优化参数<strong>Gradient Descent</strong></h3><p>怎么说呢，在我对机器学习肤浅的掌握中，我认为最精妙在于神经网络；其次就在于这里的梯度下降算法了。谁能想到一个不怎么起眼的数学原理，可以应用于这么巧妙的地方，促进回归乃至神经网络的实现，奠定如今一整个蓬勃发展的ml领域的基础。（……我可能太扯了）</p><p>说回我们的目标，要取代价函数的最小值。函数的最值问题，这很容易让人联想到——导数。</p><p>假如代价函数是如图所示的抛物线形状（事实上单变量线性回归的代价函数确实总会是这样的形状），横坐标代表不同的θ取值，纵坐标是代价函数J(θ)。曲线的底部正是J(θ)的最小值，在这一点导数为0。</p><p><img src="https://jyzhu.top/mydocs/2019/09/image-3.png" /></p><p>一个容易被忽视的现象来了：在最低点右边，导数值总为正（导数的几何意义就是切线斜率）；在最低点左边，导数值总为负。而且更仔细想一想，越接近低谷，曲线越平缓，斜率的绝对值越小，导数值也越小；反之越远则导数值越大。</p><p>那么，如果对θ进行迭代，总是让当前的θ值减去它对应点的导数值，会发生什么？答案是θ值会越来越接近最优值！在最低点右边的θ会减去一个正数，从而向左移动；在左边的θ会减去一个负数，从而向右移动。离得远的点会减去一个更大的数，从而蹭蹭靠近；离得近的点会减去一个很小的数，从而缓缓趋近。如下图：</p><p><img src="https://jyzhu.top/mydocs/2019/09/image-4.png" /></p><p>那么梯度下降的迭代公式即是：</p><p><span class="math display">\[{\theta_{j}}:={\theta_{j}}-\alpha \frac{\partial }{\partial {\theta_{j}}}J\left( \theta \right)\]</span></p><p>其中的<span class="math inline">\(\frac{\partial }{\partial {\theta_{j}}}J\left( \theta \right)\)</span>即为代价函数对<span class="math inline">\(\theta_j\)</span>的偏导数，α则是学习率，用来调节每次下降的步伐。</p><p>至此，我们已经搞明白了线性回归时，参数自动优化的原理。真正实现线性回归，只需要利用梯度下降算法，不断优化参数θ。具体一点来讲，只需要将代价函数的偏导数求解出来，代入梯度下降公式，所得即是最终的算法。如下：</p><p><span class="math display">\[\begin{align}&amp;Repeat\{\\&amp;{\theta_{0} }:={\theta_{0} }-a\frac{1}{m}\sum\limits_{i=1}^{m}{\left({h_{\theta} }({ {x}^{(i)} })-{ {y}^{(i)} }\right)}\\&amp;{\theta_{1} }:={\theta_{1} }-a\frac{1}{m}\sum\limits_{i=1}^{m}{\left(\left({h_{\theta } }({ {x}^{(i)} })-{ {y}^{(i)} }\right)\cdot { {x}^{(i)} }\right)}\\&amp;......\\&amp;\}\end{align}\]</span></p><h2 id="逻辑回归logistic-regression">逻辑回归Logistic Regression</h2><p>逻辑回归跟线性回归的输入是一样的，即对象的一系列特征值；而输出的是0或1，代表将对象分为两种类型。比如经典的垃圾邮件分类问题，可以将垃圾邮件的特征值（比如文本长短啊、发件邮箱地址啊之类的，我也不知道具体是啥）输入，模型就会给出预测，1代表是垃圾邮件，0代表不是。</p><p>逻辑回归看起来比线性回归简单，只能预测出0、1两个分类，而后者能预测出一整个连续型数值，很厉害的样子。然而事实上，逻辑回归只是在线性回归的结果上加了一个sigmoid函数，暴力让结果泾渭分明。sigmoid函数是这个：</p><p><span class="math display">\[g\left( z \right)=\frac{1}{1+{ {e}^{-z} } }\]</span></p><p>它长这样：</p><p><img src="https://jyzhu.top/mydocs/2019/09/image-1.png" /></p><p>其中自变量z是线性回归的输出结果，值的大小表明对象跟某类的相似程度。比如说，想预测一封邮件是否垃圾邮件，z=999，就是说：这也太太太太太像一封垃圾邮件了；反之z=-999，就是说：这一点点点点也不像垃圾邮件。这么说的话，sigmoid函数的作用仿佛就显现了：它就是把取值范围很跳脱的z值，转换成一个(0,1)间的值，正好可以表示概率。极小的z值对应的概率趋于0，极大的z值对应的概率趋于1。</p><p>那么，逻辑回归的公式可以这么表示：</p><p><span class="math display">\[h_θ(x)=\frac{1}{1+e^{-θ^Tx}}=P\{y=1|x;θ\}\]</span></p><p>其中前一个式子中，e的指数$​​θ^Tx​​$即是线性回归的输出，也就是上面说的自变量z。后一个式子是指在参数为θ，输入为x时，y=1的概率。</p><p>这样的话输出的值仍然是一些诸如0.2、0.4、0.8这样的概率，为了让结果更明确，这里只需要再进行一个简单的判决，大于0.5的判为1，小于0.5的判为0。（这里我理解了很久为什么如此粗暴且似乎没有必要，后来想明白经手sigmoid函数的值往往不是很趋近0就是很趋近1，直接判定为0、1是可以比较笃定的。）</p><p>……天哪，写这个也太繁琐了。我其实真正想整理的是神经网络部分的笔记，不知道还有没有足够的意愿了。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Science </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R notes: first meeting with R</title>
      <link href="/blog/r-notes-first-meeting-with-r/"/>
      <url>/blog/r-notes-first-meeting-with-r/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li>R is easy. Half of Python half of Matlab.</li><li>R最大的简便就是把各种统计概率机器学习功能都打包好了嘛</li></ol><p>作业题改错：</p><p>One:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#确定观察值相对较少的站点</span></span><br><span class="line">agg&lt;-aggregate(Station,<span class="built_in">list</span>(Station),<span class="built_in">length</span>)</span><br><span class="line">minStation&lt;-agg[agg$x==<span class="built_in">min</span>(agg$x),]</span><br><span class="line">minStation</span><br><span class="line"><span class="comment">#生成一个忽略这些站点的新数据框</span></span><br><span class="line">newisit&lt;-isit[!Station %in% minStation[,<span class="number">1</span>],]</span><br><span class="line">newisit</span><br></pre></td></tr></table></figure><p><code>newisit&lt;-isit[!Station %in% minStation[,1],]</code> instead of <code>minStation[1,1]</code></p><p>To avoid more than one minStations. 我觉得老师就是在找茬，但是我的问题确实在于对那个<code>%in%</code>不熟悉。</p><p>Two:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Month&lt;-<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="number">0</span>,nrow(isit)))</span><br><span class="line">Year&lt;-<span class="built_in">c</span>(<span class="built_in">rep</span>(<span class="number">0</span>,nrow(isit)))</span><br><span class="line">newisit&lt;-cbind(isit,Month,Year)</span><br><span class="line">newisit$Month[newisit$Station&gt;=<span class="number">1</span>&amp;newisit$Station&lt;<span class="number">6</span>]&lt;-<span class="number">4</span></span><br><span class="line">newisit$Month[newisit$Station&gt;=<span class="number">6</span>&amp;newisit$Station&lt;<span class="number">12</span>]&lt;-<span class="number">8</span></span><br><span class="line">newisit$Year[newisit$Station&gt;=<span class="number">1</span>&amp;newisit$Station&lt;<span class="number">12</span>]&lt;-<span class="number">2001</span></span><br><span class="line">newisit$Month[newisit$Station&gt;=<span class="number">12</span>&amp;newisit$Station&lt;<span class="number">16</span>]&lt;-<span class="number">3</span></span><br><span class="line">newisit$Month[newisit$Station&gt;=<span class="number">16</span>&amp;newisit$Station&lt;<span class="number">20</span>]&lt;-<span class="number">10</span></span><br><span class="line">newisit$Year[newisit$Station&gt;=<span class="number">12</span>&amp;newisit$Station&lt;<span class="number">20</span>]&lt;-<span class="number">2002</span></span><br></pre></td></tr></table></figure><p>这个很讨厌。我一开始用for循环写的，没想太多；但老师说这样效率低，要我当场想出另一个方法，我当时一慌，没想出来。最后老师说可以先把空列跟原frame bind上，然后再根据Station条件来赋值嘛。很简单的点，给我扣分了，不大服气，唉。</p><p>我觉得使用R的基本思路：</p><ol type="1"><li>Read table or make table.</li><li>Process datas.</li><li>Draw plots.</li></ol><p>开学后的正式课程里还是这位老师教我们数据分析，应用R。我还蛮期待的。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZhihuCrawl log</title>
      <link href="/blog/zhihucrawl-log/"/>
      <url>/blog/zhihucrawl-log/</url>
      
        <content type="html"><![CDATA[<p>代码改来改去已经改迷糊了……所以从现在开始每次改了些什么都记录一下吧：</p><p>上上次：老师布置新添加一个话题之后，我简单复制了一份新爬虫，把topic参数改了一下，这样打算topic 1爬完后用新爬虫爬topic 2，互不干涉；但是老师找上来说两个话题必须同时爬才行。</p><p>所以上次：我把两个爬虫融合在一起，让topic参数不由手动指定，而根据URL自动识别，然后美滋滋觉得没问题了。但是今天一运行发现bug，这样两个话题爬到的数据都会存进同一份数据库里啊！</p><p>为了让两个话题分别存到2个数据库，这次：绞尽脑汁，还是分成了两个爬虫，两个爬虫分别连接2个redis数据库，使用2个pipelines存进2个MySQL数据库里。具体来说，</p><p>1. 在StartCrawl里改了初始化redis时的d0 d1；</p><p>2. duplicate了spider，在custom settings里改了redis param的d0 d1；</p><p>3. duplicate了pipelines，分别为不同spider指定；</p><p>4. 在pipeline里根据topic自动给DATABASE_NAME加t1/t2前缀，避免了改DATABASE_NAME相关的一大堆；</p><p>5. 在pipeline里改了redis连接的d0 d1</p><p>这样是打算在scrapinghub上多开一些定期爬虫任务，有的是topic1的，有的是t2的，各自推动相关redis d0和d1中urls的进度。但一个显然的缺点是当某个topic的任务先跑完之后，正在进行中的spiders没办法自动全变成另一个topic的</p><p>tip：以后要注意初始化database的时候要整两个：t1m**d**和t2m**d**</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crawler </tag>
            
            <tag> Scrapy </tag>
            
            <tag> ZhihuCrawl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anxiety</title>
      <link href="/blog/anxiety/"/>
      <url>/blog/anxiety/</url>
      
        <content type="html"><![CDATA[<p>Recently I'm feeling very upset, even say, depressed. Especially when the sun goes down, and the sky turns dark, I almost wanna cry. I hope to get drunk once but after rethinking, I find it no chance. My baby won't let me do this.</p><p>I don't know specificly why I come here again. Perhaps it's because of the recent pressure from the English test, which I regarded as an impossible goal from the bottom of my heart. Once something impossible comes to my life, I cannot stand it at all.</p><p>I'm confused about why I should keep alive. I know this is a naive question and all the feelings are trivial.</p><p>So I won't talk about them anymore.</p><p>Today I studied English and I find myself just terrible. None of the four sections, reading, listening, speaking or writing, none is good enough. I am worried.</p><p>OK OK stop.</p><p>I am here to practice writing, even though these words are like shits, I still have to practice it. The good news is that nobody would read this piece of shit at all. It's just like I'm writing diaries.</p><p>Well. I find that I can earn a little money from WeChat Official Accounts with the tiny ads after my passages, as long as someone clicks on it. This is the happiest thing happens today, encouraging me to write more. But now I'm writing here because I don't wanna expose my personal emotion to the public, well, most importantly, to my mom.</p><p>Yesterday I posted 2 &quot;poems&quot; on that Account (the two quotation-marks here mean that I think the poems are as terrible as shits). And very soon I got concerned messages from my mom. I don't want her to be worried about me at all. And anyway I don't think this is something really mattering.</p><p>I am in my third year of college, an ordinary college in which I came just because of poor performance in the entrance exam. I think I am a little special among the students here, but people special like me are still abundant. I have lots of things that I want to do as well as lots of things I have to do, but only half of them I've done successfully.</p><p>I am very anxious. Honestly, I think I'm already in a sub-health mental statue. I hope to study hard mostly to avoid trapping into these emotions.</p><p>Well, the battery almost runs over. I think I have to shut up.</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>喃喃</title>
      <link href="/blog/nam-nam/"/>
      <url>/blog/nam-nam/</url>
      
        <content type="html"><![CDATA[<p>天地的雨下起来的时候<br />我坏了<br />烦躁的雨衣整齐叠在一边<br />心脏染上了一层蜡黄<br />我已装死很久了</p><p>在这场雨里<br />别再指望我解释什么<br />语言的甲板处处断裂<br />戏拟的修辞被扯成布条<br />你或许能听到<br />我的灵魂站在甲板上喃喃：<br /><em>我也无法接受……我该如何契合<br />……至今的复杂性？</em></p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 难言二首 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress邮件自动发文</title>
      <link href="/blog/wordpress-email-post-passage/"/>
      <url>/blog/wordpress-email-post-passage/</url>
      
        <content type="html"><![CDATA[<p>当今生活中，手机已经是最常用的访问互联网的方式了。尽管作为一个资深程序宅，我也不是天天都打开电脑。所以想办法方便地用手机更新博客是很重要的。</p><p>正好看到了邮件发文的功能，配置好之后，可以随时向一个指定邮箱发邮件，网站后台会定时拉取邮箱的内容，发现新内容则发表到网站，然后把邮箱清空。</p><p>原本秉着插件越少越好的原则，我想直接用WordPress自带的邮箱收文功能。但发现它有一个致命软肋：没法定时拉取邮箱收件箱。网上看到两种解决方案：</p><ol type="1"><li>系统默认：访问特定url时触发拉取收件箱行为。</li><li>在网页php末尾增加几行代码，使每次网页被访问时触发拉取收件箱进程。</li></ol><p>但是以上两种都有局限性，所以我最终还是选择了插件。事实证明插件还可以进行一堆细节的设置，比如说加tag啦，默认作者、栏目啦等等，还挺实用的。</p><p>用的是Postie插件。配置一下就好了。</p><p>值得一提的是我用163邮箱，邮箱那边可以设置安全级别，我选了最高级别，也就是除了联系人列表or白名单列表中保存的邮箱地址，拒收任何其他邮箱发来的邮件。这样可以保证网站不会把一些奇奇怪怪的垃圾邮件发出来orz</p><p>这个过去得有点久了，细节设置我也记不清了……就说到这里把。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> WordPress </tag>
            
            <tag> WordPress Plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯粹反思</title>
      <link href="/blog/pure-rethinking/"/>
      <url>/blog/pure-rethinking/</url>
      
        <content type="html"><![CDATA[<p>今天出了上学期的成绩啦，虽然名次上看起来退步不是很多，奖学金也勉强保持在了一样的水平，可是我还是很失落，因为知道自己上学期在学习上糟蹋成了什么样，如果更用心一点，本应该是什么样。 就是很失落。社交上、活动上，明明就已经是很差劲的状态了，学习上那么点小天赋，又被懒和怠惰霍霍得一无是处。这样不值一提的状态真是糟糕透顶。 我觉得应该要改变一些什么。总不能做一个顽固不化的人吧？这些看上去也不是不能改的样子。那就改变一些什么吧。虽然有时候懒和怠惰会使我发问，到底为什么要活得那么用力；可是我也该搞明白，虚荣和焦虑根本也不容我待在低谷里，这样会死掉的。 真是矛盾又很难做的一个人啊。还是睡好吃好，少想点有的没的，简单高效，高阈值低感知地活着吧。麻木点才好啊，这样敏感一人，常常影响到效率的。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Follow This TOEFL Plan or Die</title>
      <link href="/blog/follow-this-toefl-plan-or-die/"/>
      <url>/blog/follow-this-toefl-plan-or-die/</url>
      
        <content type="html"><![CDATA[<p>I have to make this precise and essential TOEFL Review Plan because:</p><ol type="1"><li>The god damn Xiaozhan organization predicts that I will fail if I learn this all by myself. But I don't give a shit.</li><li>The TOEFL entry fee is fucking expensive. And I've just missed one. I want this terrible experience to give me a lesson.</li><li>I am too old to waste time!!!</li></ol><p>And my plan is:</p><p><strong>Everyday task</strong></p><p><strong>time</strong></p><p><strong>Especial for weekends</strong></p><p>time</p><p>100 Words in Bubei Danci</p><p>while playing phone</p><p>take 1 simulation exam &amp; review</p><p>whole morning in the library</p><p>1 whole speaking part &amp; review</p><p>early in the morning</p><p>1 whole reading part &amp; review</p><p>spare time</p><p>1 listening with dictation &amp; reading</p><p>spare time</p><p>1 writing class with homework</p><p>spare time</p><p>This plan is effective for the next week since I have to measure the time cost to determine if it's enough.</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每一份醉意都是爱意</title>
      <link href="/blog/every-drink-is-love/"/>
      <url>/blog/every-drink-is-love/</url>
      
        <content type="html"><![CDATA[<p>如果我可以操纵草木风景<br />我想为你倾现所有的美丽<br />如果世界上有最好的词语<br />那一定是我发明来形容你</p><p>如果光阴全攥在我的手里<br />我愿意把它们都虚掷给你<br />如果醉酒后人只会说真话<br />我愿意在你面前醉一万次<br />让你听听我心底的我爱你</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一口气</title>
      <link href="/blog/sigh/"/>
      <url>/blog/sigh/</url>
      
        <content type="html"><![CDATA[<p>如果一个人还觉得自己年轻<br />那就大胆地做一些事情吧<br />这样<br />就算全世界再没有人<br />需要她的呐喊<br />她也曾经为自己呐喊过</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我读《不能承受的生命之轻》</title>
      <link href="/blog/reading-lightness-of-being/"/>
      <url>/blog/reading-lightness-of-being/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jyzhu.top/mydocs/2019/08/image-6.jpeg" /></p><p>前：<em>终于第二遍读完了《不能承受的生命之轻》，这本用小说体裁探讨哲学的书中，有太多太多深刻的东西。在书末附的那篇《大写的牧歌与小写的牧歌》的启迪下，我对此书的部分中心思想有了一些肤浅的理解。</em></p><h2 id="刻奇">1. <strong>刻奇</strong></h2><p>《不能承受的生命之轻》揭露了许多谎言，我们的生命和思想藉以为本的谎言，刻奇当属其一。</p><p>《伟大的进军》一章中，一群西方发达国家的医生、教授、明星自发组织去往战乱的柬埔寨提供医疗，却被拦在边境线外，回应伟大喧嚣的竟只是一片死寂，进军尚未开始业已终止。弗兰茨是队伍中的一员，他到头来发现这一切只是行进者的一场演戏，令大家自我感动的无上光荣，原来只是一种表演欲。书中的弗兰茨至死也未接受——但昆德拉在文字中毫不留情地揭露出来——伟大的进军是一场刻奇（kitsch）。</p><p>「刻奇」一词曾被翻译成「媚俗」，为其本就抽象的含义更蒙上一层纱状的误解。昆德拉提出的这一概念，是一种<strong>美学的理想</strong>，追求着一个集结了一切崇高与美好的世界，排除了人类生存中不被接受的一切的世界。</p><p>而这一美学的理想实则是矛盾的，因为其根源是<strong>对生命的绝对认同</strong>。相信生命原本就该如此，生命的一切都是美好的，这种信仰被昆德拉称为「对生命的绝对认同」。然而排便的那一刻，便是对这种信仰的讽刺：粪便是无法接受的，受人避讳的，可它却是人被创造的样子的一部分呀！而正如粪便不可能不存在一样，不被刻奇所接受的事物亦不能被真正消灭，只能被掩盖与无视。</p><p>因此，刻奇是这个世界所戴的漂亮面具。人们为应该喜悦的事情而喜悦，为应该感动的事情而感动，迎合着、表演着，只为表达应该有的认同，对生命的那种认同。</p><p>回过头来便能理解，伟大的进军是一场刻奇，因为「尽管障碍重重，但它是一种壮观的前行，是通向博爱、平等、正义、幸福乃至更远的征程，因为只有征途上多险阻，进军才能堪称伟大的进军」。</p><p><img src="https://jyzhu.top/mydocs/2019/08/image-10.jpeg" /></p><p>据此书改编的电影《布拉格之恋》中的情景</p><h2 id="牧歌">2. <strong>牧歌</strong></h2><p>昆德拉对刻奇的揭露与批评，深层次上是对大写的牧歌的揭露与批评。我很喜欢「牧歌」这个词的修辞方式，用牧人唱的歌谣这一意象来借代其含义，生动无比。对大写的牧歌的向往是一种对幸福的渴望，它宣称要恢复美化的生活；这种美化的生活取缔了个体、抛弃了界限，在完全同质之中消解了冲突；这样一种完满中，人们能感到真实，感到纯粹，找到真正的存在状态。</p><p><strong>革命理想</strong>是《生命之轻》中展现的大写的牧歌的图景之一，旨在通过将世界变成一个没有异端、没有分裂的统一天地，从而结束冲突，达成一种天堂般和谐的社会状态。还有一种看似矛盾实则同质的图景——<strong>裸体海滩</strong>：沙滩上摆满肉体，没有独特，没有隐秘，一切浑然一体。这两幅图景本质上的相同之处在于，个体不再是个体，个体融合成整体，从而达到一种大一统的境界。</p><p>究其根源，刻奇正是大写的牧歌的表现，而刻奇的矛盾之处也正是这种牧歌的矛盾之处。昆德拉同样毫不留情地揭露了大写的牧歌这一谎言。</p><p>然而此书关键而又深刻的另一观点，完全由最后一章《卡列宁的微笑》升华出来。这一章与前几章大不一样，并且显然昆德拉在这一章的架构上颇费心思，是我第一次读的时候混混沌沌而又莫名最喜欢的一章。这一章初读奇怪，怎么与前几章揭露、讽刺的基调大相径庭——是在描写一次牧歌般的图景，美好又圆满？</p><p>其实不奇怪。人们说昆德拉是反牧歌的，实则反的是大写的牧歌，那种虚无缥缈的图景。他的反牧歌，除了批判与揭露，另一方式即是——提出反牧歌之牧歌，即<strong>小写的牧歌</strong>。且来理解一下这小写的牧歌的境界何以实现：抛弃过去的一切，包括命运；彻底的断绝，离群索居，深深孤独。这小写的牧歌大抵是在乡野，在历史的进程所笼罩不到的世界尽头。这其中的幸福来自于重复。卡列宁是主人公特蕾莎和托马斯养的一条狗，它的时间不似人类的线型，而是环型；它过着每天单调又重复的生活，并从中感到幸福，当循环被打断，它会无所适从。这就是动物的幸福，是伊甸园中人类的样子，是小写的牧歌中真正的幸福。</p><p><img src="https://jyzhu.top/mydocs/2019/08/image-7.jpeg" /></p><p>电影《布拉格之恋》中的卡列宁</p><h2 id="生命">3. <strong>生命</strong></h2><p>《不能承受的生命之轻》探讨了许多主题，但根源上，它探讨的是人的生命，这也从书名上可见一斑。<strong>生命之轻</strong>是一次之轻，人只能活一次，历史只能发生一次，一次等于什么也没有。因为我们既没有过往的经验，也无法为未来总结经验，无从比较，无法得知选择是正确还是错误，人生如同永远无法完成的画的草稿。没有必然，全为偶然。托马斯对特蕾莎的爱情源自六次偶然。偶然的一本书、偶然的一声肚子叫……既然如此，生命中每一次选择之后果也无须我们承担，这是真正的轻。</p><p>但贝多芬对命运之神发出了两声叩问：非如此不可？非如此不可。托马斯也一样。紧接着，在特蕾莎离开他的一周之后，他奋然决定回到布拉格，追回特蕾莎的身边。这「非如此不可」的回答是他自己为生命赋予的意义，追回爱情的选择也使他追回了存在的重量。</p><p>除了轻与重的探讨，书中还有对<strong>灵与肉</strong>的探讨。一句反复出现的隐喻是「灵魂的船员」与「肉体的甲板」。特蕾莎自小被母亲对个体独特性的剥夺笼罩，灵魂的船员永远躲在肉体里。她爱上托马斯的时候，感到自己「灵魂的船员冲出了肉体的甲板」，感到自己是独特的，因而感到爱与被爱。</p><p>我实则感到， 此处对灵与肉的探讨，离不开对牧歌的探讨。如前所说，裸体海滩是大写的牧歌的图景之一，因为其实质上也是一种对个体独特性的剥夺，是一种囫囵的大统一。大写的牧歌里，灵魂永远躲在肉体里，而肉体大致相同，不加区分。后果则是，如特蕾莎一样，焦虑着自己的存在，遗失了灵与肉的统一。而小写的牧歌里，强调的本就是灵魂：毕竟它就是建立在彻底的孤独中。牧歌中的人与伴侣，体验着爱情，专注着幸福，这就是对灵魂的重视。</p><p><img src="https://jyzhu.top/mydocs/2019/08/image-8.jpeg" /></p><p>电影《布拉格之恋》中的托马斯与特蕾莎</p><h2 id="爱情">4. <strong>爱情</strong></h2><p>谈到《不能承受的生命之轻》，许多人首先想到的是其中对爱情的探讨。昆德拉对爱情的阐述不可谓不深刻。我愿着重谈论两处我印象深刻的议论。</p><p><strong>「隐喻是危险的，它常常导致爱情。」</strong></p><p>托马斯最初对特蕾莎的爱情，就源自他内心中这样一个比喻：特蕾莎就像是被放在篮子里，顺着河水飘向他床笫之岸小孩子。如此他就一发不可收拾地爱上了她。隐喻常常使我们将生命中的某种偶然性与必然性联系在一起，将生命之轻转化为重，这容易产生爱情。</p><p>隐喻还容易开启我们心中<strong>「诗化记忆」</strong>的那一部分。</p><p>昆德拉认为，人的记忆分为两部分，普通的记忆和诗化的记忆。诗化记忆记录的，是让我们陶醉，令我们感动，赋予我们生活以美的一切。当一个人开始印在我们的诗化记忆里，爱情也就随之而来了。</p><p><img src="https://jyzhu.top/mydocs/2019/08/image-11.jpeg" /></p><p>米兰·昆德拉</p><p>后：我有好多尚未消化的地方。这样一篇「读后感」，实则也是我将自己理解的整理。仓促就之，有不当之处，欢迎斧正。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
            <tag> 《不能承受的生命之轻》 </tag>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像「λ」一样活着</title>
      <link href="/blog/live-like-lambda/"/>
      <url>/blog/live-like-lambda/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jyzhu.top/mydocs/2019/08/image-5.jpeg" /></p><p>我虽然活成了一个「人」的样子，脸上一边是左眼一边是右眼，中间是一根鼻梁，鼻梁一侧是左鼻孔另一侧是右鼻孔；但我一直以来想活成一个「λ」。「λ」和人有天大的区别，「λ」一边先是右眼，另一边才是左眼，鼻孔亦然。镜子里的我就是一个「λ」，不过长得也很一般。</p><p>我有时会想如果我是一个「λ」，那生活会是什么样的呢。当我告诉出租车司机前方路口右拐，他大概会打着转向灯往左拐。我们大概会认为对方弄错了，但事实上谁也没有弄错。这听起来很奇怪，但其实一点也不。有很多时候一群人说一件事是好的，另一群人则说它是坏的，最后你会发现世界上的许多对反义词都是互相包含的。有人说未来是黑的，作为一个「λ」我就能轻易地理解未来也是白的。当大家都看到生命生生不息的时候，我其实该跳出来说「死死亦不息」。</p><p>如果我活成一个「λ」，射入人左眼的光线会照进我右眼，看到的很多东西和大家不一样，大概会有些寂寞的。就像王小波曾经遇到的那只猪——如果我猜得不错的话，那大概就是一只曾经活生生的「<img src="https://jyzhu.top/mydocs/2019/08/image-2.jpeg" style="zoom:2%;" />」了——两眼炯炯有光，活得与众不同，被当做特立独行呢。我在想它脱离一只肉猪的追求与趣味，跳到房上学汽笛响的时候，心里在想些什么呢。实际上我琢磨不出来，毕竟我既非一只「<img src="https://jyzhu.top/mydocs/2019/08/image-4.jpeg" style="zoom:2%;" />」，也不是一个「λ」。</p><p>我忽然有些犹豫了，到底该不该活成一个「λ」呢，根本没人理解，没有同伴，会不会在孤独中感到绝望呢。像屈原，像哥白尼，我怀疑他们都是人间的「λ」，但是他们都惨戚戚地被那个时代抛弃了啊。我想到一群羊，它们翻来覆去也是羊，变不成别的，它们终其一生跟着队伍，周围的家伙低头吃草，自己也低头吃草；大家依次踏进羊圈，自己也跟着踏进去。多么祥和的牧歌似的场面！可惜这不是我想要的。我想要的是自由，没有一只羊会在牧羊人的鞭子底下找到自由。</p><p>这么说的话，我还是乐意当一个「λ」。但是我该怎么做呢？天天照镜子看着里面的「λ」傻乐并不能让我变成「λ」。可能我该试试瞪大眼睛从白色里面看出点黑色来，或者在人人都低头赶路的地方抬起头看看星星。今晚我就去试试逆着月光的光路找找法线另一侧的太阳光。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零模考试状况回忆录</title>
      <link href="/blog/0-mock-exam/"/>
      <url>/blog/0-mock-exam/</url>
      
        <content type="html"><![CDATA[<blockquote><p>高三零模考得还不错，为了供之后反思和回忆，<em>当时我迅速记下了考试状况</em>……</p><p>现在读起来还挺有意思的。</p><p>—— now</p></blockquote><p>我想我该趁现在还没忘赶紧记下来零模考试时候的感觉 日后的考试也尽量找这种感觉 才是我的最好发挥</p><p>首先是心态 这次考试心态非常非常平和 因为知道它不重要……所以就像认真完成一套作业那样写它 休息时间也是很平和 该睡睡 导致考试时候精神异常饱满 一丢也没感到困或者疲乏带来的思维缓滞 不过自习时间竟然学不进去……想玩想看书</p><p>先考的是理综 当时做选择题时候想着这可是一题六分呐 花再多时间也不为过 哪怕后边做不完 因为像我这种选择题常常错的人 得选择得天下</p><p>遇上第一个难点是生物5题 那是知识漏洞 就是冷冻保存的那个 我当时心想 完了生物就得开头就错 慌神了一丝 又转念 没事儿……反正选择不错不是我的作风 我只要控制到争取只错一两个 都能说得过去……说不定化学不会错呢 然后就草草蒙了一个 在题号上画了个圈圈去做下一题了</p><p>化学 妈呀又遇到了不会的……没事儿 蒙呗</p><p>物理 妈呀这这这科学史想不起来了 没事儿好好想想 前后有逻辑有线索 你可以排除啊 然后就瞎选了一个 存疑 题号下画横线</p><p>然后现在想想当时物理就有三道不确定的题……但是当时只顾做题我根本没想这些 也就没有因此而慌张</p><p>涂卡我听森爷的在这时候全给涂上了 事实证明虽然没有在这时候带给我调节心态的好处 但是十足在我后来应该感到紧迫的时候因为选择题已经carry而有的心安</p><p>做物理实验和大题都感觉挺妙的 做实验的时候很有信心因为前几次周测实验都做得挺好 于是有意加了点速 大题一道接一道做根本没考虑时间 竟然就那么流畅地都做完了！ 天体第三问要疯狂计算……我就先给空着了 事后证明这是极机智的 留存了时间 最后一题感觉不很难 我都做出来了 于是非常之开心</p><p>开始化学 前边都挺无感的 但是到第二第三道题明显有卡壳和拿不准没头绪的空 但是我是抱着反正我化学就有这么差爱咋咋的心态平和地啃了下去</p><p>但是到了最后一大题我还是决定先舍舍因为时间不很够了 好像只剩四五十分钟左右？我想到一是某次海淀生物课上老师讲「给生物往往只能留下二三十分钟」「这样很不利」然后学霸讲「每次生物能有四十分钟」 于是我觉得我先做生物既能调节化学艰难做题带来的不良心态 又能保证做生物时候的好心态 况且做完生物剩下的时间应该也还够扭头在这18题里蒙几个空 生物是我拿手好戏 要给足够时间舞台发挥 特别是生物题越往后往往越简单越好拿分</p><p>于是我跳过18题就开始做生物 生物做得也很流畅 当然那种小作文的空还是连蒙带猜 没遇到不记得的基础知识空 也没遇到思维停滞的艰难最后一问 就保持着好速度给做完了</p><p>做完好像还剩二十分钟 我就赶紧做化学最后一题 有点紧迫 因为前边的选择题还有不确定需要检查的项 隐约记得物理大题也有没处理完的地方（那个计算题）</p><p>这题好像几分钟就被我糊弄完了…………而且自我感觉还良好（虽然事后总分14我扣了9分的惨痛结果证明我当时太急根本没读懂题）</p><p>然后我就去给物理计算大题填上了类似「666」的凑数 最后几分钟去检查选择题还给改了两个 当时感觉一拍脑袋哇塞豁然开朗肯定靠谱！（事后化学给改错了 但是之前选对也是运气好 因为那题我根本不会）而且那个物理学史的题也被我想起来了 赫兹是做实验的 麦克斯韦英年早逝😂</p><p>哇好啰嗦……总之理综就这么做完了 物理110分 况且那实验就扣了六分……那实验是一个脑残错误 都怪当时想要提速？ △x=aT² 我给在运算时候代成了x=1/2at²</p><p>化学81分 比平时都考得好我已经心满意足了……选择错一个 最后一题扣九分 其实扣的分也差不多了……有机一个方程式也犯了脑残错误 这都没办法【摊手】事实证明就算犯了好几处脑残错误也是没问题的</p><p>然后就是闪亮亮的生物了 77分哇哦 年级第一耶 这个我特开心 因为全神肯定能注意到……</p><p>好啰嗦orz</p><p>下面是语文了 古诗词完全没复习的我就这么蜜汁自信地上战场了 结果果然不出所料 考的都会～</p><p>前边没啥感觉 那几个许多人说纠结许久的选择题都被我一根筋地迅速带过……前边我也想着要稍稍提速为大小作文留时间来着 因为瞄到微写作是史无前例的十二分 且作文想好好写写记叙文</p><p>话说做散文阅读的时候还感叹了「这文章我挺喜欢」呢……然后就带着好感答题……你懂的这种状况下容易忘乎所以忘了套路写我所想 倒也酣畅 得分也还行</p><p>然后就没啥了 语文总是我最稳定的 我知道前边无法很低但也无法顶高</p><p>作文 哎呀 在还剩五十分钟的如此充裕的时候我就闯到最后一关了 下定决心写记叙文 把标题抄在作文纸上 好了 开始想</p><p>想来想去 脑子也没咋转 满脑子只有半张</p><p>谁见谁疯的照片和半张妈妈的初恋的照片 要完蛋</p><p>人见人疯一写出来肯定又是怪异的文风 i ve promised 要写正常的记叙文的 况且短时间内根本构思不出来围绕人见人疯的照片会发生什么感人肺腑或者发人深省的事情 pass</p><p>我好像一直在内心两小儿辩论有理有据地论证我为何不该写「人见人疯的照片」这个思路……于是妈蛋将近二十分钟我就这么一动不动地干坐着挥过去了</p><p>只有三十分钟了……按照我平时作文练习的速度完全写不完啊啊啊啊啊 必死无疑 干脆想到啥写啥吧 反正我有强大的「由毫无思路时间紧迫的时候把自己逼入绝经的落笔第一句话开始扩写写出惊天动地四十六分哲理记叙文」的能力 又抱着「记叙出手 四十我有」的心态 我就动笔了……</p><p>写完第一句话我才明白 妈呀我的潜意识还是要把我往妈妈的初恋那条路上带啊</p><p>然后我就文不加点倚马可待地……三十分钟写完了…………酣畅是酣畅 就是结尾的抒情加升华有点乱 惶惶地交了卷 心想要完蛋</p><p>后来得了44啊哈哈哈哈哈哈哈哈</p><p>好吧 然后讲英语 英语其实应该在语文之前的 但是我给忘了……</p><p>英语我都不想讲……做得没兴趣 反正高不到哪去……平时翠翠布置的疯狂套卷我从来都是抄答案蒙混检查的……偶尔心情好做一套就会错一大堆被完虐……所以做得毫无信心毫无激情</p><p>况且D篇难死我 有一段话读了将近十分钟也没整明白 一道题五个选择题连选四个c有三个是蒙的吓坏我…… （过后翠翠讲那是六级的题我真是%-×+@%...）</p><p>作文时间不够 脑子不转文不加点地写着 后果很严重 整整扣了11分</p><p>然后是数学 这就更无感了 全程只顾做题就好 压根没想别的……就是导数要答的字多 解析几何繁琐 最后一题只剩十多分钟了 速度还是慢了 并且最后一问根本不会 心里是无望的</p><p>没了</p><p>这次考好拉分的项我猜一是语文 127年级9 作文发挥好就是万幸 然后选择题可能有人错得很惨</p><p>二是理综 268年级12 至于理综主要生物很好 77年级1 物理主要是别人考得太差😂😂化学嘛我差成这样但是拉分不多啊 英语也同化学</p><p>总之就是考好不赖我 不是我多好多好 只是我进行了正常发挥而许多人发挥失常</p><p>这样想来高考其实很接近这种状态 就是「水平随缘 发挥致胜」的考试 那么很适合我</p><p>这样</p><p>让我们相信外公吧 我的考运好得很</p><p>我一定要上清华大学</p><p>我一定要上清华大学</p><p>我一定要上清华大学</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《不能承受的生命之轻》书评摘</title>
      <link href="/blog/lightness-of-life-remark/"/>
      <url>/blog/lightness-of-life-remark/</url>
      
        <content type="html"><![CDATA[<p>人们常常感叹生命的沉重，活着总有一种不堪重负的感觉，为什么会感到沉重？是因为相信生命可以永恒轮回吗？认为今日的选择或者是现在所做的事会对以后抑或将来甚至是来世都会有着深刻地影响和必然的联系，所以，当你面对眼前的事情并且作出选择的时候，才会患得患失，忧虑重重，使每一次的选择变得沉重，以至于使生命也变得沉重。真的是以为这个缘故吗？其实世间并不存在永恒轮回，生命只有一次，并且从一开始，它就头也不回地向着终点奔走。Einmal ist Reinmal 只有一次等于一次也没有，只活一次等于一次也没活。人的一生是一张永远不能成为正式作品的草稿，是一场永远不能正式登上舞台的彩排，生命属于我们只有一次，到头来，我们自己是无法通过比较来检验出究竟是哪种生活方式更正确，于是我们没有必要把每一次的选择都看得是那样的重要，那样的沉重，我们尽可以去做一个凡夫俗子，随心所欲地去享受生活的轻松，然而，真的能够这样吗？也许有的人真的可以，但是，也还是会有一些人是难以承受住这种生命之轻，有甚于生命之重，正如文中的托马思医生和他的情人萨宾娜，在他们的身上，灵与肉是相分离的，肉体能尽享的轻却使灵魂感到莫名的沉重。爱，同情，理想，责任，抱负等等，这些成分使精神得到满足，使灵魂得到慰藉，但却使生命变得沉重，牵挂、忧虑等等这些便随之而来。毕竟，生命属于我们只有一次，今日的事明日将不复存在，我们不必认真地对待它，然而也正因为这唯一的一次，我们又不得不每走一步都小心谨慎，因要是走错了也无法回头。矛盾的人生，人生的矛盾，使我们常常茫然不知生命到底是何物，也正因为这种茫然，让我们承受了比沉重更痛楚的苦。到头来不得不说，一个不值得认真对待的人生，要比一个责任重大，充满痛苦抉择的人生更加令人难以承受。</p><p>尼采认为，我们的世界是“永恒轮回”的。我们生命的每一秒都由无数次的重复。我们的生活是能够被预演的，有朝一日，我们的生活会按照我们经历过的方式再现，而前者中反复还将无限重复下去。如果世界果真如此，我们就会向耶稣一样被钉在永恒色十字架上，无法承受的重负将会沉沉的压在每一个人的身上。然而，这个世界存在的基础恰恰是轮回的不存在，生活无法预演，我们既不能把它与我们以前的生活相比较，也无法使他完美之后再来度过，生命之流只能在偶然性的大地上泛滥，人们肆意的生活，获得了漂浮在半空中的快感，可是，重就真的悲惨，轻就真的美丽吗？</p><p>托马斯正是这一问题的代询人。他是一个离异多年的外科医生，拥有众多的情人，生活风流而快活。然而特里莎的闯入打破了他的自由，托马斯一直在爱恋特里莎和追求自由之间徘徊选择。特雷莎之于他，既非情人，也非妻子，而是一个“被放在树脂深覆的篮子里，顺水漂到他的床第之岸的婴儿。离婚以后的托马斯是愉快自在的，婚姻对他来说是一种责任的束缚，阻碍了他体会生命的快感，在无数的”性友谊“中，他获得了美好的生命之轻。特雷莎无疑是这种生活的终结者，她紧紧握住托马斯的手使他感到了久违的生命的责任并体会到了其中的美好，可是他又不愿意放弃多年来的“自由”。对于托马斯来说，独居还是与特雷莎结合，并不是一个简单的爱情问题，而是关涉到他对存在的可能性的理解。一向轻松的他在六个偶然事件的推动下，选择了“非如此不可”。</p><p>七年之后特雷莎的出走，将托马斯重又置于自由之身，使其身上的重负突然间释放，甚至感到悲伤过后的美好，托马斯嗅到了温馨的生命之轻。可是，随之而来的沉重却将他彻底击倒，他已经学会了感受别人的痛苦，他终于明白，自己再也不可能回到从前虚无缥缈的生命了。他回到了布拉格，追回了特雷莎，也追回了存在的重量。</p><p>如果说托马斯不断地在轻与重之间游走抉择，特雷莎也尝试着去接受托马斯的存在哲学。当她无法忍受托马斯有一次在肉体上的背叛，她开始了向轻的试探，和一个工程师发生了关系，可是这次行为只给她带来了更深的痛苦，更重的负担，认真是特雷莎的行为方式，认真让她陷入痛苦的绝境，虽然她努力从行为到精神上向自己的爱人托马斯靠近，然而她最终还是失败了，她永远背负沉重的负担，而这沉重恰恰也是对托马斯的一种吸引。</p><p>轻重选择的对立与两难，构成了人类的一个基本存在境况，我们每个人的生活，都可以在这个哲学命题上找到印证，它与善恶无关，究竟是选择青海是选择重，昆德拉并没有给出明确的答案，他只是提出了这个问题并给与了阐释。在一个极限悖缪的时代，轻与重的界限是模糊不清的，甚至是不存在的，追求意义，选择承担，并不一定就能收到预期的沉重感，反而常常导致不能承受的生命之轻，但是，这轻松之中不也包含着生命的沉重吗？</p><h2 id="灵与肉的冲突">灵与肉的冲突</h2><p>肉体与灵魂，使人类得以存在的两种基本形式，人类总是理想化地希望自己的灵肉统一，以把握一个更为真实可感的自我，然而，昆德拉却以一个特定的性爱情境，揭示出灵与肉的分离，使人类再次陷入对自我的无把握之中。</p><p>托马斯与特里莎彼此相爱，可是看待灵与肉的态度却不一样：托马斯认为,爱情与性是互不相干的，爱情不会使人产生性交的欲望，却会引起同眠共枕的欲望。在他看来，使爱从属于性，是造物主最稀奇古怪的主意。灵与肉在托马斯身上自觉的分离着，他一边深爱着特丽莎，一边又和不同的女人做爱，他在爱情上是忠贞的，在行为上却是放荡的。</p><p>特雷莎则要求灵与肉绝对的统一。特雷莎有一个外表美丽而内心粗俗的母亲，她一直在向特雷莎灌输一个观念，特雷莎你与其他人没有区别，你和其他人的身体都是一样的，你没有什么好隐藏的。特雷莎的母亲在光天化日之下裸露着在房间里行走，这令特雷莎感到羞愧和恼怒。特雷莎的一生，就是在于这种观念抗争，她认为人与人是不一样的，灵魂决定了这种个性，否定了肉体的差异，也就否定了灵魂的差异。她带着这种抗争，来到了托马斯身边，寻求救赎，她向他表明她是独一无二的，可是托马斯却把它混入了其他的女人，对她们的身体施以同样的爱抚，把她又扔回了原来的世界。特雷莎的“嫉妒”成为她沉重的痛苦，直到死才得以摆脱，而这种痛苦正源于特雷莎对灵与肉绝对的要求。</p><p>灵与肉的冲突显示了人类对把握自我的无能为力，作为人存在的一个基本范畴，它突出了人类自身的生存悖论，即人不愿再灵肉分离中生活，却只能以灵肉的妥协与调和谋得现实的安适。昆德拉借此对现代社会所导致的人行分裂和异化进行了批判。</p><h2 id="政治与媚俗">政治与媚俗</h2><p>“媚俗”（Kithcs)是昆德拉作品中的响词，在一次与作家埃尔格雷勃里的谈话中，昆德拉将“Kithcs”阐释为“已讲过一千次的美”，“意味着故作多情的集体谎言”，在昆德拉的笔下，媚俗已并非对每一类任何某个特定情景的描绘，也并非仅仅限于艺术，它已成了政治，社会，文化的一个基本特征，成了人类共同生存状态的一个指称。</p><p>西方批评家普遍认为，媚俗之于昆德拉，已经不单单是一个道德概念，而是一个审美范畴。昆德拉认为媚俗起源于“对生命的绝对认同”的美学理想。媚俗的人，指定人类生存中一个基本不能接受的范围，并排斥来自这个范围内的一切比如大粪（shit），这个每天与人们生活息息相关的生理现象，却被很多人有意地回避，人们避免谈论它以及和它有关的一切。《不能承受的生命之轻》第六章《伟大的进军》就是一篇讨伐媚俗的檄文，它的理论首先是从“粪便”开始的，昆德拉举了斯大林之子雅可夫的例子，雅可夫在二战期间被德国人俘虏，和一群英国军官关在一起，共用一个厕所。英国人不满他将厕所搞得又臭又乱，诉诸于集中营的德国军官。然而，德国长官拒绝讨论粪便的问题，雅可夫备感羞辱，以扑向电网的自戕方式来表达自己的抗议。在昆德拉看来，人对粪便的厌恶正是一种基本的媚俗。媚俗是人类生存的一个基本情景，它无处不在，不同的媚俗有着不同的内在含义和批判向度，若果说美学媚俗意指英和伤感类作品的低级艺术情趣，那么政治媚俗则只对既定秩序和既定思想的盲从，文化媚俗则指对多数的，流动的，大众的价值观念的认同，人类学媚俗则指人类在无条件的认同生命存在的前提下表现出的乐观盲从和拒绝思考的态度。“媚俗是存在于忘却间的中途停歇站”，因为媚俗，生命在本真与非本真之间徘徊不定，人的自由存在成了值得怀疑的东西，事物失去最初的一面，流向难以把握的虚空。</p><p>政治，是昆德拉小说中人物的基本生存背景。政治媚俗，则又是昆德拉批判的一个重点，他自己亲身经历的政治迫害使他对这个问题有了更深刻的理解。昆德拉说：“政治并不产生媚俗，但它需要媚俗。任何政治运动都以媚俗，以迷惑他人的愿望为基础。”《不能承受的生命之轻》中，美国参议院对孩子的微笑与布拉格广场检阅台上当权者面对游行者的挥手都是媚俗。“媚俗是所有政客的美学理想，也是所有政客党派和政治活动的美学理想。”</p><p>托马斯和其情人萨宾娜都是媚俗的自觉抵制者。托马斯，一个用外科手术的思维来对待人生的一生，他的生存目的就是要反抗从众。对于托马斯来说，真正的困难不是抵制那个“非如此不可”，托马斯逃离了第一次婚姻，逃离处于专制统治下的祖国，都说明了这一点，真正难的是抵抗本身，在媚俗的集权统治王国里，左右的答案都是预先给定的，对任何问题都有效。心灵的专政即是最高统治，所以昆德拉又说，媚俗的死敌是“爱提问题的人”，一个问题就像一把刀，会划破舞台的布景，让我们看到藏在背后的东西。同时，媚俗也极有可能成为一个陷阱，对媚俗的抵抗也可能成为媚俗的一部分。对于托马斯来说，当在呼吁当局释放政治犯的生命上千字也称为“非如此不可”的事情的时候，抵抗本身也成了一种媚俗；对于萨宾娜来说，当她的绘画被宣传为反共作品时，她便深深感到了西方世界对她处于深重集权灾难中的祖国的怜悯，然而这种怜悯也是一种媚俗，一场西方建立在“博爱”基础上的政治秀。于是，在众人“同情”的目光中，萨宾娜愤然离场。</p><p>而一直爱慕者萨宾娜的法国教授弗兰茨，则是昆德拉所要批判的媚俗的集中代表。弗兰茨是一个乐观的梦想家，20岁时就确立了哲学教授生涯，但它并不满足于学者的窒息生活，他“渴望与人们交往，肩并肩地步行，渴望与他们一起呼叫”，他充满激情，喜欢旅行，也爱同众人一起上街游行。“我们都需要有人望着我们”，他毫不犹豫地参加了声援柬埔寨的“伟大进军”。弗兰茨活在他人的目光里，她急于向情人，向公众，向内心中的另一个自我显示生存的意义，期待获得外界的赞许。他的价值认同，不是建立在对价值本身的追求上，而是为他人而活，最后当他在曼谷街头一场无谓而偶然的斗殴中死去时，他的死不但没有产生悲剧意义，反而具有了某种讽刺的意味，是一个媚俗者的终结。在弗兰茨身上，我们看到了人的有限性，人的自我失落与价值的扭曲，而这一切，正是人的媚俗可能性的一种反映。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
            <tag> 《不能承受的生命之轻》 </tag>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大写的牧歌与小写的牧歌</title>
      <link href="/blog/muge/"/>
      <url>/blog/muge/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jyzhu.top/mydocs/2019/08/image.jpeg" /></p><p>笔记 page1</p><p><img src="https://jyzhu.top/mydocs/2019/08/image-1.jpeg" /></p><p>笔记 page2</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
            <tag> 《不能承受的生命之轻》 </tag>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一场大雨下在科奇蛙的歌颂演练</title>
      <link href="/blog/a-rain-in-frog-sing/"/>
      <url>/blog/a-rain-in-frog-sing/</url>
      
        <content type="html"><![CDATA[<p>清冷的早晨六点，一只立体的蛙从睡梦中醒来。昨晚的梦从记忆里顿消，只残留欢愉的、激烈的印象。这段时间，梦境是立体蛙为数不多的新鲜感来源，不过它们与今天相比，也显得平淡了一些。</p><p>立体蛙赶在七点钟之前到达了指定集合地点。立体蛙，和其他一群科奇蛙，要在这里进行一整天的歌颂演练。</p><p>盛大的歌颂仪式将在两个月后的歌颂节正式启动。歌颂节是科奇蛙一年一度的大事，他们要歌颂空气。</p><p>毫无疑问，伟大的空气是世间唯一的神。它无处不在，无所不包，一切事物都蕴含于其中，此神迹一。它无形无色，从不显露真身，却于一切风吹草动处显现踪影，此神迹二。它滋养万物，世间没有一条生命离得了它，此神迹三。它流动于每一只科奇蛙的声带中，化身蛙语言传播于蛙世间，蛙文明最初就藉此诞生，此神迹四。</p><p>为了歌颂伟大的空气，科奇蛙将在歌颂节举办浩大的歌颂仪式。每一只歌颂蛙在仪式前彻洗喉头，用最洁净的声带，将最悦耳的蛙鸣送给空气。</p><p>实际上，歌颂仪式也不是所有科奇蛙都能参加。湖边的广场有限，只有嗓音条件好的一些蛙被推选为代表，在此进行歌颂仪式。</p><p>立体蛙从小嗓音条件比较好，周围蛙都看好他。实际上，参加歌颂仪式是自主报名的。可在今年的报名开始前，周围蛙几乎已经将立体蛙的入选看作必然结果，羡慕之情溢于言表，纷纷请求他在歌颂仪式中一定也将自己那份溢美亲口传达给空气。</p><p>就这样，在周围蛙的注视中，立体蛙带着他们赋予他的那份必然性，命中注定地报名了歌颂仪式，命中注定地获选了。</p><p>歌颂演练已经进行了一个多月了，今天是一场不大不小的全体合练，将会有几只不高不低的负责蛙前来视察。</p><p>歌颂蛙们总是一副精神高涨的样子。每天重复的歌颂演练，常常弄得歌颂蛙们筋疲力竭，喉头冒烟。但作为伟大空气的歌颂者，和全体科奇蛙的代表者，歌颂蛙们被崇高感和自豪感萦绕着，有着源源不断的动力。</p><p>立体蛙像是个不多不少的例外。每天早起集合时，他的脑海中想着的只有床；喉头冒青烟的时候，他的脑海中只有水；在齐声唱着空气的赞歌时，他常常思想抛锚到昨夜的梦中。</p><p>他认为，简单的歌颂仪式本身不值得这样反复的演练，这样做，只是为了保证歌颂节当天，任何一只歌颂蛙不出任何差错。可是出了一点差错又怎么样呢，难道伟大的空气会在意吗？</p><p>今天又是这样单调重复的一天，除了几只不高不低的负责蛙前来视察了。立体蛙心里懒洋洋地，跟着节奏演练歌颂，乏味地消磨时间。他不怎么跟周围蛙深入谈论什么，因为他理解不了他们那套崇高和自豪理论，他们也忍受不了他的寡淡态度。</p><p>正午时间，几朵比较大的云飘过来，荫蔽了头顶正上方的太阳，给燥热的歌颂蛙们带来些凉意。本来已经到了午休时间，但一只负责蛙一直不满二声部，反反复复演练，拖着不休息。</p><p>立体蛙在队伍中，正好接到了从云层落下来的第一滴雨滴。饥饿使他越来越烦躁，到了规定时间还不休息令他不满，此时他又发现了将要下雨的事实。</p><p>他忍不住抱怨了几句。队伍中另有两三只蛙听到了，也跟着抱怨了几句。其他歌颂蛙充耳不闻。</p><p>越来越多歌颂蛙感受到了雨滴，雨已经下起来了，并且越下越大。</p><p>浓密树荫下的负责蛙在又一次大合唱结束后，听到噼里啪啦的雨打树叶的声音，才后知后觉下雨的消息。</p><p>可负责蛙又指挥起了新一轮大合唱。毕竟雨还不大，况且科奇蛙可是两栖动物，滑溜溜的皮肤并不怕雨水。</p><p>但这并不妨碍有一些科奇蛙，单纯出于个蛙的喜好，不喜欢下雨，不喜欢被雨淋湿的感觉。</p><p>立体蛙就是其中一只。他不喜欢下雨，也不喜欢游泳。他还想到淋湿可能会增加一些蛙患感冒的风险。他愈发恼火，想不明白负责蛙有什么理由留住他们，到了规定时间还不休息，何况现在又下雨了。</p><p>立体蛙气得满脸涨红，用全体歌颂蛙都听得到的声音喊了一句：「下雨了！」</p><p>负责蛙听到了，愣了一下，满眼怒气地朝立体蛙的方向盯了一眼，徐徐开口：</p><p>「你们歌颂队伍是我见过的最差的队伍！声部唱不好，纪律还差。你们可是代表全体科奇蛙向伟大的空气致敬的光荣团体，你们是不是没有足够的觉悟？」</p><p>歌颂蛙全都屏住了呼吸，几秒钟内鸦雀无声。负责蛙比较满意，歌颂演练继续进行起来。</p><p>立体蛙也屏住了呼吸，不过是被惊呆了。他想，今天居然碰上了这样一个逻辑混乱的负责蛙。他忿忿不平地想要抱怨，却被周围蛙齐刷刷的埋怨眼神制止住了。</p><p>雨已经下得很大了，雨滴又大又密，唰唰地打在歌颂蛙的身上。</p><p>两遍大合唱之后，负责蛙对大家的进步感到满意，再次徐徐开口道：</p><p>「歌颂蛙不愧是科奇蛙的优秀代表，你们大家都是好样的！天下起大雨，这是空气对大家的考验，大家都坚持下来了。大家靠不懈的意志战胜了艰难，取得了进步，这一切都被无处不在的空气看在眼里。大家应该给自己鼓鼓掌！」</p><p>负责蛙带着大家鼓起掌来。歌颂蛙的掌声夹杂着暴雨声在空气中回响，他们真诚地为自己鼓掌，为每一只科奇蛙鼓掌，为团结优秀的集体鼓掌，为这一刻热烈又整齐的鼓掌而鼓掌。每一只科奇蛙都激动极了，自豪感萦绕在他们的胸膛，他们感动得热泪盈眶，热泪混杂着雨水糊了满脸。</p><p>立体蛙像是个多余的异类。他无法接受刚刚还在斥责他们的负责蛙转瞬的虚伪的夸赞，无法理解区区几句话就让所有蛙忘却了饥饿、休息与暴雨，无法感知此时科奇蛙们莫名其妙的相互交织起来的感动情绪。</p><p>他一瞬间对这一切失望透顶。显然，倒霉的歌颂队伍在演练时遇上了暴雨，倒霉的负责蛙一意孤行致使歌颂蛙全体淋雨，这一切怎么就被美化成空气对科奇蛙的考验了呢？空气怎么可能知道这一切呢？空气怎么可能指使一场荒唐的暴雨呢？</p><p>立体蛙沉浸在短暂的迷惘中，没有鼓掌，没有感动的泪水。他的异常举动被周围蛙发现了，周围蛙震惊地质问他，为什么如此冷漠，为什么对空气如此不敬。</p><p>突兀的质问击中了立体蛙，成为压垮他的最后一根稻草。他的五脏六腑被愤怒填满了，他出离地愤怒了。冷漠、不敬、暴雨、负责蛙、周围蛙、歌颂仪式、空气……这一切完完全全地不可理喻，所有的所有都荒唐透顶！</p><p>立体蛙愤怒地喊出来了，喊出来了他从来没想过会真正表达出来的话，喊出来了他再也无从忏悔的话：</p><p>「空气，空气不是神，什么也不是！一只蛙出生在空气中，死也是在空气中。空气的存在说到底不是什么特别的事情，从来没有什么意义！」</p><p>所有蛙瞪大了眼睛，疑惑、不解、轻蔑、诧异，没多久通通转为愤怒……在全体蛙盛大的感动中，居然有这样一个冷漠的家伙；在毫无疑问伟大的空气面前，居然有这样一个愚蠢的家伙。有的蛙骂着他冷漠、愚蠢，更多的蛙甚至来不及想什么……他们用拳头和口水将立体蛙淹没，他们动用所有的力量斥责他、讨伐他。</p><p>他们顷刻间将这只蛙变成了一只扁平的蛙。</p><p>扁平蛙由寥寥数笔压缩进了翌日的新闻一栏中，过了些时日便彻底消失于空气中。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么要搭建一个自己的博客网站？</title>
      <link href="/blog/why-blog/"/>
      <url>/blog/why-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="最初我以为建站太过复杂">最初我以为建站太过复杂。</h2><p>上网页设计课那会儿，和小组几个同学（主要是zz）一块儿从0到1搭了个「指尖星空」静态网站。html+css+一点点js，效果都是一点一点调出来的。</p><p>在那时候我的认知中，真正的网站除了要这样自己一页一页写网页代码，还需要自己搭后台、自己写数据库、建立数据库-后台-前台连接……可不工程浩大嘛。</p><p>建站这样高级的工作，涉及广泛的知识，需要大量的精力……我以为我就算了。</p><h2 id="后来我以为建站太过简单">后来我以为建站太过简单。</h2><p>后来写爬虫的时候开始玩云服务器，查VPS可以拿来干些什么的时候，发现了WordPress这类傻瓜式建站工具——只要配置好环境，安装WordPress，一点代码也不用敲，一个网站就搭好了。</p><p>我想：建个网站，代码都不敲，那还有什么意义？能学到什么？？</p><p>我陷入了「造轮子」悖论：如果自己造轮子，鞠躬尽瘁死而后已，造出来的轮子也没有人家的好用，不过是体验了一番；如果不重复造轮子而直接拿来用，那又只能流于浅表，永远学不会深的东西……</p><h2 id="建站之后">建站之后……</h2><p>后来还是心痒痒，憋不住决定倒腾先。就拿WordPress搭了这个网站。</p><p>具体在这篇文章里：<a href="https://jyzhu.top/articles/my-blog-setting-up/">Vultr+WordPress搭建个人博客</a></p><p>于是可以列举一下我的收获：</p><ol type="1"><li>当然是收获了一个个人站。随心所欲选外观，随心所欲放东西在上面，很欣喜。虽然几乎没人看，但也不妨碍我自嗨。耶~</li><li>对网站有了概念。过去也知道网站分前端、后台、数据库，但如今有了从后台视角看网站的体验，对它的理解上升了一个层次。至少在我想象中，如果下次要自己造轮子的话，我已经有了自己的面向对象思路了：<ol type="1"><li>内容可分为文章、固定页面、菜单等。文章专注于内容创作，是日常发表用的；固定页面除了内容以外，整个页面的布局都可以自由安排，如果有主页、关于页面、隐私页面等等需求，都可以编辑特定的固定页面；菜单就不解释了。</li><li>网页元素可分为主菜单、内容主体、侧边栏、页脚栏等。每个元素里面承载什么可以自由安排。</li><li>更宏观地看，一个网站可分为外观、内容、其他功能等。互不干涉，各成体系。</li></ol></li><li>对服务器、网站、域名、SSL证书等等概念及之间的关系有了理解。对下学期学计算机网络课应该有帮助吧~</li></ol><p>建个人站确实很简单……但也很有趣，就凭这点可能就够了。</p><p>不过我还有许多要完善和学习的东西，并且我还需要在长期维护网站上花精力。任重道远啊。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress的主题和插件安装&amp;自定义HTML侧边栏</title>
      <link href="/blog/wordpress-note-2/"/>
      <url>/blog/wordpress-note-2/</url>
      
        <content type="html"><![CDATA[<h2 id="主题">1. 主题</h2><p>挑选主题的时候我的需求定位是这样的：</p><ol type="1"><li>性冷淡风，简洁干净但不吃藕</li><li>适合博客，而不是商务or作品集or乱七八糟的</li><li>以文字为主，我可懒得为每篇文章配图，微信公众号已经足够恶心了🤮</li><li>有侧边栏</li></ol><p>本来觉得官配主题「twenty nineteen」的性冷淡风很合我胃口，结果捯饬了一天发现它有一个无法忍受的缺点：<strong>不支持侧边栏！</strong></p><p>我尝试了官网提供的自定义小工具方法但是失败了，怀疑是因为那条教程已经过时了；当然也可能单纯怪我不会PHP……</p><p>于是我重新挑了个主题，就是现在的<a href="https://generatepress.com/">GeneratePress</a>。</p><p>不用不知道，一用才知道功能真丰富，我挺满意的。</p><h2 id="插件">2. 插件</h2><p>上知乎看了看常用插件。我主要装了这些：</p><ol type="1"><li>SSL：一键SSL证书安装。（虽然我没用上，最后还是手动安装的）</li><li>Elementor：拖拽式狂拽炫酷排版，精致花哨，就是有点慢</li><li>WP Fastest Cache：Cache嘛，加快加载速度用的</li><li>Post Views Counter：文章访问量计数</li><li>EWWW Image Optimizer：图片压缩，也是加快加载速度用的</li><li>Wordfence：站点安全</li><li>Yoast SEO：搜索引擎优化方面功能无比齐全</li></ol><h2 id="自定义html侧边栏">3. 自定义HTML侧边栏</h2><p>害。我就想整个简简单单「头像-名字-一句话简介」个人介绍侧边栏，先是想用Elementor排版，结果发现它只能做具体页面，没法实现通用的侧边栏。多简单一功能啊，Elementor接下来应该考虑出一个编辑小工具的功能。后来我想直接用小工具自带的「文本」编辑器，插入图片和文字完了。结果效果太吃藕，简单的图左字右做不到……气得我啊。</p><p>于是我用我蹩脚的HTML写了简单几行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width: 130%; margin-left: -10%;&quot;&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">    &lt;div style=&quot;width: 40%;&quot;&gt;&lt;img src=&quot;https://jyzhu.top/wp-content/uploads/2019/08/ricks-head.png&quot; alt=&quot;&quot; width=&quot;80%&quot; height=&quot;71&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;width: 60%;&quot;&gt;</span><br><span class="line">        &lt;h3 style=&quot;line-height: 10px; margin-top: 20px;&quot;&gt;&lt;strong&gt;树上吃鸡腿&lt;/strong&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;h5 style=&quot;line-height: 15px;&quot;&gt;kayontree&lt;/h5&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;&lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;♀&quot; src=&quot;https://s.w.org/images/core/emoji/12.0.0-1/svg/2640.svg&quot;&gt;, &lt;img draggable=&quot;false&quot; class=&quot;emoji&quot; alt=&quot;🏳️‍🌈&quot; src=&quot;https://s.w.org/images/core/emoji/12.0.0-1/svg/1f3f3-fe0f-200d-1f308.svg&quot;&gt;, loving coding &amp; reading &amp; my girl.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://jyzhu.top/mydocs/2019/08/image.png" /></p><p>就这么凑合着用吧……</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> HTML </tag>
            
            <tag> WordPress Plugin </tag>
            
            <tag> WordPress Theme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周期</title>
      <link href="/blog/period/"/>
      <url>/blog/period/</url>
      
        <content type="html"><![CDATA[<p>周期是时间之矿所结的钻石</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻鸟</title>
      <link href="/blog/stupid-bird/"/>
      <url>/blog/stupid-bird/</url>
      
        <content type="html"><![CDATA[<p>“一只撞上玻璃的傻鸟<br />思考：</p><p>‘属于我的，<br />自由的、广袤的天空，<br />原来竟也有——<br />看不见的边界，’”</p><p>一个围墙里的人笑。</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>荒诞之一</title>
      <link href="/blog/one-of-absurd/"/>
      <url>/blog/one-of-absurd/</url>
      
        <content type="html"><![CDATA[<p>人与人可用戏谑的话对话一整天<br />戏谑之中竟然可以包含信息<br />一个人竟然可以在戏谑与严肃之间无缝切换<br />这就是荒诞之一</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无题（几？）</title>
      <link href="/blog/no-title-no-num/"/>
      <url>/blog/no-title-no-num/</url>
      
        <content type="html"><![CDATA[<p>如果给我永恒</p><p>也请给我遗忘</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>白色的一天</title>
      <link href="/blog/white-day/"/>
      <url>/blog/white-day/</url>
      
        <content type="html"><![CDATA[<p>白色的一天<br />昏昏碌碌<br />天是一片白<br />头脑是一片白<br />昏沉<br />沉</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>友情</title>
      <link href="/blog/friendship/"/>
      <url>/blog/friendship/</url>
      
        <content type="html"><![CDATA[<p>永远在我的你</p><p>永远是</p><p>你的我</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>未来</title>
      <link href="/blog/future/"/>
      <url>/blog/future/</url>
      
        <content type="html"><![CDATA[<p>我们小时候从低的视角<br />仰望成人的高高的世界<br />觉得那里充满了真与理<br />等到现在有了成人目光<br />发现遍地是错误与愚蠢<br />不停上演在过去和将来</p><p>我们坚信真理客观存在<br />可现实好像还遥遥无期<br />就算是为了正确的真理<br />做出的仍是愚蠢的事情<br />伟大的马克思教给我们<br />螺旋发展否定再否定吧<br />更好的世界永远在未来</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爱两首</title>
      <link href="/blog/love-2/"/>
      <url>/blog/love-2/</url>
      
        <content type="html"><![CDATA[<h1 id="一-歌颂爱">一 歌颂爱</h1><p>不是阳光底下生长的青草<br />是阴暗角落滋生的低落<br />不是值得夸耀的喜事<br />是难以启齿的心事<br />是下坠的细碎的沙<br />从海平面开始抛洒<br />是湿 是冷 是旋涡<br />是欲 是哀 是毁灭<br />与风花雪月无关<br />与甜无关<br />大部分是涩的<br />是痛苦 是病入膏肓本身<br />是不便于由穿着雪白礼服的孩童高歌的<br />应该由一只黑色的乌鸦斜斜地飞过<br />嘴里嘀嘀咕咕<br />念叨着一种叫做爱的神秘事物</p><h1 id="二-你的向往我的向往">二 你的向往，我的向往</h1><p>你向往什么？<br />这问号是镶有珍贵珠宝的，<br />我向往什么？<br />这问号是鲜红色的。</p><p>你的烂漫的心底，<br />我想有一片草原，一片湖，<br />很少的人，很多的情话。</p><p>我的心里是一片旋涡——<br />有很多的跟我们谈论着同样话题的人，<br />有一片沼泽，我们走在沼泽边上<br />脱下衣服，目光就打量过来。</p><p>自由谈不上<br />我向往一种下坠，<br />一种痴痴的美。</p><p>我向往的爱应该由<br />一只黑色的乌鸦斜斜地飞过，<br />嘴里嘀嘀咕咕着，<br />或者吞吞吐吐着。<br />你呢，你想飞翔吗？</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>老家</title>
      <link href="/blog/hometown/"/>
      <url>/blog/hometown/</url>
      
        <content type="html"><![CDATA[<p>来凤</p><p>这儿的每一条路都可以一眼望到头</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>孩子</title>
      <link href="/blog/children/"/>
      <url>/blog/children/</url>
      
        <content type="html"><![CDATA[<p>孩子难产了<br />那冰冷的手术刀在与时间抗争<br />大瓶大瓶红色的血液顺着血管流到地上<br />医生和护士们眼里含着热切<br />妈妈在无声地呐喊<br />门外<br />一众血液中流淌着相同基因的亲人们在盼<br />一些来来往往的人透出善意的眼光<br />流淌着孕育这样一个脑的基因的血液<br />全人类都在为这个孩子祈祷<br />祈祷他安全 活着来到这个世界<br />祈祷他睁开双眼看这些星星和飞鸟<br />他不安的手开始挥舞<br />他的血液接近沸腾<br />一阵狂暴的屏息声——<br />紧接着是一声<br />哇——<br />孩子用哭声宣告了人生第一场战役的胜利<br />他是妈妈 医生 护士 亲人 全人类努力的结晶<br />这世上不乏孩子</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>光明</title>
      <link href="/blog/brightness/"/>
      <url>/blog/brightness/</url>
      
        <content type="html"><![CDATA[<p>每一个人都是粗粗的线条<br />在绵薄无力的纸似的世间活着<br />踏着钢丝绳细的时间<br />稍有不慎<br />跌入畜养着毒蛇的深渊<br />这毒蛇比世间所有毒物加起来还毒<br />吐着毒刺似的信子<br />垂着水银似的涎<br />那獠牙锋利如针尖<br />脸上狰狞地写着粗秽的皱纹<br />那毒蛇仰起头看着钢丝上的人间<br />那双眼透出的分明是欣喜<br />是爱<br />是浓烈的希望与光明<br />那毒蛇不是别的<br />竟是一个个得道的仙</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>brainwash</title>
      <link href="/blog/brainwash/"/>
      <url>/blog/brainwash/</url>
      
        <content type="html"><![CDATA[<p>他们是向幼儿<br />说着那些成套的谎言<br />编纂一个虚假的梦似的世界<br />来让你从一开始<br />还辨不清的时候<br />对这个世界产生爱与眷恋<br />再在漫长的一生之中慢慢消磨</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无题（二）</title>
      <link href="/blog/no-title-2/"/>
      <url>/blog/no-title-2/</url>
      
        <content type="html"><![CDATA[<p>早晨感到我是一种图层式的人生</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="/blog/no-title-1/"/>
      <url>/blog/no-title-1/</url>
      
        <content type="html"><![CDATA[<p>仔细听发现蝉的沉默和星的闪发生了共振</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我想象夜色的时候</title>
      <link href="/blog/when-i-imagine-night/"/>
      <url>/blog/when-i-imagine-night/</url>
      
        <content type="html"><![CDATA[<p>我想象夜色的时候<br />想到了蝉鸣<br />漆黑的云<br />趴在纱窗外的蛾子<br />地球另一端的黄昏和黎明<br />我忘了星星</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>圆</title>
      <link href="/blog/%E5%9C%86/"/>
      <url>/blog/%E5%9C%86/</url>
      
        <content type="html"><![CDATA[<p>出生之时无人问我，<br />是否愿意降临这世上？<br />无故地迫我<br />落入这段循环的空档<br />春天里我问<br />哪里适合把花来葬？<br />到了秋天我问<br />柚子自己想不想高高挂枝上？<br />游历四方时我问<br />何以来这无何有之乡？<br />秉烛夜奔时我问<br />星空下何需这微渺的光？<br />一些石子滚过我<br />乒乒乓乓叮咚哐啷<br />许多马蹄踏过我<br />咣咣咣咣咣咣<br />我等啊等啊等啊等到<br />整个天空<br />第32714次<br />只剩斜阳<br />那戈多的信使来回答我：<br />圆是生命的形状</p><p>——高三命题小作文《圆》</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>放学</title>
      <link href="/blog/%E6%94%BE%E5%AD%A6/"/>
      <url>/blog/%E6%94%BE%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>放学是一种仪式<br />被囚禁的鲜活的<br />焦虑就此放生<br />郁结的葱茏的<br />愊忆<br />被蜂簇拥到泥地里</p><p>是一种调频<br />赶着去的步子把你调到高频<br />适应笔和PPT <br />悠悠地回来 <br />调成和枯树枝的晃晃一个频率<br />和星子的闪发生一些共振<br />在教室的时候我是死的<br />在卧室的时候我是静止的<br />我活在路上</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>17yo</title>
      <link href="/blog/17yo/"/>
      <url>/blog/17yo/</url>
      
        <content type="html"><![CDATA[<p>想成为一具尸体</p><p>蜷缩在十七岁死者的房间里</p><p>腐烂在世界的肠子里</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Proust Questionnaire</title>
      <link href="/blog/proust-questionnaire/"/>
      <url>/blog/proust-questionnaire/</url>
      
        <content type="html"><![CDATA[<p>19.8.13 20岁</p><p><strong>1.你认为最理想的快乐是什么?</strong></p><p>心无旁骛地在大自然中阅读和做爱。</p><p><strong>2.你最希望拥有哪种才华?</strong></p><p>深入地看透事物本质的能力。</p><p><strong>3.你最害怕什么?</strong></p><p>从根本上来说没有真正害怕的事物，只有害怕的情绪。</p><p><strong>4.你目前的心境怎样?</strong></p><p>做事时焦虑而懒惰，睡觉前伤心且失望。</p><p><strong>5.你本身最显著的特点是什么?</strong></p><p>普通。</p><p><strong>6.你认为你最伟大的成就是什么?</strong></p><p>活到现在竟然没有我想象中那么绝望。</p><p><strong>7.自己的哪个特点让你最痛恨?</strong></p><p>普通。</p><p><strong>8.你希望让什么重现?</strong></p><p>人生路上那些重大选择的机会吧，如果重现的话我希望选另一条路看看。</p><p><strong>9.你最痛恨别人的什么特点?</strong></p><p>损人不利己。</p><p><strong>10.你最珍惜的财产是什么?</strong></p><p>都差不多，丢失了可惜，但也没有大的影响。</p><p><strong>11.你认为最奢侈的是什么?</strong></p><p>浪费别人的爱意和浪费自己的时间。</p><p><strong>12.你认为程度最浅的痛苦是什么?</strong></p><p>都很痛苦，说不上来深浅。</p><p><strong>13.你认为哪种美德被过高评估了?</strong></p><p>热情吧，感觉没什么用。</p><p><strong>14.你最喜欢的职业是什么?</strong></p><p>Programmer || Writer</p><p><strong>15.你对自己的外表哪一点不满意?</strong></p><p>脸。随便再长得好看点就好了。</p><p><strong>16.还在世的人中你最钦佩的是谁?</strong></p><p>真正的智慧∩真正的善良。</p><p><strong>17.还在世的人中你最轻视谁?</strong></p><p>那些将自己的利益凌驾于他人之上的人。</p><p><strong>18.你最喜欢男性身上的什么品质?</strong></p><p>温柔，自信谦虚，爱思考。</p><p><strong>19.你最喜欢女性身上的什么品质?</strong></p><p>温柔，自信谦虚，爱思考。</p><p><strong>20.你使用过最多的单词或者词语是什么?</strong></p><p>哈哈哈。</p><p><strong>21.你最伤痛的事是什么?</strong></p><p>对他人造成的伤害。</p><p><strong>22.你最看重朋友的什么特点?</strong></p><p>聪明，善解人意。</p><p><strong>23.这一生中最爱的人或东西是什么?</strong></p><p>妈妈。</p><p><strong>24.何时是你生命中最快乐的时刻?</strong></p><p>小时候，不懂得生活的时候。</p><p><strong>25.你希望以什么样的方式死去?</strong></p><p>想死的时候死去。</p><p><strong>26.你的座右铭是什么?</strong></p><p>没有什么好后悔的，只有一些该痛苦的。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vultr+WordPress搭建个人博客</title>
      <link href="/blog/my-blog-setting-up/"/>
      <url>/blog/my-blog-setting-up/</url>
      
        <content type="html"><![CDATA[<h4 id="deploy-vultr-vps-install-wordpress-application">1. Deploy Vultr VPS &amp; Install WordPress Application</h4><p>在 <a href="https://www.vultr.com/" class="uri">https://www.vultr.com/</a> 上购买Vultr云服务器。选择Vultr的好处：</p><ol type="1"><li>价格感人：充10$送50$，低配服务器只要5$/month（<em>最低2.5，但现在这个价的好像只剩ipv6 only的了）</em></li><li>地域：国外，你懂的</li></ol><p>我选的是东京的服务器，在选择OS的时候直接选择了WordPress Application，事实证明确实挺one-click的。<br />除了直接安装Application之外，也可以选Ubuntu，网上也有LNMP一键安装包什么的。</p><p><strong>注意：</strong>进行下一步之前一定要确认：新部署的VPS的IP是否已经被墙了。果然如此，那就销毁&amp;重新部署，多试几次，换个能用的IP。</p><h4 id="购买域名">2. 购买域名</h4><p>我上阿里云买了个1元/年的域名哈哈哈，挺便宜。</p><h4 id="follow-the-instructions-to-complete-the-installation">3. Follow the Instructions to Complete the Installation</h4><p>在Vultr的页面上直接可以看到的步骤：</p><ol type="1"><li>Log into the WP admin panel using your credentials</li><li>Point your domain name &quot;A record&quot; to your IP address</li><li>Edit your &quot;WordPress Address (URL)&quot; and &quot;Site Address (URL)&quot; to match your domain name. This is located in: WordPress Admin, Settings, General.</li></ol><p>除此之外，<a href="https://www.vultr.com/docs/one-click-wordpress" class="uri">https://www.vultr.com/docs/one-click-wordpress</a> 这儿的后续步骤也要完成。</p><p><strong>坑：</strong>我一开始用浏览器死活进不去它给我的地址 <code>https://xxx.xx.xx.xx/wp-admin/</code>，求助liangmx，弄了半天才知道是没有SSL证书，Chrome跟Safari都莫名其妙把连接给断了？总之，第一次登录记得用<code>http://xxx.xx.xx.xx/wp-admin/</code></p><h4 id="选做购买ssl证书-安装证书">4. （选做）购买SSL证书 &amp; 安装证书</h4><p>这个我也是在阿里云买的，有免费DV版，free/年。</p><p>安装的话follow <a href="https://www.vultr.com/docs/one-click-wordpress" class="uri">https://www.vultr.com/docs/one-click-wordpress</a> 就行了：</p><ol type="1"><li>Obtain a certificate from a certificate authority for your domain.</li><li>Login to your server using <code>ssh</code> as root.</li><li>Replace the <code>server.crt</code> and <code>server.key</code> files in <code>/etc/nginx/ssl/</code> with the updated certificate. Details on converting certificate formats are outside of the scope of this article.</li><li>Restart the web server: <code>systemctl restart nginx.service &amp;&amp; systemctl restart php7.2-fpm.service</code> ( PHP version may vary )</li></ol><h4 id="select-wordpress-theme-decorate-the-blog">5. Select WordPress Theme &amp; Decorate the Blog</h4><p>我挑来挑去发现还是官配主题「二零一九」性冷淡风比较合我胃口。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> VPS </tag>
            
            <tag> Vultr </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界，您好！</title>
      <link href="/blog/hello-world-1/"/>
      <url>/blog/hello-world-1/</url>
      
        <content type="html"><![CDATA[<p>两个月以前就有建blog的想法了，终于在这两天动手了！</p><p>我要特别感谢liangmx同学的帮助~</p><p>这篇blog用来表达庆贺！祝贺我自己！耶耶耶！</p><p>To-do list:</p><ol type="1"><li>添加SSL证书</li><li>Follow <a href="https://www.vultr.com/docs/one-click-wordpress" class="uri">https://www.vultr.com/docs/one-click-wordpress</a> 完成后续步骤</li><li>不知道怎样更方便地支持Markdown？</li><li>多写几篇文章，然后调整一下页面布局</li></ol>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eternal</title>
      <link href="/blog/eternal/"/>
      <url>/blog/eternal/</url>
      
        <content type="html"><![CDATA[<p>我的乌紫色的天底下<br />到底是什么一种蛇在嘶吼<br />在引我体内的火苗<br />升腾的同时奄奄一息？<br />我感到我的四肢分明乏力<br />但又想要最深的紧绷<br />我的躁狂的心需要一盆酒来浸泡<br />让我腾腾上升<br />这世间到底有什么隐蔽的事物<br />遮挡在我整个眼前<br />弥漫在我整个空间<br />我要疯了<br />或者已经疯过几次了<br />我在疯而又疯的道路上<br />狂奔<br />是什么引起我下坠的欲望<br />是什么引起我粉碎的欲望<br />是什么引起我升腾的欲望<br />我感到<br />人不是世界上重要的事情<br />什么是？<br />神秘主义满足不了我<br />理性主义更不<br /><strong>我不渴望美了 </strong><br /><strong>我只想要减缓我的大脑的转速</strong><br /><strong>否则请给我永恒</strong></p><p>19.7.20</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 难言二首 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summer &amp; You</title>
      <link href="/blog/summer-you/"/>
      <url>/blog/summer-you/</url>
      
        <content type="html"><![CDATA[<p>你擅长将贴切的比喻信手拈来<br />我擅长夸你</p><p>阳光雪白<br />使我想念你的肉体</p><p>我们在酒店的床上下军棋<br />你的司令收了我的半壁江山<br />和我的心</p><p>抱住你<br />不知道是一只脚<br />不知道是在迷糊的梦里<br />不知道竟然凑上去亲了亲</p><p>6.23</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有一个年轻人活在死与意义的追逐中</title>
      <link href="/blog/a-young-person/"/>
      <url>/blog/a-young-person/</url>
      
        <content type="html"><![CDATA[<p>奥特卡、米蒙娜和埃恰的故事是年轻人一直很中意的：</p><blockquote><p>这三个女孩来自山区，她们的家乡就在玛妮娅的小镇附近，她们名叫奥特卡、米蒙娜和埃恰。</p><p>为了寻找财富，三个女孩来到姆扎卜。如果是想赚钱，山里出来的姑娘大多会去阿尔及尔、突尼斯或者这里，但这三个女孩最想做的事情只有一件：她们想在撒哈拉喝茶。</p><p>姆扎卜的男人都很丑陋。女孩儿们在盖尔达耶的咖啡馆里跳舞，但她们总是很悲伤。她们依然想在撒哈拉喝茶。</p><p>就这样，很多个月过去了，她们一直待在姆扎卜，她们非常、非常悲伤，因为这里的男人都那么丑陋。他们都丑得像猪一样，而且对这些女孩儿十分吝啬，所以她们没法儿离开去撒哈拉喝茶。</p><p>有一天，来了个图阿雷格人，他高大英俊，坐着一辆漂亮的梅哈里。他跟奥特卡、米蒙娜和埃恰聊天，给她们讲沙漠的故事。他谈起自己的家乡，自己生活的地方，女孩们听得目不转睛。他说：「为我跳舞吧。」于是她们开始跳舞。他跟三个女孩一起做爱，然后他给了奥特卡一枚银币，给了米蒙娜一枚银币，又给了埃恰一枚银币。天亮以后，他坐上梅哈里去了南方。</p><p>从那以后，女孩儿们都非常悲伤，姆扎卜在她们眼里变得更加丑陋，她们一心想着那个住在撒哈拉的高大的图阿雷格人。</p><p>很多个月以后，她们还是没有赚到够去撒哈拉的钱。女孩儿们一直留着那几枚银币，因为她们都爱上了那个图阿雷格人。她们都十分悲伤。有一天，女孩儿们说：「这样下去我们就全完了——总是这么悲伤，永远也不能在撒哈拉喝茶——所以现在，我们无论如何都得出发，就算没有钱。」于是她们把钱凑到一起，甚至包括那三枚银币。她们买了一个茶壶，一个茶盘和三个茶杯，然后买了三张去古莱阿的车票。下车以后，她们的钱已经所剩无几。女孩儿们把钱全都给了一个领着驼队往南去撒哈拉的商队头领，于是他同意带着她们一起走。</p><p>一天晚上，太阳下山以后，三个女孩来到高耸的沙丘间，她们想：「啊，现在我们终于来到了撒哈拉，我们来煮茶吧。」月亮升上来了，所有男人都睡着了，只有守夜人坐在骆驼群边吹着长笛。奥特卡、米蒙娜和埃恰带着茶盘、茶壶和茶杯悄悄离开了驼队。她们要寻找一座最高的沙丘，好将整个撒哈拉尽收眼底。然后她们会开始煮茶。她们走了很久。奥特卡说：「我看到了一座很高的沙丘。」于是她们走过去，爬到沙丘顶上。然后米蒙娜说：「我看到那边有座沙丘，它比这座高得多，从那儿我们可以一直望到因萨拉赫。」于是她们去了那座沙丘，它的确要高得多。可是等她们爬到沙丘顶上以后，埃恰又说：「看哪！那座沙丘才是最高的。我们可以望到塔曼拉塞特，图阿雷格人就住在那里。」太阳升起来了，她们一直走啊走。到了中午，女孩儿们都觉得很热。但她们还是走到了沙丘脚下，开始向上爬呀爬。爬到沙丘顶上以后，她们都很累了，于是她们说：「我们先休息一会儿，然后再煮茶。」她们把茶盘、茶壶和茶杯都摆了出来，然后躺下来睡着了。接下来，——</p><p>很多天以后，另一支驼队从附近路过，有个男人看到最高的沙丘上似乎有什么东西。他们爬到沙丘顶上查看，于是发现了奥特卡、米蒙娜和埃恰。她们仍躺在那里，保持着入睡时的姿态。<strong>三个茶杯，里面灌满了沙子。那就是她们在撒哈拉喝到的茶。</strong></p></blockquote><p>这个故事让年轻人沉思。他想不清楚，打动他的到底是撒哈拉的茶，还是姆扎卜的悲伤。他又想，奥特卡、米蒙娜和埃恰真是可爱又幸福，如果自己也活成这个样子，那可太棒啦。年轻人也想到了臧克家说的话，<em>「人生永远追逐着幻光，但谁把幻光看成了幻光，谁便沉入无底的苦海。」</em></p><p>年轻人曾经对生活有过一些误解，这样的误解对于一个年轻人来说倒很平常，值得原谅——他曾说，「想成为一具尸体，蜷缩在十七岁死者的房间里，腐烂在世界的肠子里。」这是他十七岁的时候，非常、非常悲伤的时候，他甚至很羡慕《挪威的森林》里的直子。他想，十七岁是一个人最好的年纪，死在这样的年纪真是太棒啦。</p><p>那时候他身边还有一位十分重要的朋友，与他一起谈论着那些不着边际的话题。朋友说，我盼望有一天，我人生中最最幸福的一天，我盼望死在那一天。他们在一个漫长的周日里闲逛，正午的阳光洒在法华寺，傍晚的微风又吹进紫竹院。在紫竹院的一棵柳树下，太阳即将落山的时候，长庚星忽然明亮起来。十七岁的年轻人分明地感到，那是他一生中最幸福的时刻。日后回想起来，他觉得，我已经死在那里啦，我已经死过一遍啦。</p><p>年轻人依旧很敬畏那些村上春树或渡边淳一，只是他们总是提出问题又不给解决方案，他感到有些厌倦了。于是那些村上春树或渡边淳一的影子渐渐从他身上消失了。他的人生还很漫长，仍然很漫长，他仍然得找到点什么来跟追逐他的东西做抵抗。</p><p>年轻人的日记本上某日有记载：</p><ol type="1"><li>我找遍所有的街都没有我心目中那种能使我渴求，盼望，无比满意的饮料，有的只是差强人意的，走近超市左挑右捡勉强选择的。我还在寻找。</li><li>我没有找到一本使我沉迷不拔，念念不忘，昼夜颠倒手不释卷的书。或许曾经有已经被忘了。我还在找，一定有的。</li><li> 我没有遇上那种非如此不可的关雎似的恋人，或许不会有的。</li><li> 那种使我日不能思夜不能寐愿穷一生追随的兴趣呢？我只找到三分之一个。</li></ol><p>年轻人在读加缪的时候，写下了一些抽象的逻辑，他把这誉为他人生观基座的关键一块砖，只是读来拗口：</p><blockquote><p>认识「人生的荒诞性」只是起点。</p><p>接下来有的人选择自杀，这是受激情的指使而非理性；有的人选择希望来逃避思想，但这希望已经超出生活本身，因此也是一种弄虚作假。这两种选择都是逃避或放弃。</p><p>一个人应该用逻辑来证明「人生荒诞无意义」是否可以推断出「人应当选择自杀」，在获得清晰理性的结论之前，选择死完全是意义不明的。人应该勇敢地坚持思考，执着和洞察才是最宝贵的。</p></blockquote><p>没想到这样脱离生活的话竟然真的能成为支撑他生活的动力。</p><p>年轻人的生活大多数时候与我们一样，没什么可谈的。唯一不一样的是，他发现了一座离生活很远的神圣土包。据考，那座土包位于北京西南一个不起眼的沼泽公园中。当其他地方的生活变得沉重、晦暗而难以腾挪的时候，世界上唯有那座小土包，保有可供呼吸的空气。年轻人爱坐在土包顶的石墩上，望着不远处的沼泽出神。_「或许这儿就是西西弗的巨石每次从山上滚落时停止的地方！」_年轻人想。倒是很贴切，因为或许那儿就是年轻人的生活每次重启的地方。北京的上个秋天，年轻人带着一本昆德拉坐在那里；这个春天，杨絮纷飞的时候，他又带着一本卡尔维诺去过那里。这些就是年轻人的简单的重启仪式。</p><p>年轻人有自己热爱的事情，精力充沛的时候，一不小心就投入到物我两忘。他真幸运。年轻人说，他不喜欢用力活着，喜欢闲散。他还爱拿尼采的一句「闲散是天才的理想，懒惰是浪漫主义者的美德」说事。可是不管他怎么说，他活得还挺用力的，因为他有自己热爱的事情。</p><p>有一次问起来最想成为什么，年轻人居然说，最想成为一棵树。问为什么，他说，一棵树，同其他的树一样并排立着，但并不靠着。一棵树静止在时光中，呆呆地只干一件事，就是立着。一棵树什么也不做，但又什么都做过了，那是生命最本质的样子。</p><p>他可真是一个十足的浪漫主义者跟理想主义者。</p><p>年轻人今天二十岁了，他觉得时间过得真快。我想的同他一样。</p><p>（年轻人系虚构，如有雷同，纯属巧合。）</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成与体系结构</title>
      <link href="/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>#Chapter 1</p><h2 id="硬件软件等效原理">1. 硬件软件等效原理</h2><p>任何可用软件实现的事情也可以用硬件实现，反之亦然。<strong>但硬件更快</strong></p><h2 id="计算机发展史">2. 计算机发展史</h2><h3 id="第0代机械计算器">第0代：机械计算器</h3><p>算盘、计算钟、Pascaline、加法仪……</p><p>不能编程，没有存储器。</p><p>巴贝奇的差分机、分析机(穿孔卡片输入数据)</p><p>IBM的制表机</p><h3 id="第1代真空管计算机">第1代：真空管计算机</h3><p>电动、电子的，可编程，有存储器、算数部件、控制部件(Z1)</p><p>第一台完整的计算机系统：ABC。专用的。二进制。</p><p>第一台通用的计算机系统：ENIAC</p><h3 id="第2代晶体管计算机">第2代：晶体管计算机</h3><p>体积小、性能可靠、速度快、功耗小</p><h3 id="第3代集成电路计算机">第3代：集成电路计算机</h3><p>速度更快、体积更小、价格便宜</p><h3 id="第4代超大规模集成电路计算机">第4代：超大规模集成电路计算机</h3><p>体积更小、速度更快</p><p>催生微型计算机</p><h2 id="摩尔定律">3. 摩尔定律</h2><p>Moore的原话：集成电路中的晶体管数目将会每年翻一番</p><p>现在：硅芯片的密度每18个月翻一番</p><p>Rock定律：制造半导体集成电路的成本每4年翻一番</p><h2 id="计算机的分层组织结构">4. 计算机的分层组织结构</h2><table><thead><tr class="header"><th>层次</th><th>名称</th><th>解释</th><th></th></tr></thead><tbody><tr class="odd"><td>6</td><td>用户层</td><td>各种应用任务、程序</td><td></td></tr><tr class="even"><td>5</td><td>高级语言层</td><td>C、C++、Pascal等高级语言</td><td></td></tr><tr class="odd"><td>4</td><td>汇编语言层</td><td>高级语言被编译成汇编语言，再被翻译成机器语言</td><td></td></tr><tr class="even"><td>3</td><td>系统软件层</td><td>主要处理操作系统指令。负责多用户编程、存储器保护、过程同步等功能。从汇编语言翻译来的机器语言可以直接越过。</td><td></td></tr><tr class="odd"><td>2</td><td>指令集体系结构(机器层)</td><td>机器语言。直接用硬连线电路执行程序。</td><td></td></tr><tr class="even"><td>1</td><td>控制层</td><td>控制单元确保正确地译码并执行指令、传送数据。控制单元的设计有两种方式：硬连线、微程序。硬连线快，微程序慢，但可修改</td><td></td></tr><tr class="odd"><td>0</td><td>数字逻辑层</td><td>物理构成。逻辑门、引线。</td><td></td></tr></tbody></table><h2 id="冯诺依曼模型">5. 冯·诺依曼模型</h2><h3 id="组成部件">组成部件</h3><ol type="1"><li>中央处理器CPU<ol type="1"><li>控制单元×1</li><li>算数逻辑单元ALU×1</li><li>寄存器×n</li><li>程序计数器×1</li></ol></li><li>主存储器系统</li><li>输入输出系统</li></ol><p>具有执行顺序指令的处理能力</p><h3 id="瓶颈">瓶颈</h3><p>在主存系统和CPU的控制单元之间，包含一条物理/逻辑上的单一通道，可以强制改变指令和执行的周期。这一单一通道就是冯诺依曼瓶颈。</p><p>工作原理：(顺序执行)</p><p>取指-译码-执行周期</p><p>Amdahl定律：对于某种特定的系统改进，系统性能增强的可能性受到被改进的特征部位的使用次数的限制。</p><h1 id="chapter-2-计算机系统中的数据表示方法">Chapter 2 计算机系统中的数据表示方法</h1><p><strong>字</strong>：两个或多个相邻的字节构成，有时用来对存储器进行编址，总是被作为一个集合来处理。字的大小表示了一个特定的计算机体系结构能处理的最有效的数据大小。</p><h2 id="二进制与各进制的转换">1. 二进制与各进制的转换</h2><p>10-&gt;2：除2取余，从下往上</p><p>分数部分：乘2取整，从上往下</p><p>2-&gt;8/16：3/4位一组</p><h2 id="带符号整数的表示">2. 带符号整数的表示</h2><h3 id="符号幅值表示法">符号幅值表示法</h3><p>最左一位作为符号位。</p><p>N位能表示的数的范围为：-2<sup>(N-1)</sup>-1~2<sup>(N-1)</sup>-1</p><p>原码的缺点：</p><ol type="1"><li>位数受限，有溢出的风险</li><li>正负0</li><li>加减法困难</li></ol><h3 id="反码">反码</h3><ol type="1"><li><strong>正数：不变</strong></li><li><strong>负数：符号不变，其他位取反</strong></li></ol><p>优点： 加法代替减法</p><p>缺点： +-0</p><p>高低两端进位循环：加法时如果有进位，加到个位上</p><h3 id="补码">补码</h3><ol type="1"><li><strong>正数：不变</strong></li><li><strong>负数：反码+1</strong></li></ol><p>缺点：溢出——解决：检测</p><p>最高位进位舍弃</p><p>检测溢出条件：如果进入符号位和移出符号位的进位相等，则没有溢出。</p><h2 id="浮点表示法">3. 浮点表示法</h2><ol type="1"><li>分为符号位、指数、有效位，表示为0.1xxxxx*2<sup>n</sup></li><li>有效位的第一位是1，使表示方法唯一化</li><li>M余表示法，使指数正负皆可用正数表示。 方法：指数位有n位，则用M=2<sup>n-1</sup>-1来表示0</li><li>0有+-两种，算了</li></ol><h3 id="浮点运算">浮点运算</h3><p>加法：将有效位对齐并相加，最终保留较大的那个指数，并删除有效位的低位多余部分</p><p>乘法：指数正常，有效位也按竖式运算，再重新规格化</p><p>###误差</p><p>128.5+0.5会加不上去，因为有效位只有8位，但这个数表示起来总共有九位，则0.5永远被舍弃，加越多误差越大。</p><p>解决：让操作数的精度比较接近。比如如果要连加4个0.5，先0.5*4，再加上去。</p><h2 id="字符编码">4. 字符编码</h2><p>超级精确但有点浪费的BCD</p><p>基于拉丁字符的用1位奇偶校验位的ASCII(8位)</p><p>支持所有语言的Unicode(16位)</p><h2 id="错误检测">5. 错误检测</h2><h3 id="crc">CRC</h3><p>约定共用的模2多项式P：</p><ol type="1"><li>右添P位数-1个0</li><li>模2除P，得余数加上</li></ol><h3 id="海明编码">海明编码</h3><p>一个有m位的数，需要r位检验位</p><ol type="1"><li>m+r+1≤2<sup>r</sup> (m=4，r=3；m=8，r=4)</li><li>将所有位从右往左排列，从1开始编码</li><li>2的倍数位为校验位(1，2，4，8……)，其他为数据位</li><li>确定每个检验位会检验哪些位： 将各个位写成2的幂指数的和的形式，式子中有1的就是被1检验的位，如1 3 5 7 9 11</li><li>如果是偶检验，则1的所有检验位加起来得是偶数，如此可填上第1位的数。</li></ol><p>题型：010111010110是错的吗？(4位检验位的偶检验)</p><p>找出各个出错的检验位，加起来就是出错的位。</p><h3 id="里德-所罗门编码">里德-所罗门编码</h3><p>处理块状错误，复杂的CRC</p><h1 id="chapter-3-布尔代数和数字逻辑">Chapter 3 布尔代数和数字逻辑</h1><h2 id="布尔代数">布尔代数</h2><h3 id="基本概念">1. 基本概念</h3><p>一个封闭的代数系统。(输入0、1，输出也是)</p><p>表达式：</p><ol type="1"><li>非x'</li><li>与x·y</li><li>或x+y</li></ol><p>布尔恒等式：分配律 x+yz=(x+y)(x+z)</p><p>真值表：输入值按从小到大的顺序写。证明题可用。</p><p>用真值表写表达式：所有输出值为1的项加起来</p><h3 id="化简">2. 化简</h3><h4 id="代数法">1. 代数法</h4><p>xy+x'z+yz=xy+x'z</p><h4 id="卡诺图">2. 卡诺图</h4><p>x yz wx yz 00 01 11 10</p><p>将输出值0和1填在表中(0可省略)，无关条件可圈可不圈</p><p>####3. 真值表</p><h2 id="数字逻辑">数字逻辑</h2><h3 id="逻辑门">3. 逻辑门</h3><p>与门 ⫐</p><p>或门 🌛</p><p>非门 ▷◦</p><p>异或门⊕ ）🌛 <strong>不同则真</strong></p><p>与非门 ⫐◦ <strong>都1则0</strong></p><p>或非门🌛◦ <strong>有1则0</strong></p><p>###4. 组合/时序</p><h4 id="组合电路">组合电路</h4><p>输出仅仅取决于输入，且在同一时刻。</p><ol type="1"><li>半加器：输入x和y，输出sum和carry(进位)</li><li>全加器FA：输入x和y和进位，输出sum和carry</li><li>译码器</li><li>多路复用器</li><li>奇偶发生器、奇偶检验器</li></ol><p>####时序电路</p><p>事件有顺序，被时钟控制。</p><ol type="1"><li>SR触发器</li></ol><table><thead><tr class="header"><th>S</th><th>R</th><th>Q(t+1)</th></tr></thead><tbody><tr class="odd"><td>0</td><td>0</td><td>Q(t)</td></tr><tr class="even"><td>0</td><td>1</td><td>0</td></tr><tr class="odd"><td>1</td><td>0</td><td>1</td></tr><tr class="even"><td>1</td><td>1</td><td>not know</td></tr></tbody></table><ol start="2" type="1"><li><p>JK触发器</p><table><thead><tr class="header"><th>J</th><th>K</th><th>Q(t+1)</th></tr></thead><tbody><tr class="odd"><td>1</td><td>1</td><td>Q'(t)</td></tr></tbody></table></li><li><p>D触发器：来啥出啥转进销。 寄存器由一组D触发器构成。</p></li></ol><h1 id="chapter-4-marie简单计算机模型">Chapter 4 MARIE:简单计算机模型</h1><h2 id="组成">1. 组成</h2><h3 id="cpu中央处理器">1)CPU中央处理器</h3><h4 id="数据通道">①数据通道</h4><h5 id="a.寄存器">a.寄存器</h5><p>D触发器可以存1位，所以一个寄存器需要一组D</p><p>有专用、通用类型的寄存器</p><p>寄存器由控制单元进行编址和处理</p><h5 id="b.算数逻辑单元alu">b.算数逻辑单元ALU</h5><p>进行逻辑运算和算术运算</p><h4 id="控制单元">②控制单元</h4><p>对各操作进行排序，并保证各种正确的数据适时呈现</p><ol type="1"><li>叫程序计数器的寄存器：找下一条指令的位置</li><li>状态寄存器：存某些特殊的操作状态</li></ol><h3 id="总线">2)总线</h3><ol type="1"><li>点对点：连接两个特定设备</li><li>多点：多个设备共享 总线仲裁：<ol type="1"><li>菊花链仲裁方式：高优先级到低优先级传递权限。不公平，低的无望</li><li>集中式平行仲裁：每一个设备都可以申请。会有瓶颈</li><li>自选择的分配式仲裁：设备自己来决定谁先</li><li>冲突检测的分配式仲裁：出现冲突则都重来(以太网络)</li></ol></li></ol><h3 id="时钟输入出子系统">3)时钟、输入/出子系统</h3><p><span class="math display">\[CPU时间=\frac{时间}{程序}=\frac{指令数}{程序}×\frac{周期数}{指令}×\frac{时间}{周期}\]</span></p><p>其中最后一个才是主频。</p><p>I/O子系统不与CPU直连，而采用接口进行信号转换：</p><ol type="1"><li>内存交换的输入输出方式：访问IO就是访问内存。快但占</li><li>指令实现的输入输出方式：专用指令实现IO。不占但需要特殊指令</li></ol><h3 id="存储器">4)存储器</h3><p>==作业题==</p><ol type="1"><li>高位交叉存储：连续自然，存满为止</li><li>低位交叉存储：多个模块可同时读，更快</li></ol><h3 id="中断">5)中断</h3><p>改变系统正常执行流程的各种事情</p><h2 id="marie体系结构">2. MARIE体系结构</h2><h3 id="种寄存器">7种寄存器</h3><ol type="1"><li>AC累加器：16位，保存CPU需要处理的数据</li><li>MAR存储器地址寄存器：12位，保存被引用数据的地址</li><li>MBR存储器缓冲寄存器：16位，保存刚读取或将写的数据</li><li>PC程序计数器：12位，保存下一条指令的地址</li><li>IR指令寄存器：16位，保存下一条指令</li><li>InREG输入寄存器：保存来自输入设备的数据</li><li>OutREG输出寄存器</li></ol><h3 id="指令集">指令集</h3><p>ISA：指令系统体系结构，硬件、软件间的接口</p><table><thead><tr class="header"><th>二进制编号<br />(机器指令)</th><th>十六进制</th><th>指令<br />(助记符号)</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>0001</td><td>1</td><td>Load X</td><td>将地址X中的内容装入AC</td></tr><tr class="even"><td>0010</td><td>2</td><td>Store X</td><td>将AC中的内容装入地址X</td></tr><tr class="odd"><td>0011</td><td>3</td><td>Add X</td><td>将X中和AC中的内容相加，存入AC</td></tr><tr class="even"><td>0100</td><td>4</td><td>Subt X</td><td>将AC中减去X中的内容，存入AC</td></tr><tr class="odd"><td>0101</td><td>5</td><td>Input</td><td>键盘输入值到AC</td></tr><tr class="even"><td>0110</td><td>6</td><td>Output</td><td>将AC内容输出到显示器</td></tr><tr class="odd"><td>0111</td><td>7</td><td>Halt</td><td>终止</td></tr><tr class="even"><td>1000</td><td>8</td><td>Skipcond</td><td>有条件地跳过下一条指令</td></tr><tr class="odd"><td>1001</td><td>9</td><td>Jump X</td><td>将X的值装入PC中</td></tr><tr class="even"><td>0000</td><td>0</td><td>JnS X</td><td>将PC中的内容存到X处，然后跳转到X+1处</td></tr><tr class="odd"><td>1010</td><td>10</td><td>Clear</td><td>将AC清空为0</td></tr><tr class="even"><td>1011</td><td>11</td><td>AddI X</td><td>间接相加：取出X所存地址中所存的数加入AC中</td></tr><tr class="odd"><td>1100</td><td>12</td><td>JumpI X</td><td>间接转移：跳到X所存地址中所存地址</td></tr></tbody></table><h4 id="寄存器传输表示法rtlrtn">寄存器传输表示法RTL/RTN</h4><ol type="1"><li>Load X: MAR ← X MBR ← M[MAR], AC ← MBR</li><li>Store X: MAR ← X, MBR ← AC M[MAR] ← MBR</li><li>Add X: MAR ← X MBR ← M[MAR] AC ← AC+MBR</li><li>Subt X: MAR ← X MBR ← M[MAR] AC ← AC-MBR</li><li>Input: AC ← InREG</li><li>Output: OutREG ← AC</li><li>Halt:终止而已</li><li>Skipcond: If IR[11-10]=00 then If AC&lt;0 then PC ← PC+1 else If IR[11-10]=01 then If AC=0 then PC ← PC+1 else If IR[11-10]=10 then If AC&gt;0 then PC ← PC+1 else 错误</li><li>Jump X: PC ← IR[11-0] | PC ← X</li><li>JnS: MBR ← PC MAR ← X M[MAR] ← MBR MBR ← X AC ← 1 AC ← AC+MBR PC ← AC</li><li>Clear: AC ← 0</li><li>AddI X: MAR ← X MBR ← M[MAR] MAR ← MBR MBR ← M[MAR] AC ← AC+MBR</li><li>JumpI X: MAR ← X MBR ← M[MAR] PC ← MBR</li></ol><h3 id="执行指令">执行指令</h3><ol type="1"><li>取指: MAR ← PC, IR ← M[MAR], PC ← PC+1</li><li>译码: MAR ← IR[11-0] IR[15-12]</li><li>执行: (MBR ← M[MAR])...</li></ol><h3 id="编译二次通读">编译(二次通读)</h3><ol type="1"><li>生成符号表和操作（16进制表示）+符号的不完整指令表</li><li>用符号表填充地址</li></ol><h2 id="译码两法">3. 译码两法</h2><ol type="1"><li>硬件译码：速度快，但电路复杂，设计、修改困难</li><li>微程序控制译码：修改简单，但所有指令经过额外的翻译过程，减慢执行速度</li></ol><p>##4. CISC v.s. RISC</p><ol type="1"><li>CISC 复杂指令集计算机： 指令多，程序短</li><li>RISC 精简指令集计算机： 指令少，程序长</li></ol><h1 id="chapter-5-指令系统体系结构isa">Chapter 5 指令系统体系结构ISA</h1><h2 id="指令格式">1. 指令格式</h2><h3 id="指令集特征">①指令集特征</h3><ol type="1"><li>操作数在CPU中存储方式(堆栈or寄存器)</li><li>指令直接作用的操作数数目</li><li>操作数位置</li><li>操作(类型、指令是否可直接访问存储器)</li><li>操作数的类型和数目(地址、数字、字符类型等)</li></ol><h3 id="性能影响因素">②性能影响因素</h3><ol type="1"><li>执行指令时占用内存大小</li><li>指令系统的复杂程度(指令执行所需的译码数量和所执行任务的复杂性)</li><li>指令的长度</li><li>指令系统中指令的总数目</li></ol><h3 id="大端小端">③大端小端</h3><ol type="1"><li>大端：自然</li><li>小端：处理计算方便</li></ol><table><thead><tr class="header"><th></th><th>00</th><th>01</th><th>10</th><th>11</th></tr></thead><tbody><tr class="odd"><td>大端</td><td>00</td><td>00</td><td>12</td><td>34</td></tr><tr class="even"><td>小端</td><td>34</td><td>12</td><td>00</td><td>00</td></tr></tbody></table><h3 id="内部机制3">④内部机制×3</h3><ol type="1"><li>堆栈：操作数放在堆栈顶部 不能随机访问，效率不高</li><li>累加器AC：其中一个操作数隐含在AC中 降低内部复杂性，允许非常短的指令。但对存储器的访问非常频繁</li><li>通用寄存器GPR：多个寄存器组<ol type="1"><li>存储器-存储器：2、3个操作数可在存储器中，允许不要操作数的指令在寄存机中</li><li>寄存器-存储器：混合，至少一个操作数在寄存器、一个在存储器</li><li>装入-存储：任何对数据的操作前，先将数据装入存储器</li></ol></li></ol><h3 id="操作数目指令长度">⑤操作数目、指令长度</h3><p>指令格式：</p><ol type="1"><li>固定长度：浪费空间，但快，且支持流水线</li><li>可变长度：节省空间，但译码复杂</li></ol><h4 id="堆栈采用的后缀表示法">堆栈采用的==后缀表示法==</h4><p>不需括号。题。</p><p>###⑥扩展操作码</p><h2 id="指令类型">2. 指令类型</h2><p>常见几种知道</p><ol type="1"><li>数据移动</li><li>算术运算</li><li>布尔逻辑运算</li><li>位操作(移位和循环换位)</li><li>输入、输出</li><li>控制转移</li><li>专门用途</li></ol><h2 id="寻址方式7">3. ‼️寻址方式×7</h2><p>给指令，问装入AC的是啥</p><ol type="1"><li>立即寻址：地址即数</li><li>直接寻址：地址是数的地址</li><li>寄存器寻址：地址是寄存器的地址</li><li>间接寻址：地址是数的地址的地址</li><li>寄存器间接寻址：地址是寄存器的地址，寄存器存的是数的地址</li><li>变址寻址：变址寄存器中存偏移量，与地址相加成为真实数的地址</li><li>基址寻址：基址寄存器中存偏移量</li></ol><h2 id="指令流水线">4. 指令流水线</h2><h3 id="原理">原理</h3><p>(k倍咋来的)</p><p>设k级流水线，每级时钟周期t<sub>p</sub>，共n条指令，则用流水线完成任务耗时： <span class="math display">\[t_p×k+t_p×(n-1)=(k+n-1)t_p\]</span> 不用流水线耗时<span class="math inline">\(nkt_p\)</span></p><p>所以加速比为 <span class="math display">\[S=\frac{nkt_p}{(k+n-1)t_p}\]</span> 当n趋近于∞，<span class="math inline">\(S→k\)</span></p><p>所以，<strong>理论上加速比S就是级数k</strong></p><h3 id="冲突">冲突</h3><p>3类+解决办法</p><ol type="1"><li>资源冲突：如存取同时进行。 解决：让取等，或者设两条独立通道</li><li>数据关联：前指令没结束，后指令要用到其结果。 解决：①添加专门的硬件来检测 ②特殊编译器</li><li>条件分支语句 解决：分支预测；对程序重新排序；两条分支都取指，等看实际用谁</li></ol><h2 id="案例">5. 案例</h2><p>了解</p><h3 id="intel">Intel</h3><p>小端，双地址，可变长的指令系统</p><h3 id="mips">MIPS</h3><p>小端，按字编址，3地址，固定长度的指令系统</p><h1 id="chapter-6-存储器">Chapter 6 存储器</h1><h2 id="类型">1. 类型</h2><p>AODS区别、用在哪</p><ol type="1"><li>RAM随机存储器：可供读写，即主存；但断电就失<ol type="1"><li>DRAM动态随机存储器：需要电但存储密度高，功耗低——做<strong>主存</strong></li><li>SRAM静态随机存储器：D触发器构成，速度快但价格高——做<strong>高速缓存</strong></li></ol></li><li>ROM只读存储器：非易失性，存运行计算机系统所需的关键信息or用于嵌入式系统</li></ol><h2 id="层次">2. 层次</h2><h3 id="概念">概念</h3><ol type="1"><li>命中：CPU请求的数据就在要访问的存储层中</li><li>缺失：不在</li><li>命中时间：在那个存储器层中，找到数据所需的时间</li><li>缺失损失：处理缺失所需的时间</li></ol><h3 id="大体分层">大体分层</h3><ol type="1"><li>寄存器：CPU内</li><li>1级缓存：高速缓存</li><li>2级缓存：高速缓存</li><li>主存：以上都是System层</li><li>硬盘：Online层</li><li>优化磁盘：例如光盘，近线层</li><li>磁带、USB Flash Drive、Removable Hard Drive，离线层</li></ol><p>###局部性*3</p><ol type="1"><li>空间局部性：访问形成团簇的集中倾向</li><li>时间局部性：最近访问的很可能不久再访问</li><li>顺序局部性：指令倾向于顺序执行</li></ol><h2 id="高速缓存">3. 高速缓存</h2><h3 id="映射的三种方式">映射的三种方式</h3><h4 id="直接映射的高速缓存">①直接映射的高速缓存</h4><p>高速缓存和主存的块之间有映射关系。有合法性标记</p><p>主存地址总位数：根据主存可以分为多少个地址来决定(例如主存共可存2<sup>14</sup>个字，又按字编址，那就可分为2<sup>14</sup>个地址，需要14位来存)</p><p>将主存地址划分为：</p><ol type="1"><li>标记域：剩余的</li><li>块域：按照高速缓存的总块数划分</li><li>字域：按照每个块的字数划分</li></ol><h4 id="全关联高速缓存">②全关联高速缓存</h4><p>主存的块可存到高速缓存的任意块中</p><p>比对标记域很费劲，很贵。需要牺牲块的置换算法</p><ol type="1"><li>标记域：剩余的</li><li>字域</li></ol><h4 id="组关联高速缓存">③组关联高速缓存</h4><p>N路的：每组包含N个块组，将数据块映射到某个块组中</p><ol type="1"><li>标记域</li><li>组域：组数=高速缓存的总块数÷路数</li><li>字域</li></ol><h3 id="置换策略">置换策略</h3><p>特点</p><ol type="1"><li>最近最少被使用：但要存历史访问记录，占空间、减速</li><li>先进先出</li><li>随机选择：不会像前二者那样重复操作</li></ol><h3 id="有效存取时间eat">有效存取时间EAT</h3><p><span class="math display">\[EAT=高速缓存命中率×高速缓存访问时间+高速缓存缺失率×主存访问时间\]</span></p><p>如果用分页的虚拟存储器，<strong>主存需要访问两次</strong> <span class="math display">\[EAT=主存命中率×主存访问时间×2+缺页率×缺页处理时间\]</span></p><h3 id="写策略">写策略</h3><ol type="1"><li>写通：每次写都在主存、高速缓存中写。慢，但保证一致性</li><li>回写：只有高速缓存中的块牺牲时，它才被写进主存。快，但同时可能数据不同，而且如果中断/崩溃，数据可能丢失</li></ol><p>##4. 虚拟存储器</p><h3 id="概念-1">概念</h3><p>用硬盘作为RAM的扩充，增加了进程可以使用的有效地址空间</p><h3 id="分页分段">分页、分段</h3><ol type="1"><li><p>分页：按固定大小的信息块(页帧)为各个进程分配物理存储空间，将信息写入页表来记录页的存放位置 产生内部碎片 将虚拟地址转换为物理地址：</p><ol type="1"><li>算清虚拟地址长度和物理地址长度 虚拟地址长度：看虚拟地址空间能存多少字 物理地址长度：看页帧数×页帧的长度能存多少字</li><li>虚拟地址划分为：<ol type="1"><li>页域：根据虚拟地址可分的总页数确定长度</li><li>偏移量：就是字域嘛</li></ol></li><li>拿页域作为索引去页表中找对应的页帧</li><li>页帧替换页域而偏移量不变，即成为物理地址</li></ol><p>缺点：耗时；耗主存的空间；需要专门的硬件和操作系统支持 优点：运行程序不受已有物理存储器容量大小的限制</p></li><li><p>分段：长度可变。 产生外部碎片</p></li></ol><h1 id="chapter-7-输入输出和存储系统">Chapter 7 输入/输出和存储系统</h1><h2 id="amdahl计算">1. AMDAHL计算</h2><p><strong>是1.5倍、快1.5倍</strong></p><p>计算机整体性能的提升速度S <span class="math display">\[S=\frac{1}{(1-f)+f/k}\]</span> <span class="math inline">\(f\)</span>:需改进部件所占的工作率</p><p><span class="math inline">\(k\)</span>:该部件性能的提升率</p><p>性能提升1%花钱：<span class="math inline">\(总花费÷(S-1)\)</span></p><h2 id="io体系结构">2. I/O体系结构</h2><p>基本原理</p><h3 id="种控制方法">5种控制方法</h3><ol type="1"><li>程序控制的I/O 每个I/O设备都要一个<strong>专用的寄存器</strong>，CPU繁忙等待着数据的到来(<strong>轮询</strong>)，可以编程来控制设备的行为 应用：专用系统，如ATM</li><li>中断控制的I/O CPU不需要轮询，而是在有数据发送需求时由外部设备来通知CPU，没有的时候CPU可以干别的。用CPU的标志寄存器来指示中断信号(一个二进制位的<strong>中断标志</strong>)。也可以编程控制 应用：当今流行。</li><li>直接存储器存取DMA 用<strong>专用芯片</strong>来编程DMA子系统，CPU提供专用I/O寄存器。子系统自行处理，完成后发中断请求通知CPU DMA与CPU共享存储器总线，为了主控，会对CPU进行<strong>周期窃取</strong></li><li>通道控制的I/O 用<strong>I/O处理器（IOP）</strong>来控制多个I/O路径，具有执行程序的能力。 智能特性：IOP能对协议进行协商，发出各种设备命令，将存储译码转换为内存译码，独立于CPU来传输多个完整文件 总线隔离性：单独的I/O总线，只对CPU进行小小的周期窃取 应用：大型计算机等高吞吐量的事物处理环境</li><li>主存映射的I/O 给每个I/O一个<strong>存储器</strong>地址。</li></ol><h3 id="数据传输模式">数据传输模式</h3><ol type="1"><li>串行：按位传</li><li>并行：按字节传(8位)</li></ol><h2 id="磁盘技术">3. 磁盘技术</h2><h3 id="硬盘">硬盘</h3><p>原理</p><ol type="1"><li>驱动臂：有读写头，不可跟碟片接触</li><li>转轴</li><li>碟片：<ol type="1"><li>磁道：每个同心圆，从外往内从0编号</li><li>扇区：小块</li><li>每条数据：记录表头、数据、记录结尾</li></ol></li></ol><p>数据块由扇区、盘面、磁道来唯一决定，读取数据：</p><ol type="1"><li>驱动臂使读写头定位到指定磁道——寻道时间</li><li>转轴转到——旋转延迟</li></ol><p>评价</p><ol type="1"><li><p>寻道时间</p></li><li><p>旋转延迟 用平均反应时间计算 <span class="math display">\[(\frac{60秒}{磁盘旋转速度}×\frac{1000ms}{秒})/2\]</span></p></li><li><p><span class="math inline">\(存取时间=寻道时间+旋转延迟\)</span></p></li></ol><p>缺点：慢，易坏</p><p>解决：用不会丢失数据的RAM替代(SSD/U盘——都是闪存)</p><h3 id="固态硬盘">固态硬盘</h3><p>和硬盘的核心差异：</p><p><strong>闪存</strong>：先擦才能新写，折寿</p><p>==∴SSD不可挡虚拟存储器，而应该用机械硬盘==</p><p>重要指标：</p><ol type="1"><li>UBER不可恢复的误码率——可靠性</li><li>TBW写入的百万兆字节——使用寿命</li></ol><h3 id="光盘">光盘</h3><p>低成本，大空间，稳定</p><p>特点：</p><ol type="1"><li>一条光轨——<strong>顺序存储</strong></li><li>与硬盘区别：光轨的中心和外圈有相同的位密度</li><li>线速度固定</li></ol><p>分类</p><ol type="1"><li>CD-ROM：存音乐或数据</li><li>CD-R、WORM：用于数据的长期存档</li><li>DVD数字多功能光盘：比CD更高密度、旋转速度、双面双层</li><li>Blue-violet laser discs<ol type="1"><li>Blue-Ray：更高的存储密度(赢了)</li><li>HD-DVD：向下兼容DVD</li></ol></li></ol><h3 id="磁带">磁带</h3><p>分类</p><ol type="1"><li>传统： 九条磁道：1个字节的数据+1位奇偶校验</li><li>蛇形：纵向写数据</li><li>螺旋：斜的</li></ol><h3 id="独立磁盘冗余阵列raid">独立磁盘冗余阵列RAID</h3><p>*8种</p><h4 id="level-0-磁盘跨区">Level 0 磁盘跨区</h4><p>数据块以条带形式存放在磁盘表面上</p><p>最佳性能，但没有任何冗余，可靠性差</p><h4 id="level-1-磁盘镜像">Level 1 磁盘镜像</h4><p>两组磁盘存储完全相同的数据</p><p>100%冗余所以稳定，不错的性能（读好，写差）；但成本高</p><p>适用：追求可靠性的，如财会、邮箱</p><h4 id="level-2">Level 2</h4><p>每个条带只写入1位数据+海明编码校验</p><p>性能差且成本高，写入需要严格同步</p><h4 id="level-3-精简奇偶校验的2">Level 3 精简奇偶校验的2</h4><p>每次1位，交错分配；只使用1个驱动器来保存一个简单的奇偶校验位</p><p>稍微经济，不适用商业环境，适用个人系统</p><h4 id="level-4-具有奇偶校验的0">Level 4 具有奇偶校验的0</h4><p>一块一块写，一个校验盘</p><p>适用：所有记录块的大小相同</p><h4 id="level-5-分散奇偶校验位的4">Level 5 分散奇偶校验位的4</h4><p>访问可以并发执行，提高性能和可靠性</p><p>应用：广泛应用在商业系统中</p><h4 id="level-6-两条纠错带">Level 6 两条纠错带</h4><p>可以承受两个磁盘同时出现问题</p><p>写入性能相当差，但是容错性很好</p><h4 id="raid-dp双重奇偶校验">RAID DP双重奇偶校验</h4><p>思路类似，也可以出俩错</p><h4 id="混合raid">混合RAID</h4><p>许多大型计算机系统不局限于一种</p><h1 id="chapter-9-可选择的体系结构">Chapter 9 可选择的体系结构</h1><h2 id="cisc-v.s.-risc">1. CISC v.s. RISC</h2><ol type="1"><li>CISC 复杂指令集计算机： 指令多，程序短 大量能直接访问存储器的指令 每条指令长度不同，时钟周期也不同 <strong>微代码</strong>处理指令的复杂性问题，不可流水线 多周期指令</li><li>RISC 精简指令集计算机： 指令少，程序长 只提供最小指令集：数据移动、ALU、分支转移 只有显式的load和store可以访问存储器 每条指令长度相同 <strong>硬连线</strong>取代微程序，将指令集的复杂性问题转移到编译器上 单周期指令 寄存器窗口组：<ol type="1"><li>全局寄存器：对所有窗口共用</li><li>局部寄存器：属于当前窗口</li><li>输入寄存器：与前一个窗口的输出寄存器覆盖</li><li>输出寄存器：与后一个输入覆盖</li></ol></li></ol><p><span class="math display">\[CPU时间=\frac{时间}{程序}=\frac{指令数}{程序}(CISC)×\frac{周期数}{指令}（RISC）×\frac{时间}{周期}\]</span></p><h2 id="flynn计算机体系结构分类法">2. Flynn计算机体系结构分类法</h2><p>考虑因素：</p><ol type="1"><li>指令的数目</li><li>流入处理器的数据流的数目</li></ol><p>分类：</p><ol type="1"><li>SISD 单指令流、单数据流</li><li>SIMD 单指令流、多数据流</li><li>MISD</li><li>MIMD</li></ol><p>缺点：</p><ol type="1"><li>MISD没有存在的必要</li><li>它假定并行执行都是同构的</li><li>MIMD还可以细分</li></ol><h2 id="并行多处理器体系结构">3. 并行、多处理器体系结构</h2><h2 id="新的并行处理方法">4. 新的并行处理方法</h2><ol type="1"><li>数据流</li><li>神经网络</li><li>脉动</li></ol><h1 id="chapter-10-性能度量和分析">Chapter 10 性能度量和分析</h1><h2 id="cpu时间计算">1. CPU时间计算</h2><p><span class="math display">\[CPU时间=\frac{时间}{程序}=\frac{指令数}{程序}(CISC)×\frac{周期数}{指令}（RISC）×\frac{时间}{周期}\]</span></p><h2 id="种数学平均">2. 4种数学平均</h2><p>公式+场景</p><h3 id="算术平均值">算术平均值</h3><p>###加权算术平均值</p><h3 id="几何平均值">几何平均值</h3><p><span class="math display">\[G=(x_1×x_2×...×x_n)^{\frac{1}{n}}\]</span></p><p>用途：比较相对性能。在已知工作量下的系统性能指示器</p><p>参考不同，数值不同，但比值不变(因为相对性能差异不变)</p><h3 id="调和平均值">调和平均值</h3><p><span class="math display">\[H=n÷(\frac{1}{x_1}+\frac{1}{x_2}+...+\frac{1}{x_n})\]</span></p><h2 id="基准">3. 基准</h2><p>各解决什么问题</p><h2 id="优化">4. 优化</h2><h3 id="分支优化">分支优化</h3><ol type="1"><li>延迟转移：调换指令顺序，使分支指令延后执行。需要进行数据相关性分析</li><li>分支预测：<ol type="1"><li>固定预测：假设总是采用/不采用分支</li><li>动态预测</li></ol></li></ol><h3 id="代码优化">代码优化</h3><h2 id="磁盘性能">5. 磁盘性能</h2><h3 id="利用率忙碌率">利用率(忙碌率)</h3><p><span class="math display">\[利用率=\frac{请求到达速率}{磁盘服务速度}\]</span></p><h4 id="排队系统">排队系统</h4><p><span class="math display">\[排队时间=\frac{服务时间×利用率}{1-利用率}\]</span></p><p>80%的利用率是经验中的上限</p><p>###逻辑性能</p><h4 id="调度算法">调度算法</h4><ol type="1"><li>先来先服务</li><li>最短寻道时间优先：电梯算法</li></ol><h4 id="预取">预取</h4><p>利用顺序局部性，同时读取目标扇区和后续的若干个扇区</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的春天</title>
      <link href="/blog/my-spring/"/>
      <url>/blog/my-spring/</url>
      
        <content type="html"><![CDATA[<p>她只是刚好走过一个春天<br />最初是阳光普照<br />那些冰温和地裂开<br />洄游的鱼离开浅草滩里新产的卵<br />一些枯草的呼吸重新贪婪起来<br />野兽的子宫竟然孕育了光明</p><p>她只是刚好走过一个春天<br />我却陷进最深的幻梦<br />我望见她时<br />她已只身越过一片泛滥的春江<br />我望见<br />她从怀里揣来一个春天</p><p>她只是刚好走过一个春天<br />却让我决心将她来时的路探遍<br />再将她看遍</p><p>19.4.18 1点12</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Notebook</title>
      <link href="/blog/Python%20Notebook/"/>
      <url>/blog/Python%20Notebook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>look</p><p>think</p><p>cover</p><p>write</p><p>check</p></blockquote><h1 id="目录">目录</h1><p>[TOC]</p><p>#串</p><p>IPO</p><pre><code>P：算法 是核心    流程图：        顺序        选择 if elif        循环 while/ for    切割/重用：        function:            def, return            传参，局部参数            缺点：无记忆        class：            三段：类名，data，method            动作：instance实例化→                对象：                    不存类的method和data，但有自己的data。两段：对象名，data</code></pre><h1 id="个保留字">33个保留字</h1><p>False假 def定义函数 if如果函数 raise</p><p>None del import调用 return返回</p><p>True真 elif或如果 in在里面 try尝试函数</p><p>and条件和 else否则 is while循环</p><p>as except不然 lambda简单的匿名函数 with</p><p>assert finally最后执行 nonlocal非本地 yield</p><p>break终止 for循环 not反</p><p>class类 from从 or或</p><p>continue global全局函数 pass空函数</p><p>###控制流语句if while for</p><p>1.if-elif-else语句</p><pre><code>if 判断1：    如果判断1为真，就执行这个elif 判断2：    如果判断1为假，就会执行elif 如果判断2为真，就执行这个else：    如果前面全为假，就会执行这个    tip：要有冒号。else后面不用再判断了</code></pre><p>2.while-else语句</p><pre><code>while 判断：    如果判断为真，就做这个 做啊做啊做     到某时候令判断=假else：    判断为假，就执行这个</code></pre><p>3.for-in循环语句</p><pre><code>for 数 in range（最小的数，最大的数，步长）：    数从最小的数一直变到最大的数（但不包含最大的数！！），每取一个值执行一次这一块else：    for结束后执行这个</code></pre><p>4.break</p><pre><code>跳过最内层循环（包括else的内容）</code></pre><p>5.continue</p><pre><code>跳过这一次循环中的剩余语句而直接开始下一轮新的循环</code></pre><h3 id="函数">函数</h3><pre><code>def 函数名（变量1，变量2=1）：    这里就是函数的内容了。函数其实就是可以随时调用的程序段，比如len（）就是内建函数    若不写变量2，它会默认为1nonlocal 变量global 变量</code></pre><h4 id="参数传递">参数传递</h4><p>虚实结合，拷贝</p><h6 id="可变对象与不可变对象">可变对象与不可变对象</h6><p>类型属于对象，变量没有类型</p><p>a=2</p><p>2是整数型，是对象；a是变量，没有类型，是对象的引用</p><p>可变：list dict</p><p>list里的list是指针，list里放的全是指针</p><p>a=[1,2]</p><p>b=a</p><p>则指向同一个list对象，而list是可变对象，所以改b也变a</p><p>浅拷贝b=a[:]，能拷贝一层，第二层还是指向同一个对象</p><p>a=[1,[2,3]]</p><p>a=2</p><p>b=a</p><p>则指向同一个int对象，而int是不可变对象，若b=3，是改变b的指向，则a不变</p><h6 id="默认参数必须指向不变对象">默认参数必须指向不变对象</h6><blockquote><p>函数在定义的时候，默认参数<code>lang</code>的值就已经声明了，即空的 <code>[]</code>,也就是说 <code>默认参数</code> 指向对象 <code>[]</code>,在多次调用默认参数的情况下，就改变了<code>默认参数</code>指向对象的数据，<code>默认参数</code> 指向对象的数据变了，下次再调用时，默认参数已经变了，即不再是你希望的空的<code>[]</code></p></blockquote><p>(4,) 一个数字的tuple</p><p>eval()</p><pre><code>到数值</code></pre><p>pow（x，y）</p><pre><code>x^y</code></pre><h4 id="变量作用域">变量作用域</h4><p>local-&gt;enclosing-&gt;global-&gt;built-in</p><h5 id="闭包函数嵌套函数">闭包函数(嵌套函数)</h5><p>函数内套函数，内函数会用到外函数的变量，外函数返回内函数的引用</p><p>特征：外函数的变量由于会被用到而不会被轻易释放</p><p>注意：每次调用外函数都会创建一个新的内函数的实例对象，但是闭包变量却只有同一个</p><p>用途：装饰器：取执行时间；校验输入</p><p>js中用闭包实现面向对象</p><p>内部变量修改全局变量，用global</p><p>但不建议，因为函数的目的就是封装隔离；若需要使用global变量，请使用形参传参</p><p>nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。</p><p>函数可以当变量赋值</p><p>函数可以当参数传递</p><h4 id="递归函数">递归函数</h4><p>内部调用自身</p><p>必须有基例，也就是有if</p><p>写来简单但执行效果差</p><p>习惯：</p><p>函数名用小写字母加下划线，</p><p>大写字母用在类中</p><p>函数之间加空行</p><h3 id="类">类</h3><p>类名首字母大写的驼峰命名法；函数名用动宾短语，全小写，_连接</p><p>类之间空两行</p><p>attribute属性 是变量</p><p>method方法 是函数</p><p>继承有副作用</p><p>类是模板，对象是类的实例instance</p><h4 id="类的四个特性">类的四个特性</h4><p>抽象</p><p>封装 信息隐藏 提供接口</p><p>继承 在类的基础上定义新类，抽象性降低，实现多态</p><p>鸭子类型的多态</p><h4 id="鸭子类型">鸭子类型：</h4><p>鸭子测试：当一只鸟走起来像鸭子，游泳像鸭子，叫起来像鸭子，那这只鸟就可以称为鸭子</p><p>在python中，一个对象有效的语义，不取决于继承的接口，而取决于它本身的data和method</p><p>只要有这个方法我就调用，管你是个啥</p><p>靠精确的文档和try/except处理异常</p><h4 id="装饰器">装饰器</h4><p><span class="citation" data-cites="classmethod">@classmethod</span> cls 用类名调用，而不是对象</p><p><span class="citation" data-cites="staticmethod">@staticmethod</span> 静态方法，不关注对象和对象内部属性</p><p>像访问属性一样调用方法，方法就像属性了 下跟一个跟属性同名的函数</p><p><span class="citation" data-cites="property">@property</span> 只读</p><pre><code>def age(self,a)：     if xxx: return &quot;don&#39;t!!&quot;   else:  self.__age=a</code></pre><p><span class="citation" data-cites="方法名.setter">@方法名.setter</span>：可写</p><p><span class="citation" data-cites="方法名.deleter">@方法名.deleter</span>: 可删除</p><p>也可用property函数来把已经定义好的setter、deleter等绑定给变量</p><p>id（）查看内存地址</p><p><code>__dict__</code>查看类和对象的内部参数</p><p>不允许看到对象里面的东西？</p><p>dict对象的时候看不到类里的attribute</p><p>dict类的时候看不到method里的变量</p><p>magic method 内部留的</p><p><code>__str__</code></p><p><code>__add__</code></p><p>a=3</p><p>isinstance（a,int） 判断是否某类型 这个好啊</p><p>不提倡用这个判断某对象是否某类（自定义的） 而是直接调用 用try/except处理异常</p><h4 id="类的继承白盒">类的继承（白盒）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span>(<span class="params">Employee</span>):</span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">,,,,</span>):</span> <span class="built_in">super</span>().__init__(,,,) </span><br></pre></td></tr></table></figure><p>支持但不建议用多重继承</p><p>3.x版本从深度优先变为广度优先。先从父代所有类找，再从父代的父代找</p><p>多用聚合/组合（黑盒）</p><p>类中传进一个新类，则删它无涉</p><p>在类的内部新生成一个类，则前者删，后者也无</p><p>types模块</p><p>def prt():</p><pre><code>pass</code></pre><p>e1.prt=types.MethodType(prt,e1)</p><p>不许用。</p><p>__私有变量 方法，不可访问</p><p>但可以绕过去，君子约定😑</p><h2 id="turtle库">Turtle库</h2><p>函数：</p><p>setup（width，height，startx，starty）</p><p>penup（）or pu</p><p>pendown（）or pd</p><p>pensize（）</p><p>pencolor（）</p><p>fd（）or forward</p><p>seth（）or setheading</p><p>circle（radius，extent=None）</p><p>##一些赋值上的点</p><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes1.png" alt="屏幕快照 2018-03-22 上午11.04.39" /><figcaption>屏幕快照 2018-03-22 上午11.04.39</figcaption></figure><p>a='s'</p><p>b=['p','a']</p><p>c='m'</p><p>*<strong>b是列表</strong></p><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes2.png" alt="屏幕快照 2018-03-22 上午11.04.31" /><figcaption>屏幕快照 2018-03-22 上午11.04.31</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes3.png" alt="屏幕快照 2018-03-22 上午11.04.23" /><figcaption>屏幕快照 2018-03-22 上午11.04.23</figcaption></figure><p>spam='s'</p><p>ham='h'</p><hr /><p>1 in [0,1] == True: False</p><p>因为它等于</p><p>1 in [0,1] and [0,1] == True</p><p>后者错了</p><p>str.split:use the comma to divide the str and return a list, useful.</p><p>range(a,b)is from a to b-1 !!!! so ugly.</p><h1 id="random库">random库</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  print( random.random() )             # 产生 0 到 1 之间的随机浮点数print( random.uniform(1.1,5.4) )     # 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数print( random.choice(&#x27;tomorrow&#x27;) )   # 从序列中随机选取一个元素print( random.randrange(1,100,2) )   # 生成从1到100的间隔为2的随机整数a=[1,3,5,6,7]                # 将序列a中的元素顺序打乱random.shuffle(a)</span></span><br></pre></td></tr></table></figure><h1 id="数据处理的常用语句">数据处理的常用语句</h1><h2 id="str">str</h2><p>str.isnumeric()当所有都是数字，返回True</p><p>str.split(sep=None) 分割 按sep分割，返回列表。默认sep为空格</p><p>str.replace(old,new[,count]) 替换并返回副本</p><p>str.join(i)将i中元素连接，用str分隔</p><h1 id="ord-transform-str-into-ascii-chr-contrast">ord() transform str into ascii chr() contrast</h1><p>print('aaa'.center(50,'-'))在某长度中居中显示</p><h1 id="time库">time库</h1><p>time.clock()计时开始、结束并返回时间差</p><p>即覆盖输出 棒呆</p><p>==<strong>神tm字母可以直接比大小</strong>==</p><h1 id="文件读写">文件读写</h1><p><code>with open('hahaha.txt','r') as f:</code></p><h2 id="os模块-处理文件和目录">os模块 处理文件和目录</h2><p>shutil更高级的</p><h2 id="glob模块-文件路径查找">GLOB模块 文件路径查找</h2><p>glob.glob('')</p><p><code>*</code>匹配多个字符</p><p><code>?</code>匹配单个字符</p><p>[0~9]</p><p><em>eyed3 修改mp3文件标签</em></p><p>import xxx as x</p><h2 id="pil库">pil库</h2><h1 id="文档格式转换">文档格式转换</h1><h2 id="csv">CSV</h2><p>程序之间转移表格数据</p><p>纯文本</p><h2 id="html">HTML</h2><h2 id="json">Json</h2><p>爬取的地址: https://api.douban.com/v2/book/isbn/+isbn</p><p>豆瓣 根据isbn得图书信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;    <span class="attr">&quot;rating&quot;</span>:    &#123;       <span class="attr">&quot;max&quot;</span>:<span class="number">10</span>,       <span class="attr">&quot;numRaters&quot;</span>:<span class="number">1204</span>,       <span class="attr">&quot;average&quot;</span>:<span class="string">&quot;9.1&quot;</span>,       <span class="attr">&quot;min&quot;</span>:<span class="number">0</span>   &#125;,    <span class="attr">&quot;subtitle&quot;</span>:<span class="string">&quot;&quot;</span>,    <span class="attr">&quot;author&quot;</span>:[<span class="string">&quot;[法]米兰·昆德拉&quot;</span>],    <span class="attr">&quot;pubdate&quot;</span>:<span class="string">&quot;2014-6&quot;</span>,    <span class="attr">&quot;tags&quot;</span>:    [            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">239</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;米兰·昆德拉&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;米兰·昆德拉&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">167</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;哲学&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;哲学&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">153</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;米兰・昆德拉&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;米兰・昆德拉&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">147</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;小说&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小说&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">145</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;外国文学&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;外国文学&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">119</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;爱情&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;爱情&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">98</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;捷克&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;捷克&quot;</span>&#125;,            &#123;<span class="attr">&quot;count&quot;</span>:<span class="number">93</span>,             <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;人生&quot;</span>,             <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;人生&quot;</span>&#125;        ],       <span class="attr">&quot;origin_title&quot;</span>:<span class="string">&quot;&quot;</span>,    <span class="attr">&quot;image&quot;</span>:<span class="string">&quot;https://img1.doubanio.com\/view\/subject\/m\/public\/s27471968.jpg&quot;</span>,    <span class="attr">&quot;binding&quot;</span>:<span class="string">&quot;精装&quot;</span>,    <span class="attr">&quot;translator&quot;</span>:[<span class="string">&quot;许钧&quot;</span>],    <span class="attr">&quot;catalog&quot;</span>:<span class="string">&quot;第一部 轻与重\n第二部 灵与肉\n第三部 不解之词\n第四部 灵与肉\n第五部 轻与重\n第六部 伟大的进军\n第七部 卡列宁的微笑\n大写的牧歌与小写的牧歌 弗朗索瓦·里卡尔&quot;</span>,    <span class="attr">&quot;pages&quot;</span>:<span class="string">&quot;427&quot;</span>,    <span class="attr">&quot;images&quot;</span>:&#123;<span class="attr">&quot;small&quot;</span>:<span class="string">&quot;https://img1.doubanio.com\/view\/subject\/s\/public\/s27471968.jpg&quot;</span>,<span class="attr">&quot;large&quot;</span>:<span class="string">&quot;https://img1.doubanio.com\/view\/subject\/l\/public\/s27471968.jpg&quot;</span>,<span class="attr">&quot;medium&quot;</span>:<span class="string">&quot;https://img1.doubanio.com\/view\/subject\/m\/public\/s27471968.jpg&quot;</span>&#125;,    <span class="attr">&quot;alt&quot;</span>:<span class="string">&quot;https:\/\/book.douban.com\/subject\/25900384\/&quot;</span>,    <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;25900384&quot;</span>,    <span class="attr">&quot;publisher&quot;</span>:<span class="string">&quot;上海译文出版社&quot;</span>,    <span class="attr">&quot;isbn10&quot;</span>:<span class="string">&quot;7532766632&quot;</span>,    <span class="attr">&quot;isbn13&quot;</span>:<span class="string">&quot;9787532766635&quot;</span>,    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;不能承受的生命之轻&quot;</span>,    <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https:\/\/api.douban.com\/v2\/book\/25900384&quot;</span>,    <span class="attr">&quot;alt_title&quot;</span>:<span class="string">&quot;&quot;</span>,    <span class="attr">&quot;author_intro&quot;</span>:<span class="string">&quot;&quot;</span>,    <span class="attr">&quot;summary&quot;</span>:<span class="string">&quot;《不能承受的生命之轻》是米兰·昆德拉最负盛名的作品。小说描写了托马斯与特丽莎、萨丽娜之间的感情生活。但它不是一个男人和两个女人的三角性爱故事，它是一部哲理小说，小说从“永恒轮回”的讨论开始，把读者带入了对一系列问题的思考中，比如轻与重、灵与肉。\n《不能承受的生命之轻》是一部意象繁复的书，其中装载了多种涵义：被政治化了的社会内涵的揭示、人性考察、个人命运在特定历史与政治语境下的呈现，以及对两性关系本质上的探索等。昆德拉将这些元素糅合在一起，写成一部非同凡响的小说——其中既有隐喻式的哲学思考，也有人的悲欢离合的生命历程的展现。&quot;</span>,    <span class="attr">&quot;series&quot;</span>:    &#123;<span class="attr">&quot;id&quot;</span>:<span class="string">&quot;24318&quot;</span>,         <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;米兰·昆德拉作品全新系列&quot;</span>&#125;,    <span class="attr">&quot;price&quot;</span>:<span class="string">&quot;46.00元&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>http://mall.baicizhan.com/ws/search?w=apple</p><p>百词斩 单词信息</p><p>https://api.douban.com/v2/book/isbn/9787532766635,9787508618852,9787540225353</p><p>re 正则表达式 极其强大 有点复杂</p><p>可以通过 <strong>name</strong> 属性获取命名空间的名字：</p><figure><img src="http://files.jb51.net/file_images/article/201606/20160612150005.jpg" alt="img" /><figcaption>img</figcaption></figure><p>主文件的命名空间是叫做 '<strong>main</strong>'，而模块的命名空间就是模块名</p><h1 id="requests库">requests库</h1><p><img src="https://jyzhu.top/mydocs/pics/pyNotes4.png" alt="幕快照 2018-05-16 下午10.17.0" /><img src="https://jyzhu.top/mydocs/pics/pyNotes5.png" alt="幕快照 2018-05-16 下午10.22.2" /><img src="https://jyzhu.top/mydocs/pics/pyNotes6.png" alt="幕快照 2018-05-16 下午10.27.5" /></p><p>put、post一个字符串，自动放到'data'key下</p><p>放几个键值对，自动放到'form'（表单）下</p><p>patch比put节省带宽，put必须把整个字段写完整，patch只用写需<img src="https://jyzhu.top/mydocs/pics/pyNotes7.png" alt="幕快照 2018-05-18 下午6.03.5" /><img src="https://jyzhu.top/mydocs/pics/pyNotes78png.png" alt="幕快照 2018-05-18 下午6.16.1" /><img src="https://jyzhu.top/mydocs/pics/pyNotes9.png" alt="幕快照 2018-05-18 下午6.24.3" /><img src="https://jyzhu.top/mydocs/pics/pyNotes10.png" alt="幕快照 2018-05-18 下午6.26.1" /><img src="https://jyzhu.top/mydocs/pics/pyNotes11.png" alt="幕快照 2018-05-18 下午6.27.0" /><img src="https://jyzhu.top/mydocs/pics/pyNotes12.png" alt="幕快照 2018-05-18 下午6.31.4" /><img src="https://jyzhu.top/mydocs/pics/pyNotes13.png" alt="幕快照 2018-05-18 下午6.35.1" /><img src="https://jyzhu.top/mydocs/pics/pyNotes14.png" alt="幕快照 2018-05-18 下午6.35.3" />上图中一处错误:</p><p>post是不删除的情况下新增</p><p>r=requests.get('http://product.dangdang.com/20357456.html')</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; r.encoding</span><br><span class="line">&gt;&gt; <span class="string">&#x27;GBK&#x27;</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; r.status_code</span><br><span class="line">&gt;&gt; <span class="number">200</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; r.headers</span><br><span class="line">&gt;&gt; &#123;<span class="string">&#x27;Server&#x27;</span>: <span class="string">&#x27;nginx&#x27;</span>, <span class="string">&#x27;Date&#x27;</span>: <span class="string">&#x27;Thu, 19 Jul 2018 09:30:49 GMT&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=GBK&#x27;</span>, <span class="string">&#x27;Transfer-Encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;producthistoryid=20357456; expires=Fri, 19-Jul-2019 09:30:49 GMT; Max-Age=31536000; path=/; domain=.dangdang.com&#x27;</span>, <span class="string">&#x27;Dd-Loc&#x27;</span>: <span class="string">&#x27;7439338628981511792&#x27;</span>, <span class="string">&#x27;Hit-Cache&#x27;</span>: <span class="string">&#x27;false&#x27;</span>, <span class="string">&#x27;Content-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt; r.request.headers <span class="comment">#获知头部信息</span></span><br><span class="line">&gt;&gt; &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.18.4&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">&gt;/<span class="comment">#要伪装一个浏览器</span></span><br><span class="line"></span><br><span class="line">&gt;kv=&#123;<span class="string">&#x27;uesr-agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line">&gt;url=<span class="string">&#x27;http://product.dangdang.com/20357456.html&#x27;</span></span><br><span class="line">&gt;r=requests.get(url,headers=kv)</span><br></pre></td></tr></table></figure><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes15.png" alt="屏幕快照 2018-07-19 下午6.19.34" /><figcaption>屏幕快照 2018-07-19 下午6.19.34</figcaption></figure><h2 id="beautifulsoup库">BeautifulSoup库</h2><p>可以把html文件输入进来，并且自己整理成好看的格式</p><p><strong>soup.select('.xxx')</strong>直接nmdcss选择器！！！</p><p>from bs4 import BeautifulSoup</p><p><em>大小写敏感，BeautifulSoup是一个类</em></p><p><strong>html文档=标签树=BeautifulSoup类</strong></p><p>soup=BeautifulSoup(demo,'html.parser')</p><p>解析所有标签格式的源代码</p><p><strong>html.parser是自带的html格式的解析器，此外还可以pip一些别的解析器</strong></p><p>以下是可以用BeautifulSoup.xx来引用的元素：</p><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes16.png" alt="屏幕快照 2018-07-29 上午11.58.21" /><figcaption>屏幕快照 2018-07-29 上午11.58.21</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes17.png" alt="屏幕快照 2018-07-29 上午11.59.09" /><figcaption>屏幕快照 2018-07-29 上午11.59.09</figcaption></figure><p>如果有多个相同标签，如多个<code>&lt;p&gt;</code>，只能引用第一个</p><p>还可以用soup.a.parent 找标签的父级标签</p><p>soup.a.attrs标签属性</p><p>soup.a.attrs['class'] 具体某属性</p><p>soup.a.name标签名</p><p>soup.a.string文字内容 text可以跨越多个标签层次，直接打出里面的文字</p><p><em>这里如果有注释的话，也会直接出来，而没有注释的提示，要区分的话就看type</em></p><p>###html内容遍历</p><ol type="1"><li>上行: .parent .parents(用于遍历)</li><li>下行:contents(儿子标签，返回列表) children（用于遍历，每次返回一个标签） descendants（所有次级节点？）</li><li>平行:next_sibling previous_sibling next_siblings previous_siblings</li></ol><p>用于遍历的是迭代类型，只能用在for循环中</p><p>只有同一个父亲底下的才是平行关系</p><h3 id="prettify">prettify</h3><p><strong>bs4将任何文件转换成utf-8</strong></p><h3 id="信息标记">信息标记</h3><p>让信息具有结构</p><p>三种标记形式：</p><ol type="1"><li>xml（基于html的通用标记表达形式）繁琐</li><li>json：有类型的键值对，都有双引号；多值用[,]表示；键值对可嵌套，用{}。适合程序</li><li>YAML：键值对，无双引号；所属关系用缩进表达；用-表达并列；|表示整块数据；#是注释。适合阅读</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key : valuekey :</span> <span class="comment">#comment-value1-value2key :subkey : value</span></span><br></pre></td></tr></table></figure><h4 id="信息提取方法">信息提取方法</h4><ol type="1"><li>标签解析器</li><li>直接搜索</li><li>结合</li></ol><p><strong>find_all()：</strong></p><p>bs4中有find_all(‘a’) 对标签名字的检索 ，返回所有标签的列表 如果是true 则显示所有标签名</p><p>find_all(name,attribute,是否搜索所有子孙=true，string)</p><p>还可以用正则表达式搜索不完全名字</p><p>可以用<code>标签()</code>代替<code>标签.find_all()</code>因为太常用了</p><figure><img src="https://jyzhu.top/mydocs/pics/pyNotes18.png" alt="屏幕快照 2018-09-27 上午9.54.07" /><figcaption>屏幕快照 2018-09-27 上午9.54.07</figcaption></figure><p><strong>中文输出对齐问题</strong></p><p>用中文空格chr（12288）来填充</p><h1 id="正则表达式">正则表达式</h1><p>通用的字符串表达框架</p><p>在字符串的范围内表达「简洁」与「特征」</p><h2 id="操作符">操作符</h2><table><thead><tr class="header"><th>操作符</th><th>说明</th><th>例子</th></tr></thead><tbody><tr class="odd"><td>.</td><td>单个字符</td><td></td></tr><tr class="even"><td>[]</td><td>字符集，给出单个字符的取值范围</td><td>[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr class="odd"><td>[^]</td><td>非，给出单个字符的排除范围</td><td></td></tr><tr class="even"><td>*</td><td>前一个字符0或多次扩展</td><td>py*:p</td></tr><tr class="odd"><td>+</td><td>前一个字符1或多次扩展</td><td>py+：py</td></tr><tr class="even"><td>?</td><td>前一个字符0或1次</td><td>py?：p</td></tr><tr class="odd"><td>|</td><td>左右表达式的任意一个</td><td>abc|def：abc或def</td></tr><tr class="even"><td>{m}</td><td>前一个字符m次扩展</td><td>py{2}t:pyyt</td></tr><tr class="odd"><td>{m,n}</td><td>前一个字符m至n次扩展(包括n)</td><td>py{1,2}thon:python</td></tr><tr class="even"><td>^</td><td>匹配字符串的开头</td><td>^py:字符串开头有py</td></tr><tr class="odd"><td>$</td><td>匹配字符串结尾</td><td></td></tr><tr class="even"><td>()</td><td>分组，内部只能用|</td><td>（py）(py|yp)</td></tr><tr class="odd"><td></td><td>数字，即[0-9]</td><td></td></tr><tr class="even"><td></td><td>单个字符，即[A-Za-z0-9]以及下划线</td><td></td></tr></tbody></table><p><code>^[A-Za-z]+$</code> 由26个字母组成的字符串</p><p><code>^-?\d+$</code> 整数</p><p><code>^[0-9]*[1-9][0-9]*$</code> 正整数（必须要有1以上）</p><p><code>[1-9]\d&#123;5&#125;</code> 中国境内邮政编码</p><p><code>[\u4e00-\u9fa5]</code>所有中文</p><p><code>\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</code>国内电话号码</p><p><code>( ([1-9]?\d|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5]).)&#123;3&#125;([0-9]&#123;1,2&#125;|1[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])</code></p><p>IP地址</p><h2 id="re库的功能函数">re库的功能函数</h2><p>###re.search(正则表达式，string，flags=0 控制标记)</p><p>在字符串中搜索匹配的第一个位置，返回match对象</p><h5 id="控制标记">控制标记：</h5><p>re.I (IGNORECASE)忽视大小写</p><p>re.M (MULTILINE) ^可以将每一行当做开头</p><p>re.S（DOTALL） .可以匹配所有字符</p><p>###re.match(正则表达式，string，flags=0 控制标记)</p><p>从起始位置起匹配正则表达式，返回match对象</p><p>###re.findall(正则表达式，string，flags=0)</p><p>列表类型返回全部能匹配的串</p><p>###re.split(正则表达式，string，maxsplit=0最大分割数，flags=0)</p><p>将字符串按匹配结果进行分割（匹配的部分去掉并作为分割之处），返回列表类型</p><p>###re.finditer(pattern，string，flags=0)</p><p>返回字符串匹配结果的迭代类型，每个迭代元素是match对象</p><p>###re.sub(pattern，repl，string，count=0，flags=0)</p><p>repl：用来替换的字符串</p><p>count：最大替换次数</p><p>在字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</p><p>###pat=re.compile(pattern,flags=0)</p><p>将正则表达式从字符串编译成对象</p><p>###match对象</p><p>可以用if match： 判断是否匹配</p><p>match.group(0)第一个匹配的元素</p><h5 id="重要属性">重要属性</h5><p>.string 用来匹配的原文本</p><p>.re 匹配时用的pattern（是compile之后的）</p><p>.pos 开始搜索文本的位置</p><p>.endpos 结束搜索文本的位置</p><h5 id="重要方法">重要方法</h5><p>.group(0) 获得字符串</p><p>.start() 匹配字符串在原字符串的开始位置</p><p>.end() 结束位置</p><p>.span() 返回(.start(),.end())</p><h2 id="re的用法">re的用法</h2><ol type="1"><li>一次性操作可以用函数式用法，match=re.search('xx','xx')</li><li>编译后的多次操作用面向对象用法，pat=re.compile(r'pattern') match=pat.search('string')</li></ol><h3 id="表示类型">表示类型</h3><p>raw string原生字符串类型 r‘text‘：不包含转义符，这样斜杠就是斜杠，比较方便</p><h3 id="贪婪匹配和最小匹配">贪婪匹配和最小匹配</h3><p>默认采用<strong>贪婪匹配</strong>方式，从多个匹配的子串中返回最长的那个</p><p>例如，<code>match=re.search(r'PY.*N','PYANBNCNDN')</code>(PY开头，N结尾)</p><p>会得到'PYANBNCNDN'</p><p>如果想用<strong>最小匹配</strong>，只要加个?，即'PY.*?N'</p><p>最小匹配操作符：*? +? ?? {m,n}?</p><h1 id="序列化">序列化</h1><p>序列化：将数据转成文本存到文件中，方便下次取用</p><p>方法：模块cPickle or pickle</p><p>pickle.dumps(dictA)='xxxxxxx' 将dictA转换成文本</p><p>pickle.dump(dictA,fileF) 将dictA转换成文本并且直接存储进fileF</p><p>反序列化：loads or load</p><p>还是序列化成json比较好</p><h1 id="多进程与多线程">多进程与多线程</h1><p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</p><p>在开销方面：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><p>所处环境：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><p>内存分配方面：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</p><p>包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p>多线程的优点：</p><ol type="1"><li>把运行时间长的任务放到后台去处理</li><li>用户界面可以做进度条来显示处理的进度</li><li>加快程序速度</li><li>在一些需要等待的任务实现上很有用，释放珍贵资源，如内存占用</li></ol><h2 id="multiprocessing.pool">multiprocessing.Pool</h2><p>用multiprocessing库的Pool类可以创建多进程，</p><p><code>p=Pool(processes=3)</code>创建3个进程</p><p><code>p.apply_async(runTask, args=(i,))</code>让进程执行runTask，args是输入的变量们，i是第i个进程</p><p><code>os.getpid()</code>可获得当前进程的id</p><p><code>p.close()</code>进程结束 <code>p.join()</code>进程间同步 这俩好像最后都得写</p><h2 id="multip.queue">multip.Queue</h2><p>用Queue类实现多进程间的通讯</p><p>在一开始用<code>q=Queue()</code>创建Queue类，并且传递给各进程</p><p>然后在进程中用<code>q.put(url)</code> <code>q.get()</code>读和写东西进去</p><p>它俩有两个参数 blocked和timeout 我没看懂</p><h1 id="debug">debug</h1><p>磨刀不误砍柴工</p><p>###调试</p><p>####输出</p><p>print</p><p>assert断言 条件，“不符合条件时抛出的错误”</p><p>assertpy 第三方库</p><p>可用参数关闭</p><p>logging库 可以输出到email、其他文件 等</p><p>####文本调试工具</p><p>PDB 内置库 pdb.set_trace()然后在这儿随便调变量</p><p>IPDB jupyter中</p><p>PUDB 可视化全屏调试工具</p><p>####图形调试工具</p><p>idle</p><p>pycharm</p><p>微软的一个</p><h3 id="测试">测试</h3><p>单元测试</p><p>unitest标准库，pytest第三方库特别火</p><p>mock</p><p>假对象</p><p>FAKER库模拟数据</p><p>Vue.js是js的一个库</p><p>UI框架</p><p>echart 百度给的</p><p>动态爬虫</p><p>数据处理相关库</p><p>Numpy 基于NDarray数据类型</p><p>pandas 基于series和dataframe数据类型</p><p>scipy高级的机器学习库 很多子模块</p><p>matplotlib 画图 但有点丑</p><p>tushare 财经数据接口库 返回的绝大部分数据是pandas的dataframe类型</p><p>vpython</p><h3 id="io">IO</h3><p>input() 括号里别乱加东西</p><p>eval() 把引号去掉</p><p>ls=input().split() 默认以空格分割</p><p>a=ls[0]</p><p>b=ls[1]</p><p>print('a is {}'.format(* **))</p><h3 id="数据结构">数据结构</h3><p>####基本类型：int float str 都是只读的</p><p>强制转换 int()</p><p>str.split() strip slice ...都是返回一个copy</p><p>####复合类型：list (tuple) set dict</p><p>可改 只读 无序无重</p><p>list s[::step] 尽可能多掌握 index</p><p>for i in ls:</p><pre><code>j=ls.index(i) 拿到元素的下标if i in ls[j+1:] …….</code></pre><p>tuple: a,b,c (a,b,c) (2,) 只读</p><p>dict:{'key':'value'}</p><p>list.sort 内部排序 排完还是它本身</p><p>sorted(__,key=lambda x:x[0])返回新的</p><p>####if elif else while for</p><p>s2=s for s in ss if s&gt;2</p><p>####函数</p><p>def fname(a,b=20,*,**):</p><pre><code>return a,b,c</code></pre><p>语言简单，难在算法！</p><h1 id="xpath">XPath</h1><table><thead><tr class="header"><th>表达式</th><th>描述</th><th>例子</th></tr></thead><tbody><tr class="odd"><td>nodename</td><td>选取此节点的所有子节点</td><td>classroom</td></tr><tr class="even"><td>/</td><td>从根节点选取</td><td>/classroom</td></tr><tr class="odd"><td>//</td><td>选择任意位置的某个节点</td><td>//student</td></tr><tr class="even"><td>.</td><td>选取当前节点</td><td></td></tr><tr class="odd"><td>..</td><td>选取当前的父节点</td><td></td></tr><tr class="even"><td>@</td><td>选取属性</td><td>//<span class="citation" data-cites="name">@name</span></td></tr></tbody></table><p>谓语：用来选取某个特定节点</p><p>用法：方括号</p><ol type="1"><li>第n个元素 [n]</li><li>最后一个 [last()]</li><li>倒数第二个[last()-1]</li><li>前两个[position()&lt;3]</li><li>拥有属性name的所有student元素 //student<span class="citation" data-cites="name">[@name]</span></li><li>拥有属性name为Zhu的所有student元素 //student<span class="citation" data-cites="name">[@name='Zhu']</span></li></ol><p>通配符：<code>*</code> 任意元素</p><p>多条路径：<code>|</code></p><p><code>//div/ul[@class='show']</code></p><p><code>string(.)</code></p><h1 id="css选择器">CSS选择器</h1><p><code>::attr(href)</code>选择href属性</p><figure><img src="https://jyzhu.top/mydocs/pics/css1.png" alt="css1" /><figcaption>css1</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/css2.png" alt="css2" /><figcaption>css2</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/css3.png" alt="css3" /><figcaption>css3</figcaption></figure><p><code>div:contains(&quot;str&quot;)</code>文本包含了str的div</p><h1 id="scrapy">Scrapy</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapyclass </span><br><span class="line">StackOverflowSpider(scrapy.Spider):    </span><br><span class="line">  name = <span class="string">&quot;stackoverflow&quot;</span>    </span><br><span class="line">  start_urls = [<span class="string">&quot;http://stackoverflow.com/questions?sort=votes&quot;</span>]    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span>   <span class="comment"># by this we can create start urls     </span></span><br><span class="line">    reqs = []        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):            </span><br><span class="line">      req = scrapy.Request(<span class="string">&#x27;url&#x27;</span>+<span class="built_in">str</span>(i))            </span><br><span class="line">      reqs.append(req)        </span><br><span class="line">      <span class="keyword">return</span> reqs        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span>        </span><br><span class="line">      <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">&#x27;.question-summary h3 a::attr(href)&#x27;</span>):            </span><br><span class="line">        full_url = response.urljoin(href.extract())            </span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(full_url, callback=self.parse_question)    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_question</span>(<span class="params">self, response</span>):</span>        </span><br><span class="line">        <span class="keyword">yield</span>&#123; <span class="string">&#x27;title&#x27;</span>: response.css(<span class="string">&#x27;h1 a::text&#x27;</span>).extract()[<span class="number">0</span>],            <span class="string">&#x27;votes&#x27;</span>: response.css(<span class="string">&#x27;.question .vote-count-post::text&#x27;</span>).extract()[<span class="number">0</span>],            <span class="string">&#x27;body&#x27;</span>: response.css(<span class="string">&#x27;.question post-text&#x27;</span>).extract()[<span class="number">0</span>],            <span class="string">&#x27;tags&#x27;</span>: response.css(<span class="string">&#x27;.question .post-tag::text&#x27;</span>).extract(),            <span class="string">&#x27;link&#x27;</span>: response.url,    &#125;</span><br></pre></td></tr></table></figure><p><code>scrapy runspider somefile.py -o xx.csv</code></p><p><code>start_urls</code>作为初始链接，并默认把<code>parse()</code>作为回调函数</p><p>在parse中用css选择器获得目标url，并注册<code>parse_question()</code>作为目标url的回调函数</p><h2 id="command-line">command line</h2><p><code>scrapy crawl xxxspider -s JOBDIR=job1</code></p><p>可以让任务随时中断又恢复，按ctrl+c就中断，下次再点开这个就继续</p><p><code>--help</code> <code>version</code> <code>version -v</code></p><p><code>startproject xxx</code>创建一个工程，包括创建一系列文件结构</p><p><code>genspider xxx xxx.com</code>general spider在一个工程中创建一个爬虫，可产生多个爬虫，名字不同</p><p><code>list</code>查看本工程中有哪些spider</p><p><code>view url</code>用浏览器查看当前爬下来的网页</p><p><code>parse url</code>解析，用工程中写好的parse来解析url</p><p><strong><code>shell</code>首先执行<code>scrapy shell url</code>进入，然后常用的是<code>response</code>对象，用<code>response.css('h a::text').extract()</code>直接看到东西有没有</strong></p><p><code>runspider</code>运行一个自包含的爬虫 不用这个，用<code>crawl</code></p><p><code>bench</code>基准测试，看scrapy有否安装成功</p><h2 id="main-kits">main kits</h2><p>###<code>Spider</code>类</p><p>定义了爬取、追踪、提取网站数据的全过程</p><h4 id="属性">属性：</h4><p>name、allowed_domains、start_urls、</p><p>custom_settings个性化设置，会覆盖全局<code>settings.py</code>中的设置</p><p>crawler抓取器，spider会绑定在上面</p><p>settings配置实例，包含project中所有配置变量</p><p>logging日志实例</p><h4 id="方法">方法</h4><p>from_crawler() 创建spiders</p><p>start_requests（） 生成初始requests</p><p>make_requests_from_url(url) 根据url生成一个request</p><p>parse(response)解析网页内容</p><p>self.logger.info('xxx')记录日志</p><p>closed(reason) 关闭spider时使用</p><h4 id="子类">子类</h4><p>CrawlSpider XMLFeedSpider CSVFeedSpider SitemapSpider</p><h3 id="selecter类"><code>Selecter</code>类</h3><p><code>extract_first(default='not found')</code>可以解决没找到值而终止循环的问题</p><h3 id="item类"><code>Item</code>类</h3><p>完整定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapyclass Product(scrapy.Item):    </span><br><span class="line">  name = scrapy.Field()    </span><br><span class="line">  stock = scrapy.Field()    </span><br><span class="line">  last_updated = scrapy.Field(serializer=<span class="built_in">str</span>)</span><br><span class="line">  <span class="comment">#don&#x27;t worry, we will learn this latter.</span></span><br></pre></td></tr></table></figure><h3 id="item-pipeline类"><code>Item Pipeline</code>类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions </span><br><span class="line"><span class="keyword">import</span> DropItemclass </span><br><span class="line">PricePipeline(Object):    vat_factor=<span class="number">1.5</span>    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span><span class="comment"># necessary        </span></span><br><span class="line">    <span class="keyword">if</span> item[<span class="string">&#x27;price&#x27;</span>]:            </span><br><span class="line">      <span class="keyword">if</span> item[<span class="string">&#x27;price_excludes_vat&#x27;</span>]:                </span><br><span class="line">        item[<span class="string">&#x27;price&#x27;</span>]*=self.vat_factor            </span><br><span class="line">        <span class="keyword">return</span> item       </span><br><span class="line">      <span class="keyword">else</span>:            </span><br><span class="line">        <span class="keyword">return</span> DropItem(<span class="string">&#x27;Missing price in &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item))        </span><br><span class="line">      <span class="comment"># 触发一个异常            </span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">DuplicatesPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span>    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>        </span><br><span class="line">          self.ids_seen=<span class="built_in">set</span>()    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span>        </span><br><span class="line">          <span class="keyword">if</span> item[<span class="string">&#x27;id&#x27;</span>] <span class="keyword">in</span> self.ids_seen:            </span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&#x27;Duplicate item found:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item))        </span><br><span class="line">          <span class="keyword">else</span>      self.ids_seen.add(item[<span class="string">&#x27;id&#x27;</span>])        </span><br><span class="line">          <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>启用Item Pipeline：在settings中设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;    <span class="string">&#x27;myproject.pipelines.PricePipeline&#x27;</span>: <span class="number">300</span>,    <span class="string">&#x27;myproject.pipelines.DuplicatesPipeline&#x27;</span>: <span class="number">800</span>    <span class="comment"># pipeline ： 优先级(0~1000，小的先)&#125;</span></span><br></pre></td></tr></table></figure><h3 id="feed-exports类"><code>Feed Exports</code>类</h3><p>保存为csv：</p><p>writeToCsv.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv   <span class="keyword">from</span> PROJECT_NAME <span class="keyword">import</span> settings   <span class="class"><span class="keyword">class</span> <span class="title">WriteToCsv</span>(<span class="params"><span class="built_in">object</span></span>):</span>        <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span>            writer = csv.writer(<span class="built_in">open</span>(settings.csv_file_path, <span class="string">&#x27;a&#x27;</span>), lineterminator=<span class="string">&#x27;\n&#x27;</span>)       writer.writerow([item[key] <span class="keyword">for</span> key <span class="keyword">in</span> item.keys()])            <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123; <span class="string">&#x27;project.pipelines_path.writeToCsv.WriteToCsv&#x27;</span> : A_NUMBER_HIGHER_THAN_ALL_OTHER_PIPELINES&#125;   csv_file_path = PATH_TO_CSV</span><br></pre></td></tr></table></figure><h2 id="main-object">main object</h2><h3 id="requestsobject"><code>Requests</code>object</h3><p>class scrapy.http.Requests(url,[callback,method='GET',headers,body,cookies,meta,encoding='utf-8',priority=0,don't_filter=False,errback])</p><p>copy（） 返回一个和原requests一模一样的</p><p>replace（） 返回一个可以自己定制的</p><p><code>return scrapy.Request(url,meta=&#123;'theitem': item&#125;)</code></p><p><code>item = response.meta['theitem']</code></p><p>可以在两个parse 函数中传递item对象</p><p>重要子类：FormRequest 用来实现登录 参数：url,[formdata]</p><p>登录的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapyclass LoginSpider(scrapy.spider):    name = <span class="string">&#x27;xxx&#x27;</span>    start_urls = [<span class="string">&#x27;xxx&#x27;</span>]        <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self,response</span>):</span>        <span class="keyword">return</span> scrapy.FormRequest.from_response(            response,            formdata=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;xxx&#x27;</span>&#125;,            callback=self.after_login        )        <span class="function"><span class="keyword">def</span> <span class="title">after_login</span>(<span class="params">self,response</span>):</span>        <span class="comment">#check login succeed before going on        if &#x27;authontication failed&#x27; in response.body:            self.logger.error(&#x27;Login failed&#x27;)            return        #continue....</span></span><br></pre></td></tr></table></figure><h3 id="response对象"><code>Response</code>对象</h3><p>一般不实例化，只是使用，是Request返回的一个对象</p><p>urljoin（url）一般从网页中抽取的都是相对链接，用这个生成绝对链接</p><h2 id="inner-service">inner service</h2><h3 id="logging">logging</h3><p><code>import logging</code></p><p><code>logging.warning('xxx')</code></p><p><code>logging.log(logging.WARNING,'xxx')</code></p><p>但在scrapy中，scrapy.Spider类已经内置了logger类，而MySpider又会继承它，所以直接用<code>self.logger.info('xxx')</code>就行</p><p>还可以在settings中配置logger，主要有<code>LOG_FILE</code>确定log文件，这个一设置，就会产生日志文件了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divs=response.css(<span class="string">&#x27;xxx&#x27;</span>)<span class="keyword">if</span> <span class="keyword">not</span> divs:self.logger.info(<span class="string">&#x27;Page error. &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:    item[<span class="string">&#x27;xx&#x27;</span>]=xxx;<span class="keyword">except</span> Exception,e:    <span class="built_in">print</span>(<span class="string">&#x27;Error:&#x27;</span>,e)</span><br></pre></td></tr></table></figure><h3 id="stats-collector">Stats Collector</h3><h3 id="sending-email">Sending Email</h3><p>import:<code>from scrapy.mail import Mailsender</code></p><p>start:<code>mailer=MailSender(host,from,user,password,port)</code>or<code>mailer=MailSender.from_settings(settings)</code></p><p>use:<code>mailer.send(to=['xxx@163.com'],subject='xxx',body='xxx',cc=['xx@a.com'])</code></p><p>settings:<code>MAIL_FROM MAIL_HOST MAIL_PORT MAIL_USER MAIL_PASS MAIL_TLS MAIL_SSL</code></p><h3 id="architecture">Architecture</h3><figure><img src="https://jyzhu.top/mydocs/pics/scrapy_architecture_02.png" alt="scrapy_architecture_02" /><figcaption>scrapy_architecture_02</figcaption></figure><figure><img src="https://jyzhu.top/mydocs/pics/v2-8c591d54457bb033812a2b0364011e9c_1200x500.jpg" alt="v2-8c591d54457bb033812a2b0364011e9c_1200x500" /><figcaption>v2-8c591d54457bb033812a2b0364011e9c_1200x500</figcaption></figure><h2 id="下载图片">下载图片</h2><p>使用内置的pipeline。在settings中写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="string">&#x27;scrapy.pipelines.images.ImagePipeline&#x27;</span>:<span class="number">1</span>&#125;IMAGES_URLS_FIELD = <span class="string">&#x27;xxx&#x27;</span> <span class="comment"># the name of the image&#x27;s url field in the itemIMAGES_STORE = r&#x27;.&#x27; # 存储在当前路径</span></span><br></pre></td></tr></table></figure><h2 id="proxy">proxy</h2><ol type="1"><li><p>爬取西刺网站上的ip列表，存到csv文件中</p></li><li><p>一个proxy.py文件~实现对ip的获取和检查</p></li><li><p>将meta中的proxy填充好，并且在settings中添加proxy相关的middleware，就可以使用了</p></li></ol><p>http: 4 https: 5 {'http': [['110.52.235.222', '9999', 'HTTP'], ['27.155.84.233', '8081', 'HTTP'], ['121.61.2.154', '9999', 'HTTP'], ['116.209.57.232', '9999', 'HTTP']], 'https': [['121.61.2.185', '9999', 'HTTPS'], ['121.61.0.33', '9999', 'HTTPS'], ['110.52.235.154', '9999', 'HTTPS'], ['111.77.197.133', '9999', 'HTTPS'], ['221.224.136.211', '35101', 'HTTPS']]}</p><h2 id="selenium">selenium</h2><p><code>from selenium import webdriver</code></p><p><code>driver=webdriver.Chrome()</code></p><p><code>driver.get(url)</code></p><p><code>driver.page_source</code></p><h3 id="常用属性和方法">常用属性和方法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br></pre></td></tr></table></figure><ol type="1"><li>find_element_by_id # ID</li><li>find_elements_by_class_name # class</li><li>find_elements_by_tag_name # 标签名</li><li>find_elements_by_name # name</li><li>find_elements_by_link_text # a标签中的text查找（精确匹配）</li><li>find_elements_by_partial_link_text #a标签中的text查找（部分匹配即可）</li><li>find_elements_by_css_selector # css选择器查找</li><li>find_elements_by_xpath # find_elements_by_xpath(&quot;//input&quot;)，请翻阅文档</li></ol><h2 id="scrapyd">scrapyd</h2><p>command line:<code>scrapyd</code> to execute it.</p><p>###部署</p><p>upload a spider: cd into the local</p><p>配置服务器和项目信息, 需要编辑scrapy.cfg文件，添加如下内容</p><p>[deploy:主机名]url=http://localhost:6800/</p><p>可以用<code>scrapyd-deploy -l</code>列出所有可用主机target</p><p><code>scrapyd-deploy target主机地址 -p 工程名</code></p><blockquote><p>我们也可以把项目信息写入到配置文件中，部署时就不用指定项目信息，编辑scrapy.cfg文件，添加项目信息</p><p>[deploy:server-douban]url=http://localhost:6800/project=douban-movies</p><p>下次部署可以直接执行</p><p>$ scrapyd-deploy</p></blockquote><p>###调度</p><p>调度工具：curl</p><p>shedule api:<code>curl http://localhost:6800/schedule.json -d project=xxx -d spider=somespider</code></p><p>cancel api:<code>curl http://localhost:6800/cancel.json -d project=xxx -d job=之前的任务的id</code></p><p>list:<code>curl http://129.28.28.203/listprojects.json</code></p><p>curl http://129.28.28.203:6800/schedule.json -d project=zhihu -d spider=topicfollower</p><p>curl http://129.28.28.203:6800/delproject.json -d project=zhihu</p><h1 id="sqlite3">SQLite3</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3conn = sqlite3.connect(<span class="string">&#x27;myquotes.db&#x27;</span>)curr = conn.cursor()curr.execute(<span class="string">&quot;&quot;&quot;create table quotes_tb(                title text,                author text,                tag text                )&quot;&quot;&quot;</span>)curr.execute(<span class="string">&quot;&quot;&quot;insert into quote_tb values(                xxx,zhu,notag                )&quot;&quot;&quot;</span>)conn.commit()conn.close()</span><br></pre></td></tr></table></figure><figure><img src="/Users/jiayinzhu/Desktop/笔记/放图/屏幕快照%202019-02-17%20下午3.07.13.png" alt="屏幕快照 2019-02-17 下午3.07.13" /><figcaption>屏幕快照 2019-02-17 下午3.07.13</figcaption></figure><p>use sqlite3 in scrapy pipelines:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3class SavetoSQLitePipeline(<span class="built_in">object</span>):    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>        self.create_connection()        self.create_table()            <span class="function"><span class="keyword">def</span> <span class="title">create_connection</span>(<span class="params">self</span>):</span>        self.conn=sqlite3.connect(<span class="string">&#x27;mydatabase.db&#x27;</span>)        self.curr=self.conn.cursor()            <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self</span>):</span>        self.curr.execute(<span class="string">&quot;&quot;&quot;drop table if exists my_tb&quot;&quot;&quot;</span>)        self.curr.execute(<span class="string">&quot;&quot;&quot;create table my_tb(                            aaa text,                            bbb text,                            ccc text                            )&quot;&quot;&quot;</span>)            <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span>        self.store_db(item)        <span class="built_in">print</span>(<span class="string">&#x27;Pipeline :&#x27;</span>+item[<span class="string">&#x27;title&#x27;</span>])        <span class="keyword">return</span> item        <span class="function"><span class="keyword">def</span> <span class="title">store_db</span>(<span class="params">self,item</span>):</span>        self.curr.execute(<span class="string">&quot;&quot;&quot;insert into my_tb values(?,?,?)&quot;&quot;&quot;</span>.(                        item[<span class="string">&#x27;aaa&#x27;</span>],                        item[<span class="string">&#x27;bbb&#x27;</span>],                        item[<span class="string">&#x27;ccc&#x27;</span>]                        ))        self.conn.commit()</span><br></pre></td></tr></table></figure><h1 id="machine-learning">Machine Learning</h1><h2 id="classify">classify</h2><ul><li><strong>Supervised Learning</strong>: data is labeled and the program learns to predict the output from the input data<ul><li><strong>Regression</strong> : predict a continuous-valued output.</li><li><strong>Classification</strong>: predict a discrete number of values.</li></ul></li><li><strong>Unsupervised Learning</strong>: data is unlabeled and the program learns to recognize the inherent structure in the input data<ul><li><strong>Clustering</strong> is a common unsupervised machine learning approach that finds patterns and structures in unlabeled data by grouping them into clusters.</li></ul></li></ul><h2 id="scikit-learn">scikit-learn</h2><p><a href="http://scikit-learn.org/stable/">Scikit-learn</a> is a library in Python that provides many unsupervised and supervised learning algorithms. It's built upon some of the technology you might already be familiar with, like NumPy, pandas, and Matplotlib!</p><p>As you build robust Machine Learning programs, it's helpful to have all the <code>sklearn</code>commands all in one place in case you forget.</p><h3 id="linear-regression">Linear Regression</h3><p><strong>Import and create the model:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegressionyour_model = LinearRegression()</span><br></pre></td></tr></table></figure><p><strong>Fit:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_model.fit(x_training_data, y_training_data)</span><br></pre></td></tr></table></figure><ul><li><code>.coef_</code>: contains the coefficients</li><li><code>.intercept_</code>: contains the intercept</li></ul><p><strong>Predict:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predictions = your_model.predict(your_x_data)</span><br></pre></td></tr></table></figure><ul><li><code>.score()</code>: returns the coefficient of determination R²</li></ul><hr /><h3 id="naive-bayes">Naive Bayes</h3><p><strong>Import and create the model:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNByour_model = MultinomialNB()</span><br></pre></td></tr></table></figure><p><strong>Fit:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_model.fit(x_training_data, y_training_data)</span><br></pre></td></tr></table></figure><p><strong>Predict:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Returns a list of predicted classes - one prediction for every data pointpredictions = your_model.predict(your_x_data)# For every data point, returns a list of probabilities of each classprobabilities = your_model.predict_proba(your_x_data)</span></span><br></pre></td></tr></table></figure><hr /><h3 id="k-nearest-neighbors">K-Nearest Neighbors</h3><p><strong>Import and create the model:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neigbors <span class="keyword">import</span> KNeighborsClassifieryour_model = KNeighborsClassifier()</span><br></pre></td></tr></table></figure><p><strong>Fit:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_model.fit(x_training_data, y_training_data)</span><br></pre></td></tr></table></figure><p><strong>Predict:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Returns a list of predicted classes - one prediction for every data pointpredictions = your_model.predict(your_x_data)# For every data point, returns a list of probabilities of each classprobabilities = your_model.predict_proba(your_x_data)</span></span><br></pre></td></tr></table></figure><hr /><h3 id="k-means">K-Means</h3><p><strong>Import and create the model:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeansyour_model = KMeans(n_clusters=<span class="number">4</span>, init=<span class="string">&#x27;random&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>n_clusters</code>: number of clusters to form and number of centroids to generate</li><li><code>init</code>: method for initialization<ul><li><code>k-means++</code>: K-Means++ [default]</li><li><code>random</code>: K-Means</li></ul></li><li><code>random_state</code>: the seed used by the random number generator [optional]</li></ul><p><strong>Fit:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_model.fit(x_training_data)</span><br></pre></td></tr></table></figure><p><strong>Predict:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predictions = your_model.predict(your_x_data)</span><br></pre></td></tr></table></figure><hr /><h3 id="validating-the-model">Validating the Model</h3><p><strong>Import and print accuracy, recall, precision, and F1 score:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, recall_score, precision_score, f1_scoreprint(accuracy_score(true_labels, guesses))<span class="built_in">print</span>(recall_score(true_labels, guesses))<span class="built_in">print</span>(precision_score(true_labels, guesses))<span class="built_in">print</span>(f1_score(true_labels, guesses))</span><br></pre></td></tr></table></figure><p><strong>Import and print the confusion matrix:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrixprint(confusion_matrix(true_labels, guesses))</span><br></pre></td></tr></table></figure><hr /><h3 id="training-sets-and-test-sets">Training Sets and Test Sets</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_splitx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=<span class="number">0.8</span>, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><ul><li><code>train_size</code>: the proportion of the dataset to include in the train split</li><li><code>test_size</code>: the proportion of the dataset to include in the test split</li><li><code>random_state</code>: the seed used by the random number generator [optional]</li></ul><h1 id="matplotlib"><a href="https://matplotlib.org/tutorials/introductory/usage.html">Matplotlib</a></h1><p>##Objects</p><p><code>Figure</code>:一张布，可以放很多张图</p><p><code>Axes</code>: 一张图，表示一个数据关系，可以放很多个坐标轴</p><p><code>Axis</code>: 一个坐标轴</p><p><code>Artist</code>: 所有可见的东西，包括前面那些，还有文字、标签等等。不能在Axes之间共享</p><p>##Input</p><p>input type: <code>np.array</code> or <code>np.ma.masked_array</code></p><p>to convert a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>pandas.DataFrame</code></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = pandas.DataFrame(np.random.rand(4,5), columns = list(&#x27;abcde&#x27;))a_asarray = a.values</span><br></pre></td></tr></table></figure><p>and to convert a <code>np.matrix</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.matrix([[1,2],[3,4]])b_asarray = np.asarray(b)</span><br></pre></td></tr></table></figure><p>##Backends</p><p>If your script depends on a specific backend you can use the <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use"><code>use()</code></a> function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import matplotlibmatplotlib.use(&#x27;PS&#x27;)   # generate postscript output by default</span><br></pre></td></tr></table></figure><p>If you use the <a href="https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use"><code>use()</code></a> function, this must be done before importing <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot"><code>matplotlib.pyplot</code></a>.</p><p>###matplotlib renderers:</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>Renderer</th><th>Filetypes</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><a href="https://matplotlib.org/glossary/index.html#term-agg">AGG</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-png">png</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-raster-graphics">raster graphics</a> -- high quality images using the <a href="http://antigrain.com/">Anti-Grain Geometry</a> engine</td></tr><tr class="even"><td>PS</td><td><a href="https://matplotlib.org/glossary/index.html#term-ps">ps</a> <a href="https://matplotlib.org/glossary/index.html#term-eps">eps</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-vector-graphics">vector graphics</a> -- <a href="https://en.wikipedia.org/wiki/PostScript">Postscript</a> output</td></tr><tr class="odd"><td>PDF</td><td><a href="https://matplotlib.org/glossary/index.html#term-pdf">pdf</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-vector-graphics">vector graphics</a> -- <a href="https://en.wikipedia.org/wiki/Portable_Document_Format">Portable Document Format</a></td></tr><tr class="even"><td>SVG</td><td><a href="https://matplotlib.org/glossary/index.html#term-svg">svg</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-vector-graphics">vector graphics</a> -- <a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">Scalable Vector Graphics</a></td></tr><tr class="odd"><td><a href="https://matplotlib.org/glossary/index.html#term-cairo">Cairo</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-png">png</a> <a href="https://matplotlib.org/glossary/index.html#term-ps">ps</a> <a href="https://matplotlib.org/glossary/index.html#term-pdf">pdf</a> <a href="https://matplotlib.org/glossary/index.html#term-svg">svg</a></td><td><a href="https://matplotlib.org/glossary/index.html#term-raster-graphics">raster graphics</a> and <a href="https://matplotlib.org/glossary/index.html#term-vector-graphics">vector graphics</a> -- using the <a href="https://www.cairographics.org/">Cairo graphics</a> library</td></tr></tbody></table><table><colgroup><col style="width: 10%" /><col style="width: 89%" /></colgroup><thead><tr class="header"><th>Backend</th><th>Description</th></tr></thead><tbody><tr class="odd"><td>TkAgg</td><td>Agg rendering to a <a href="https://matplotlib.org/glossary/index.html#term-tk">Tk</a> canvas (requires <a href="https://wiki.python.org/moin/TkInter">TkInter</a>). This backend can be activated in IPython with <code>%matplotlib tk</code>.</td></tr><tr class="even"><td>nbAgg</td><td>Embed an interactive figure in a Jupyter classic notebook. This backend can be enabled in Jupyter notebooks via <code>%matplotlib notebook</code>.</td></tr></tbody></table><h3 id="pyplot">Pyplot</h3><h4 id="plot">Plot</h4><p>versitile</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>默认输入是y，x会从0开始，自己长。折线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>])</span><br></pre></td></tr></table></figure><p>x-y</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>], <span class="string">&#x27;ro&#x27;</span>)plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">20</span>])</span><br></pre></td></tr></table></figure><p>第三个参数是可选的格式配置参数，默认是'b-' Blue line；现在的'ro'是Red Circle</p><p>axis指定x轴范围和y</p><h1 id="pandas">Pandas</h1><h2 id="data-structure">data structure</h2><h3 id="series">1. Series</h3><p><code>s=pd.Series([1,2,3,4],index=['a','b','c','d']</code></p><p>一维，带标签，可以装任何类型数据。可以用列表转换，也可以重新指定索引s.index()</p><h3 id="dataframe">2. DataFrame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],   <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],   <span class="string">&#x27;c&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;df=pd.DataFrame(d,columns=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><p>二维。可以用字典转换.f.columns()</p><h2 id="selection">Selection</h2><figure><img src="https://jyzhu.top/mydocs/pics/image-20191122235116830.png" alt="image-20191122235116830" /><figcaption>image-20191122235116830</figcaption></figure><p>列名选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selected_cols = [<span class="string">&#x27;2010&#x27;</span>, <span class="string">&#x27;2011&#x27;</span>, <span class="string">&#x27;2012&#x27;</span>]date_df = df[selected_cols]</span><br></pre></td></tr></table></figure><p>:robot:</p><p>Happy Coding!</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Notebook</title>
      <link href="/blog/SQL-Notebook/"/>
      <url>/blog/SQL-Notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="sql-grammar">sql grammar</h1><ul><li>SQL 对大小写不敏感：SELECT 与 select 是相同的。</li><li>某些数据库系统要求在每条 SQL 语句的末端使用分号。</li><li>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。</li></ul><h2 id="most-important-command">Most important command</h2><ul><li><strong>SELECT</strong> - 从数据库中提取数据</li><li><strong>UPDATE</strong> - 更新数据库中的数据</li><li><strong>DELETE</strong> - 从数据库中删除数据</li><li><strong>INSERT INTO</strong> - 向数据库中插入新数据</li><li><strong>CREATE DATABASE</strong> - 创建新数据库</li><li><strong>ALTER DATABASE</strong> - 修改数据库</li><li><strong>CREATE TABLE</strong> - 创建新表</li><li><strong>ALTER TABLE</strong> - 变更（改变）数据库表</li><li><strong>DROP TABLE</strong> - 删除表</li><li><strong>CREATE INDEX</strong> - 创建索引（搜索键）</li><li><strong>DROP INDEX</strong> - 删除索引</li></ul><h2 id="sql-select-语句">SQL SELECT 语句</h2><p>SELECT 语句用于从数据库中选取数据。</p><p>结果被存储在一个结果表中，称为结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="select-distinct-语句">SELECT DISTINCT 语句</h3><p>在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同（distinct）的值。</p><p>DISTINCT 关键词用于返回唯一不同的值。</p><h2 id="sql-where-子句">SQL WHERE 子句</h2><p>WHERE 子句用于提取那些满足指定标准的记录。</p><h3 id="语法">语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name operator <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites <span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="where-子句中的运算符">WHERE 子句中的运算符</h3><p>下面的运算符可以在 WHERE 子句中使用：</p><table><thead><tr class="header"><th>运算符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>=</td><td>等于</td></tr><tr class="even"><td>&lt;&gt;</td><td>不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr class="odd"><td>&gt;</td><td>大于</td></tr><tr class="even"><td>&lt;</td><td>小于</td></tr><tr class="odd"><td>&gt;=</td><td>大于等于</td></tr><tr class="even"><td>&lt;=</td><td>小于等于</td></tr><tr class="odd"><td>BETWEEN</td><td>在某个范围内</td></tr><tr class="even"><td>LIKE</td><td>搜索某种模式</td></tr><tr class="odd"><td>IN</td><td>指定针对某个列的多个可能值</td></tr></tbody></table><p>##AND &amp; OR 运算符</p><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> alexa <span class="operator">&gt;</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">AND</span> (country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span> <span class="keyword">OR</span> country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="sql-order-by-关键字">SQL ORDER BY 关键字</h2><p>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。</p><p>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name,column_name <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>例如 按多列排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country,alexa;</span><br></pre></td></tr></table></figure><h2 id="sql-insert-into-语句">SQL INSERT INTO 语句</h2><p>INSERT INTO 语句用于向表中插入新记录。</p><h3 id="sql-insert-into-语法">SQL INSERT INTO 语法</h3><p>INSERT INTO 语句可以有两种编写形式。</p><p>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p>第二种形式需要指定列名及被插入的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><h2 id="sql-update-语句">SQL UPDATE 语句</h2><p>UPDATE 语句用于更新表中已存在的记录。</p><h3 id="sql-update-语法">SQL UPDATE 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Websites</span><br><span class="line"><span class="keyword">SET</span> alexa<span class="operator">=</span><span class="string">&#x27;5000&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;菜鸟教程&#x27;</span>;</span><br></pre></td></tr></table></figure><p>==WHERE 子句规定哪条记录或者哪些记录需要更新。如果您省略了 WHERE 子句，所有的记录都将被更新！==</p><p><em>在 MySQL 中可以通过设置<code>sql_safe_updates</code> 这个自带的参数来解决，当该参数开启的情况下，你必须在update 语句后携带 where 条件，否则就会报错。</em></p><p><em><code>set sql_safe_updates=1;</code> 表示开启该参数</em></p><h2 id="sql-delete-语句">SQL DELETE 语句</h2><p>DELETE 语句用于删除表中的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column<span class="operator">=</span>some_value;</span><br></pre></td></tr></table></figure><p>您可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p><p><code>DELETE FROM *table_name*;</code></p><p>或</p><p><code>DELETE * FROM *table_name*;</code></p><h2 id="sql-select-top-子句">SQL SELECT TOP 子句</h2><p>SELECT TOP 子句用于规定要返回的记录的数目。</p><p>SELECT TOP 子句对于拥有数千条记录的大型表来说，是非常有用的。</p><blockquote><p><strong>注意:</strong>并非所有的数据库系统都支持 SELECT TOP 语句。 MySQL 支持 LIMIT 语句来选取指定的条数数据， Oracle 可以使用 ROWNUM 来选取。</p></blockquote><h3 id="sql-server-ms-access-语法">SQL Server / MS Access 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP number<span class="operator">|</span><span class="keyword">percent</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="mysql-语法">MySQL 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number;</span><br></pre></td></tr></table></figure><h3 id="实例">实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="oracle-语法">Oracle 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> number;</span><br></pre></td></tr></table></figure><h3 id="实例-1">实例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="sql-like-操作符">SQL LIKE 操作符</h2><p>LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p><h3 id="sql-like-语法">SQL LIKE 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br></pre></td></tr></table></figure><p>下面的 SQL 语句选取 name 以字母 &quot;G&quot; 开始的所有客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;G%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>下面的 SQL 语句选取 name 不包含模式 &quot;oo&quot; 的所有客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%oo%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="sql-通配符">SQL 通配符</h3><p>在 SQL 中，通配符与 SQL LIKE 操作符一起使用。</p><p>SQL 通配符用于搜索表中的数据。</p><p>在 SQL 中，可使用以下通配符：</p><table><thead><tr class="header"><th>通配符</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>%</td><td>替代 0 个或多个字符</td></tr><tr class="even"><td>_</td><td>替代一个字符</td></tr><tr class="odd"><td>[<em>charlist</em>]</td><td>字符列中的任何单一字符</td></tr><tr class="even"><td>[^*charlist*] 或 [!<em>charlist</em>]</td><td>不在字符列中的任何单一字符</td></tr></tbody></table><h2 id="in-操作符">IN 操作符</h2><p>IN 操作符允许您在 WHERE 子句中规定多个值。</p><h3 id="sql-in-语法">SQL IN 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1,value2,...);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notebook </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Notebook</title>
      <link href="/blog/Java-Notebook/"/>
      <url>/blog/Java-Notebook/</url>
      
        <content type="html"><![CDATA[<p>文档：http://docs.</p><p>1~10章 了解一下的都不考 讲得多的</p><p>选择送分题 编程题 234个 也有送分的 机房考 但上不了网</p><h1 id="about-java">About Java</h1><h2 id="jvm-java虚拟机">JVM java虚拟机</h2><p>跨平台，安全</p><p>JRE = JVM + API(Lib)</p><p>JDK = JRE + Tools</p><p>JDK安装后的文件夹：</p><ol type="1"><li>bin 工具文件</li><li>jre 与运行环境相关的文件</li><li>include 与c相关的头文件</li><li>db</li><li>lib</li></ol><h2 id="garbage-collection垃圾回收">garbage collection垃圾回收</h2><h2 id="常用工具">常用工具</h2><p>javac 编译器</p><p>java 执行器</p><p>javadoc 文档生成器</p><p>javap 查看类信息及反汇编</p><p>jar 打包器</p><p>jdb 调试器（不用了）</p>Unicode编码，每个字符占两个字节，‘]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notebook </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题（三）</title>
      <link href="/blog/no-title-3/"/>
      <url>/blog/no-title-3/</url>
      
        <content type="html"><![CDATA[<p>书架上</p><p>母亲送我的宇航员金属小人</p><p>一块长不大的痴和惘</p><p>一串继承的梦</p><p>18.11.9</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C Language Notebook</title>
      <link href="/blog/C-Language-Notebook/"/>
      <url>/blog/C-Language-Notebook/</url>
      
        <content type="html"><![CDATA[<p>目录：</p><p>[TOC]</p><blockquote><p>“不管你懂多少延续、闭包、异常处理，只要你不能解释为什么 <code>while(*s++=*t++)</code> 的作用是复制字符串，那你就是在盲目无知的情况下编程，就像一个医生不懂最基本的解剖学就在开处方”</p></blockquote><p>快捷地址：</p><p><a href="#格式控制符%的使用">%的使用</a></p><p>#复习</p><p>浮点数不可以用==判等 很多编译器支持，但有的时候不确定 因为float进寄存器会被变成double</p><p>输入时不允许规定精度，可以指定域宽</p><p>表达式是一个结果，不能++ 常量不能++</p><p>a+++b就是（a++）+b</p><p>转义/ddd 128位以内 /xdd</p><p>运算顺序：先算术，再关系，再逻辑</p><p>找子串:</p><p>b[][]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;a[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;a[j<span class="number">-1</span>]!=<span class="string">&#x27;\0&#x27;</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(k=i;k&lt;j;k++)</span><br><span class="line">            b[m][n++]=a[k];</span><br><span class="line">        b[m++][n]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>a[2][3]</code> a是一个指向数组的指针，它指的数组包含2个元素，每个元素都是一个包含3个元素的数组</p><p>可以用<code>int (*p)[3]; p=a</code>来理解，p是一个指向数组的指针，它指的数组包含3个元素</p><p>​ 把a[i]~a[j]存到b[k]中，末尾加上\0</p><p>dev C++的设置：</p><ol type="1"><li><p>在工具中找到编译选项，然后把显示最多警告（-wall）打开</p><p>这可以提示些小错误（忘记读入，“==”写成“=”之类的）</p></li><li><p>同样的地方，禁用高亮显示，再把语法中预设改为GSS Hacker</p></li><li><p>代码-完成符号-括号配对 （缺省源）</p></li><li><p>几个快捷键：</p><p>​ 在工具-&gt;快捷键设置 中可以设置自己习惯使用的快捷键，下面给出几种常用的快捷键，均为系统默认的。</p><p>​ 【Ctrl+N】新建源代码；【Ctrl+O】打开工程或文件；【Ctrl+S】保存；</p><p>​ 【F9】编译并运行；</p><p>​ 【Ctrl+Alt+F2】终止程序；</p><p>​ 【Ctrl+.】注释；【Ctrl+M】取消注释；</p></li><li><p>工具-&gt;编辑器选项 在 “浏览类” 下的“代码补全”面板中勾选“允许代码补全”，并设置延时时间。在你设定的延时时间后，编辑器会自动激活代码补全功能。</p><p>​ 此外，在编辑器中按【Ctrl+空格】可以随时激活代码补全功能。</p></li><li><p>当不确定一对括号的作用范围时，可以按【Ctrl+Shift+空格】</p></li></ol><h1 id="前言">前言</h1><h2 id="c的优点">C的优点</h2><ol type="1"><li>通用，面向过程</li><li>结构化</li><li>32个关键字，语法限制不太严格</li><li>功能丰富</li><li>表达力强，丰富，允许访问物理地址</li><li>可移植性好</li></ol><p>c是trick最多的语言</p><h2 id="c的缺点">C的缺点</h2><ol type="1"><li>漏洞百出</li><li>难以理解——可用于加密</li><li>难以修改</li></ol><h2 id="面向对象与面向过程">面向对象与面向过程</h2><p>面向对象三大特点：封装、继承、多态</p><p>面向过程：顺序、分支、循环</p><h2 id="指令">指令</h2><p><code>#include &lt;stdio.h&gt;</code></p><p>符号 # 表示这是一个预处理指令，告诉编译器在编译源代码之前，要先执行一些操作。</p><p>stdio 是“ standard input &amp; output ”的缩写</p><p>C 语言所有头文件的扩展名都是 .h</p><h2 id="主函数">主函数</h2><p>main() 函数是“主函数”。</p><p>每个 C 程序都由一个或多个函数组成，但每个 C 程序都必须有一个 main() 函数——因为每个程序总是从这个函数开始执行。</p><h2 id="打印">打印</h2><p>在控制台中，可以使用管道的方式，把可执行文件打印到打印机/txt文件</p><p><code>hhh &gt; hh.txt</code></p><h2 id="标准字符集">标准字符集</h2><p>数字、字母、运算符、特殊符号</p><p><strong>回车和换行不同</strong>：</p><p>回车：针头回到初始位置 换行：纸上卷</p><p>但是windows把回车和换行合并到</p><h2 id="个关键字">32个关键字</h2><p>只有两个不学</p><h2 id="运行模式">运行模式</h2><p>python：解释型，一句一句变成二进制</p><p>c：编译型，直接生成二进制码，再运行</p><p><em>但python也可以编译成.pyc</em></p><p>过程：</p><ol type="1"><li>编辑源程序.c</li><li>编译目标程序.obj</li><li>连接（其他程序变成）可执行目标程序.exe</li></ol><h2 id="ide">IDE</h2><ol type="1"><li>Turbo 垃圾</li><li>Visual C++ 6.0 微软的，还阔以 计算机等级考试C语言 用这个</li><li>DEV C++ 开源 免费且支持度较高 适合初学者 ACM指定</li><li>Code::Block 是IDE, MinGW是编译器，都是开源，很好用，跨平台 xywindows库，可以在windows和Linux上都用 但是英文……</li></ol><p>考试2、3二选一</p><h2 id="linux的一些">Linux的一些</h2><p>cd 存放路径</p><p>gcc -Wall -g -o 被编译程序名 源文件名</p><p>直接拖进去运行</p><p>编译器输出的结构叫作对象代码，存放它们的文件叫作对象文件。在 Linux 中这些文件的扩展名通常是 .o，在 Windows 下面这些文件的扩展名通常是 .obj 。</p><p>gcc -c 1-1.c</p><p>链接器将源代码文件中由编译器产生的各种对象模块组合起来，再从 C 语言提供的程序库中添加必要的代码模块，将它们组合成一个可执行文件。</p><p>gcc -o 1-1 1-1.o</p><p><strong>Mac是Linux的分支</strong></p><h2 id="数据库最好教材">数据库最好教材</h2><p>王山 人民大学</p><h2 id="架构师">架构师</h2><p>学设计模式，写框架</p><p>23种设计模式</p><p>MVC:module visual control</p><p>大话设计模式 一百多页 自己看</p><h2 id="各种文件类型">各种文件类型</h2><p>.dll .lib .a都是二进制，函数被封装在里面 a是linux lib是win</p><p>dll是动态的 用就调用 不用就撤出 所以比较节省空间</p><p>.h是函数的声明，可以调用前面的东西</p><p>#数据</p><p>数据类型：</p><ol type="1"><li>基本类型：整型、实型、字符</li><li>指针类型</li><li>构造类型：数组、结构、联合、枚举</li><li>无值类型void</li></ol><p>##变量</p><p>存储数据的内存盒子</p><p>全局变量尽量不要用，危险！①大家都能改 ②程序在它就在，不能及时释放内存</p><h3 id="命名规则">命名规则</h3><ol type="1"><li>字母、数字、_</li><li>第一个不能是数字</li><li>不能使用32个关键字</li><li>区分大小写</li></ol><p>###整型变量</p><table><thead><tr class="header"><th style="text-align: left;">类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">short int</td><td>2</td><td>-32768~32767</td></tr><tr class="even"><td style="text-align: left;">unsigned short int</td><td>2</td><td>65535</td></tr><tr class="odd"><td style="text-align: left;">int</td><td>4</td><td>32767</td></tr><tr class="even"><td style="text-align: left;">unsigned int</td><td>4</td><td>65535</td></tr><tr class="odd"><td style="text-align: left;">long int</td><td>4</td><td>21亿</td></tr><tr class="even"><td style="text-align: left;">unsigned long int</td><td>4</td><td>42亿</td></tr></tbody></table><p>随时防爆</p><p>负整数的二进制表示：</p><ol type="1"><li>符号位为1</li><li>非符号位为原数的绝对值取反（1变0 0变1）再加1</li></ol><p>例如，1 本来为00000001 -1为11111111</p><h3 id="实型">实型</h3><p>float</p><p>double float</p><p>long double float</p><p><strong>float有效位数：7位，double有效位数：15位</strong></p><p>后边都乱七八糟的……不管整数部分还是小数部分</p><p>尽量用double</p><h3 id="字符">字符</h3><p>用一个字节表示字符，ASCII码</p><p>a：97 A：65</p><p>65～90号为26个大写英文字母，97～122号为26个小写英文字母</p><p><strong>在ASCII码范围内，char和int可以互换</strong></p><p>C 语言中没有字符串类型，字符串都是存储在字符型数组中的。</p><p>单引号是字符常量，双引号是字符串常量。</p><p>一个字符数据既可以以字符的形式输出，也可以以整数的形式输出。</p><p>char a;</p><p>char b[7]=&quot;abvdefg&quot;;</p><p>b=['a','b','c','d',…..]</p><p>退格</p><p>制表</p><p>换行</p><p>回车</p><h3 id="静态变量">静态变量</h3><p>static</p><p>在程序运行期间，静态变量的地址不会变。即函数调用结束之后也不会死掉，下次调用仍然是上次结束的值</p><p>静态变量只初始化一次</p><p>全局变量都是静态变量，局部变量不一定</p><p>用途：</p><p>&lt;string.h&gt;中<code>strtok(str,&quot; ,.-&quot;)</code>的实现</p><p>用分隔符“ ,.-”（可以有多个，都放在一个字符串中）来分割str</p><p>多次调用就可以完全分割了。多次调用的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[]=<span class="string">&quot;aaa aaa,aaa-ok.&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>*p=strtok(str,<span class="string">&quot; ,.-&quot;</span>);<span class="comment">//第一次调用，将返回的被分割的第一个字符位置存入p中</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(p);<span class="comment">//对p进行的操作，输出也好，存起来也好</span></span><br><span class="line">    p=strtok(<span class="literal">NULL</span>,<span class="string">&quot; ,.-&quot;</span>);<span class="comment">//后续调用，第一个参数写成NULL，此时函数内保存的指针（一个静态变量，上一次调用完正好指到结尾）在下一次调用时作为起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="各类变量比较">各类变量比较</h3><ol type="1"><li>自动变量：啥都没写</li></ol><p>多个文件共享：extern int a; extern fun();</p><p>必须初始化时候赋值，不然不定</p><ol start="2" type="1"><li>全局变量（外部）：main函数外面，本文件、其他文件都可以改，尽量不用</li></ol><table><thead><tr class="header"><th>性能</th><th>自动变量</th><th>外部变量</th><th>外部静态</th><th>内部静态</th><th>寄存器变量</th></tr></thead><tbody><tr class="odd"><td>解释</td><td>啥都没写</td><td>main函数外面</td><td>main外static</td><td>里</td><td></td></tr><tr class="even"><td>记忆能力</td><td>❌</td><td>⭕️</td><td>⭕️</td><td>⭕️</td><td>❌</td></tr><tr class="odd"><td>多个函数共享</td><td>❌</td><td>⭕️</td><td>⭕️</td><td>❌</td><td>❌</td></tr><tr class="even"><td>不同文件共享</td><td>❌</td><td>⭕️</td><td>❌</td><td>❌</td><td>❌</td></tr><tr class="odd"><td>未赋值的取值</td><td>不定</td><td>0</td><td>0</td><td>0</td><td>不定</td></tr><tr class="even"><td>变量初始化</td><td>程序控制</td><td>编译器</td><td>编译器</td><td>编译器</td><td>程序控制</td></tr><tr class="odd"><td>数组与结构初始化</td><td>有</td><td>⭕️</td><td>⭕️</td><td>⭕️</td><td>❌</td></tr><tr class="even"><td>作用域</td><td>当前函数</td><td>整个程序</td><td>文件</td><td>函数</td><td>当前函数</td></tr></tbody></table><p>操作系统内存四大区：</p><ul><li>栈：函数就是用这种方式运行</li><li>堆</li><li>常量区：abcd、“hello world”</li><li>静态区：程序代码存在这儿</li></ul><p>变量初始化若是由编译器，意味着它被和程序代码一块儿存进了静态区</p><p>其他变量是在程序运行中从垃圾堆中取用</p><ol start="3" type="1"><li>静态变量：</li></ol><p>用途：自定义函数内部，反复调用，如计数；多个函数间传着用</p><h2 id="变量作用域">变量作用域</h2><p>for循环操作符：for循环中</p><p>函数形参：函数体内</p><p>局部变量：包含它的最小{}中</p><p>局部变量如果和更大的变量重名，则在这个局部，大的变量被屏蔽</p><h2 id="常量">常量</h2><p>long a=2L;</p><p>int b=2;</p><p>？？</p><p>用八进制赋值：数前加0</p><p>用16进制：0x</p><p><strong>符号常量</strong>：</p><p># define 常量名 常量值</p><p>例如，# define pi 3.14159</p><p>这样在后面用的时候写常量名就相当于用常量值</p><p>好处是便于修改</p><p>尽量少用数值常量（1000，3.14），而用符号常量替代（MAX_NUM，pi）</p><h1 id="运算">运算</h1><h2 id="优先级">优先级：</h2><p>.最高 结合性从左到右</p><p><em>&gt;++ </em>a++ 取a所指地址的值，再给a<strong>指针</strong>+1</p><p>##算术运算+-*/%</p><ol type="1"><li>除法/：两个实数相除的结果是double；两个整数除法，结果也是整数，会把余数忽略</li><li>求余%： 必须两个数都是整数，结果也是整数。如 7%3，结果为 1，除了%以外的运算符的操作数都可以是任何算数类型</li><li>求余的正负性：与分子一样</li><li>操作数不同，得出的结果以精度高的为类型</li><li>double高于long long</li><li>溢出的部分直接丢弃</li></ol><p>+=是一个运算 i=i+1 是两个运算，前者更快</p><h2 id="自增自减">自增、自减</h2><p>i++：先使用i的值，再加1</p><p>++i：先加1，再使用i的值</p><h2 id="逻辑运算">逻辑运算&amp;&amp; || !</h2><p>短路运算：前一个已经确定，后一个不会继续算了</p><h2 id="逗号表达式">逗号表达式</h2><p>逗号运算符，优先级别最低，它将两个及其以上的式子联接起来，从左往右逐个计算表达式，整个表达式的值为最后一个表达式的值</p><p>##强制类型转换运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">double</span>)a        <span class="comment">// (将a转换成为double型)</span></span><br><span class="line">(<span class="keyword">int</span>)(x+y)       <span class="comment">//（将x+y的值转换成为int类型)</span></span><br></pre></td></tr></table></figure><h2 id="sizeof">sizeof（）</h2><p><code>sizeof(变量名/类型名)</code> 看它占多少字节</p><p>是运算不是函数</p><h2 id="位运算">位运算</h2><p>二进制。少用。</p><p>按位与&amp;</p><p>按位或|</p><p>按位异或 ^</p><p>按位求反~</p><p>移位&lt;&lt; &gt;&gt; 相当于乘除法</p><h2 id="条件运算">条件运算</h2><p>X=（条件）？（成立的值）：（不成立的值）</p><p>可以嵌套，可以和if互换</p><p>x=((a=20,a*2),a+6)</p><p>=&gt; x=26</p><p>只要最后的结果</p><h2 id="数据类型转换">数据类型转换</h2><ol type="1"><li>自动转换：混合运算时，低级自动向高级转换。 char -&gt; int -&gt; unsigned -&gt; long -&gt; double float -&gt; double</li><li>强制类型转换：(type) x</li></ol><h1 id="数组">数组</h1><p>T a[n]</p><p>数组a占用内存大小：sizeof(a)=n*sizeof(T)</p><p>数组a[10]有十个数，分别是从a0~a9</p><p>数组是顺序存放的</p><p>数组名a代表数组的地址，设为p，变量a[i]的地址是p+sizeof(T)*i</p><p>大数组不能定义在main里面</p><p>空间换时间</p><p>多加几个是好事</p><ol type="1"><li>a[0]无意义</li><li>数组里只能是同一种数据类型</li><li>不能用变量指定数组长度（c99可以诶，但是不推荐，因为c是底层语言，要精准；运行速度会大幅变慢）</li></ol><p>分配变量在内存中间，数组就从最底下往上顶，所以如果越界有可能改变自己的变量…</p><p>static int a[3]={1,2} 那其余元素默认为0</p><p>全局数组的元素默认为0</p><p><strong>数组越界不报错，但会有大问题，是一个可怕的bug</strong></p><h2 id="二维数组">二维数组</h2><p><code>a[m][n]=&#123;&#123;&#125;,&#123;&#125;,&#123;&#125;&#125;</code>m行n列，连续存放</p><p>初始化时，不写的就默认为0；如果每一行都有初始化，那行数m就可以不填</p><h2 id="字符数组">字符数组</h2><p>包含\0的字符数组就是字符串，其中存放的字符即由\0前面的字符组成</p><p>字符数组是字符串的载体，字符数组至少要比字符串长1，因为要存‘/0’</p><h1 id="字符串">字符串</h1><p>表示方式：</p><ol type="1"><li>字符数组，char []</li><li>字符串常量，&quot;this is string&quot;</li></ol><p>字符串占用内存比字符串长度多1</p><p>空串“”也占\0</p><p>用scanf读入一个字符串时，函数会自动在末尾加上\0</p><p>scanf(&quot;%s&quot;,str) <strong>注意，不能是&amp;str，因为字符串名字就是地址</strong></p><p>scanf读入字符串到空格就停了！</p><p>解决方法：用gets（）</p><p><code>str[3] = 0</code> = <code>str[3] = '\0'</code></p><h2 id="字符串处理函数">字符串处理函数</h2><p>在使用字符串处理函数时，在程序文件的开头用<code>#include&lt;string.h&gt;</code></p><p><code>strcat(str1,str2)</code> 字符串连接 字符串 1 必须足够大，以便于容纳字符串 2</p><p><code>strlen(str)</code> 求字符串长度 不包含末尾的\0</p><p><code>strcpy(str1,str2)</code> 复制字符串，将字符串 2 复制到字符串 1 中</p><blockquote><p>字符数组 1 必须定义的足够大，以便容纳被复制的字符串 2。</p><p>“字符数组 1” 必须写成数组名形式（如str1），“字符串 2”可以使字符数组名，也可以是一个字符串常量。例如：strcpy(str1,&quot;China&quot;); 作用与前面的相同。</p><p>不能用赋值语句将一个字符串常量直接给一个字符数组。如下面两行是错误的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;shiyanlou&quot;;  //错误，企图用赋值语句将一个字符串常量直接赋值给一个数组</span><br><span class="line">str1=str2;          //错误，企图用赋值语句将一个字符数组直接赋给另一个字符数组</span><br></pre></td></tr></table></figure><p>用strcpy代替喽</p></blockquote><p><code>strlwr()</code> 将字符串转换为小写</p><p><code>strupr</code>转换为大写</p><p><code>strcmp(字符串1，字符串2)</code> 比较字符串，返回int类型</p><p>字符串1=字符串2，则函数值为0 字符串1&gt;字符串2，则函数值为一个正整数 字符串1&lt;字符串2，则函数值为一个负整数</p><p>字符串1和2都可以是字符数组或字符串常量</p><p>比较规则：</p><p>将两个字符串自左向右逐个字符比较（按照 ASCII 码值大小比较），直到出现不同的字符或者遇到 '\0 '为止。 如果全部字符相同，则认为两个字符串相同。 若出现不同的字符，则以第1对不相同的字符的比较结果为准。</p><p>例如：&quot;A&quot;&lt;&quot;D&quot;，&quot;e&quot;&gt;&quot;E&quot;，&quot;these&quot;&gt;&quot;that&quot;，&quot;computer&quot;&gt;&quot;compare&quot;。</p><p><strong>stdlib可用！</strong></p><p><code>strstr(str,substr)</code>找字符串中出现的第一个子串的位置</p><p><code>strchr(str,int c)</code>找字符串中出现的第一个c的位置</p><p><code>atoi(str)</code>将字符串转换成整数</p><p><code>atof(str)</code>将字符串转换成浮点数</p><p>&lt;string.h&gt;中<code>strtok(str,&quot; ,.-&quot;)</code></p><p>用分隔符“ ,.-”（可以有多个，都放在一个字符串中）来分割str</p><p>多次调用就可以完全分割了。多次调用的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[]=<span class="string">&quot;aaa aaa,aaa-ok.&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>*p=strtok(str,<span class="string">&quot; ,.-&quot;</span>);<span class="comment">//第一次调用，将返回的被分割的第一个字符位置存入p中</span></span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(p);<span class="comment">//对p进行的操作，输出也好，存起来也好</span></span><br><span class="line">    p=strtok(<span class="literal">NULL</span>,<span class="string">&quot; ,.-&quot;</span>);<span class="comment">//后续调用，第一个参数写成NULL，此时函数内保存的指针在下一次调用时作为起始位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这个是windows独有的</strong></p><p><code>itoa(value,str,radix)</code>将整数value以radix进制写入str</p><h2 id="字符串常用操作">字符串常用操作</h2><p><code>for(i = 0; (str1[i] = str2[i]) != '\0'; i++)</code>复制字符串</p><p><code>length = 0; for(i = 0; str[length] != '\0'; i++)</code>求字符串长度</p><p>求长度法2：\0的地址-首地址</p><p><code>for(i = 0; str1[i] != '\0'; i++)</code>找到字符串中的\0的位置</p><p><code>for(j=0;j&lt;i;i--,j++) //exchange str[i] and str[j]</code>字符串反向</p><p><code>int count[128]; while( line[k] != '\0') count[line[k++]]++;</code>统计字符出现次数</p><p><code>while(*p) p++; while(*p++=*str2++);</code>strcat</p><p>递归求串长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(<span class="keyword">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(*s==<span class="string">&#x27;\0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归串反向：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">revstr(<span class="keyword">char</span>*s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *p=s,c;</span><br><span class="line">    <span class="keyword">while</span>(*p) p++;</span><br><span class="line">    p--;</span><br><span class="line">    <span class="keyword">if</span>(s&lt;p)</span><br><span class="line">    &#123;</span><br><span class="line">        c=*s;</span><br><span class="line">        *s=*p;</span><br><span class="line">        *p=<span class="string">&#x27;\0&#x27;</span>;<span class="comment">//巧妙地先借用你位，下面递归完我再给你放回去</span></span><br><span class="line">        revstr(s+<span class="number">1</span>);</span><br><span class="line">        *p=c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指针">指针</h1><p>有了指针，就有了自由访问内存空间的手段。写底层、接近硬件的程序，如硬件驱动程序、病毒等，c才是No.1。</p><p>一般算法，指针并不是必须的</p><p>##定义： <code>T * p</code></p><p><code>p</code>: 类型是T *</p><p><code>*p</code>：类型是T，意思是从p地址开始读sizeof（T）的字节，因此也就<strong>等价于放在地址p的T类型的变量</strong></p><p><code>*</code>：间接引用运算符</p><p><code>sizeof(T*)</code>: 32位计算机上是4字节；64是8</p><p>###初始化</p><p><code>char *pc = &amp;ch1;</code> 使pc指向变量ch1</p><p><code>&amp;</code>: 取地址运算符</p><p><code>&amp;x</code>: 类型是T*，变量x的地址，即指向变量x的指针</p><p>###赋值</p><p><code>*pc = 'B'</code> 将B赋值给pc所指的变量</p><p><code>ch2 = *pc</code> 将pc所指变量的值赋值给变量ch2</p><p><code>pc = &amp;ch2</code> 使pc指向变量ch2</p><p>不同类型的指针不能相互赋值，除非强制类型转换；转换后也容易出错</p><h3 id="void-p">void *p</h3><p>可以用任何类型的值给它赋值</p><p>但是*p p++ p+n 都没有定义</p><p>要操作怎么办？char <em>chp=(char </em>)p;</p><p>用处：</p><p>内存操作函数 in <code>&lt;string.h&gt;</code></p><p><code>memset(void*dest,int ch,int n)</code>将内存中从dest开始的n个<strong>字节</strong>都设成ch（只有最小的那个字节有效）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> p[<span class="number">200</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="string">&#x27;a&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(p);</span><br><span class="line">=&gt; aaaaaaaaaa</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));<span class="comment">//only 0 is useful</span></span><br></pre></td></tr></table></figure><p><code>memcpy(void*dest,void*src,int n)</code></p><p>将地址src开始的n个字节，拷贝到地址dest，返回值是dest</p><h2 id="函数与指针">函数与指针</h2><p>###函数指针</p><p>指向函数的指针。指向函数的首行代码</p><p><code>int (*p)();</code></p><p><code>p=max();</code></p><p><code>c=(*p)(a);</code> = <code>c=max(a);</code></p><p>如果是int *p();则是一个返回值为指针类型的函数p</p><p>用途：</p><p><code>qsort(void*base,int nelem,int width,int(*pfCompare)(void*,void*))</code>快速排序，对任意类型的数组进行排序</p><p>参数表（数组起始地址，数组元素个数，数组每个元素大小（字节为单位），比较函数的地址（自己写…））</p><p>比较函数的规则：</p><p>int 比较函数名(void *elem1,void*elem2)</p><p>如果e1在e2前面，则返回负整数</p><p>都行返回0</p><h2 id="运算-1">运算</h2><ol type="1"><li>指针+-整数：根据指针类型有一个放大因子，每次都加整数*放大因子</li><li>指针&lt;&gt;==：当指针指向同一个数组内的元素时，可以这样比较位置顺序</li></ol><h2 id="数组与指针">数组与指针</h2><p>数组名是地址常量[意味着不能给它赋别的值]，<code>a</code>==<code>&amp;a[0]</code></p><p>数组名（不包括形参数组名，形参数组并不占据实际的内存单元）代表数组中首元素（即序号为 0 的元素）的地址</p><p>数组下标<code>a[4]</code>本质上是运算<code>*(a+4)</code></p><p>引用一个数组元素，可以用下面两种方法：</p><blockquote><ol type="1"><li>下标法，如 a[i]，p[i] 的形式；直观，不易出错。</li><li>指针法，如 <em>(a+1) 或 </em>(p+i)。其中 a 是数组名，p 是指向数组元素的指针变量，其初值 p=a。</li></ol></blockquote><p>用指针访问叫间接访问，好处：</p><p>指针变量的类型，是指针变量所指向的变量的类型，而不是自身的类型</p><p><code>int *指针</code> <code>指针=&amp;变量</code></p><p>指针用<code>%p</code>， <code>*指针</code>即为所指变量，用正常的<code>%d</code></p><p>定义指针变量的时候，<code>*</code>表示它是指针变量，但在之后<code>*</code>和<code>&amp;</code>互为逆运算</p><p><strong>若p=&amp;a，令*p=3，实际上是直接改变了a的值。</strong></p><p>因此在自定义函数中可以利用指针传参进来，然后直接改变主函数中的变量的值</p><p>有规律性地改变地址值，如p++，处理效果比每次都重新找寻地址要快。</p><p>数组名 a 代表数组首元素的地址，它是一个指针型常量，它的值在程序运行期间是固定不变的。既然 a 是常量，所以 a++ 是无法实现的</p><p>方便的写法：n=*p++ 此时n先取了老p所指的变量的值，然后p执行+1</p><p><strong>传参时，若是值传递，形参就无法改变实参；若是地址传递，形参（指针变量）就可以改变实参</strong></p><p>数组名和指针变量可以看做同一个东西，因为数组的本质就是数组名指向数组的头一个元素的地址，然后数组的最后一个元素是\0。</p><p>int * p = (int *) 40000</p><h1 id="函数">函数</h1><h2 id="自定义函数">自定义函数</h2><p>###函数的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(参数类型 参数名,参数类型 参数名)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不需要返回值，返回值类型就用void，最后直接用return；</p><p><strong>最好不用void，都返回一个值，不用就行</strong></p><p><strong>函数要在使用之前先声明</strong></p><p>函数体要放在main的后面</p><p>###函数的声明</p><p>返回值类型 函数名（参数类型 参数名） 其中参数名可以省略</p><p><strong>声明写在main外面</strong></p><h3 id="参数的传递">参数的传递</h3><p>形参实参类型需兼容</p><p>除非类型是数组、引用或对象，否则都是值拷贝（复印）；其实数组也是值拷贝，不过是地址的值</p><p>一维数组作为形参时，不用写出元素个数，只要写个方括号即可；</p><p>但为了知道边界，要传入一个数组长度。不过如果是char[]，不需要传长度，因为有\0</p><p>二维数组则必须写出列数；多维的也只能省去第一维</p><h2 id="递归">递归</h2><p>前提：所用语言支持递归调用；自动变量的特点</p><p>认识：</p><ol type="1"><li>所有递归都可由非递归实现</li><li>递归简洁，非递归程序复杂</li><li>递归很慢，不适合实时程序</li></ol><h2 id="printf">printf（,）</h2><p>格式控制串，变量表</p><h3 id="sprintfstrdn">sprintf(str,&quot;%d&quot;,n);</h3><p>往字符串里打印东西</p><h3 id="格式控制符">格式控制符%</h3><p>%%：百分号</p><p>%c：字符</p><p>%d：有符号十进制整数 decimal</p><p>%s：字符串</p><p>%lf：双精度型实数</p><p>%o：八进制数</p><p>%x：十六进制</p><p>%p：指针</p><p>在使用 %d 输出时，我们可以指定输出的宽度。具体用法:</p><p>%d：按照整型数据的实际长度输出。</p><p>%md：以m指定的字段宽度输出，右对齐。如果空间过小，会全打印</p><p>%10d：宽度10，右对齐</p><p>%-10d：宽度10，左对齐</p><p>%0nd：宽度n，少的用0填充</p><p>%ld：输出长整型数据。</p><p>%mld：输出指定宽度的长整型数据。</p><p>%10.2f：右对齐宽10小数点后两位</p><h2 id="scanf格式控制串地址表">scanf（格式控制串，地址表）</h2><p>&amp;取地址运算</p><h3 id="格式控制">格式控制</h3><p>格式是啥就咋输入</p><p>%d对空格不敏感，以非数字字符结束；%s以空格或回车为结束</p><p>输入字符不跳过空格，其他会跳过空格</p><p>你不能要一个回车进来！！！</p><h4 id="c">%*c</h4><p>百分号(%)与格式符之间的星号(*)表示读指定类型的数据但不保存</p><p><strong>scanf(&quot;%[a-zA-Z]&quot;, ptr);</strong></p><p><strong>那么扫描列表由大小写各26个字母组成。少数编译器仍旧把这种情况下的减号视为扫描列表成员</strong></p><p>%[]中的内容是不被忽视的内容 %[^]中的内容是作为分隔符的内容</p><p>####空白字符</p><p>空白字符会使scanf()函数在读操作中略去输入中的0个或多个空白字符，空白符可以是space,tab,newline等等，直到第一个非空白符出现为止。</p><p>####非空白字符</p><p>一个非空白字符会使scanf()函数在读入时剔除掉与这个非空白字符相同的字符。但在输入时必须输入这些字符。否则就会出错 。</p><p><strong>输入时不允许规定精度，可以指定域宽</strong></p><p>“%3d”只读三位，指定域宽；读一个整数看到一个小数点也不读了 比如12.3 只读12</p><p>&quot;%3.2f&quot;不行！不认识</p><p>&quot;%3f&quot;小数点也算一个宽度</p><p>###返回值</p><p><strong>有返回值！</strong></p><p>返回值是输入的变量的个数</p><p>scanf的返回值为EOF（-1），则说明输入结束了</p><p>EOF：end of file</p><p>在win中输入ctrl+z再回车；在mac中输入control+d再回车</p><p>从文件读时，没有了，就是EOF了</p><h2 id="putchar-getchar">putchar() getchar()</h2><p>getch（）输入字符，不回显（不显示你输入的东西），不回车 // 用处：敲密码</p><p>getche（）输入字符，并回显，不必回车</p><p>getchar（）输入字符，回显，回车后才读入</p><p>用<code>putchar</code>函数既可以输出字符，包括屏幕控制字符，如 </p><p><code>c=getchar()</code>= <code>scanf(&quot;%c&quot;,&amp;c)</code></p><h2 id="puts-gets">puts() gets()</h2><p><code>puts（字符数组）</code></p><p>将一个字符串输出到终端，用得不是很多。</p><p>将\0自动转换成</p><p><code>gets（字符数组）</code></p><p>输入一个字符串到字符数组，并且得到一个函数值。 自动在字符串尾加\0</p><p>scanf(&quot;%s&quot;，a)不能输入空格、、但是gets可以。</p><p>输入句子用gets</p><p><strong>问题：可能会导致数组越界</strong></p><h2 id="freopen">freopen（）</h2><p>把输入从键盘重定向为文件</p><p>这样就可以把输入内容存在某个txt里，方便调试了</p><p><code>freopen(&quot;c\\folder\\test.txt&quot;,&quot;r&quot;,stdin)</code></p><p>//Users//jiayinzhu//Desktop//</p><p>记得用完把它注释掉</p><h1 id="结构">结构</h1><p><strong>结构——数据的封装</strong>。封装的思想，面向对象的源头；但是只封装数据，如果加上函数就成了类型了</p><h2 id="语法">语法</h2><p>###定义结构类型</p><p>struct 类型名</p><p>{</p><p>​ 类型名 成员变量名；</p><p>​ 类型名 成员变量名；</p><p>};</p><p>放在main外面</p><p>结构变量的大小=所有成员变量大小之和，成员变量连续存放（但奇数为了对齐可能不一定？）</p><h3 id="构造结构变量">构造结构变量</h3><p>struct 类型名 变量名;</p><p>tips：</p><ol type="1"><li>编译时，类型不分配空间，只对变量分配空间；</li><li>只能对变量赋值、存取、运算，不能对类型如此</li><li>定义类型时可以直接调用已定义的别的类型</li><li>类型里外的变量可重名</li><li>初始化时可以用={}</li></ol><h3 id="访问结构变量中的成员分量">访问结构变量中的成员分量</h3><p>结构变量名.成员变量名</p><h3 id="对结构变量的整体操作">对结构变量的整体操作</h3><ol type="1"><li>两个相同类型的结构变量可以互相赋值=：sunday=today;</li><li>但是结构变量之间不可以用== &lt; &gt;进行比较运算</li><li>取地址&amp;</li></ol><h2 id="结构数组">结构数组</h2><p>数组中每一个元素都是这个结构类型</p><p>struct XXX xxx[100];</p><p>求数组元素个数：str_long=sizeof(XXX)/sizeof(xxx); 这样在初始化的时候永远不必写数组长度</p><h2 id="结构指针">结构指针</h2><p>指向结构的指针</p><p>struct XXX *pxxx;</p><p><code>pxxx -&gt; 成员名</code> = <code>(*pxxx).成员名</code></p><p><strong>运算符-&gt;优先级最高</strong></p><h2 id="函数与结构">函数与结构</h2><p>向函数传递结构、函数返回结构、向函数传递结构指针</p><h2 id="联合">联合</h2><p>结构的成员相互独立，联合的多个成员共同占用一个存储空间，相互联系，操作相互依赖</p><p><strong>非此即彼：联合中的成员一次只有一个有效</strong> 别的可能也有值，但不是你的值</p><p>union 联合类型名</p><p>{</p><p>}</p><p>用途：节省内存。现在基本不用了</p><h2 id="枚举">枚举</h2><p>所有可能取值都放进去</p><p>enum 类型名{枚举常量表};</p><p>枚举常量必须是整型，不赋值就自动0 1 2...</p><p>枚举元素可以和整型比较</p><h2 id="typedef定义数据类型">typedef定义数据类型</h2><p>typedef person(已定义的类型) PERSON（新的类型说明符）;</p><p>之后可直接用PERSON</p><h1 id="链表">链表</h1><h2 id="递归定义">递归定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">link</span>;</span></span><br><span class="line">&#125;NODE;</span><br></pre></td></tr></table></figure><p>只要自己在开头定义好自己的链表内容，之后就可以用了</p><h2 id="链表结构和特点">链表结构和特点</h2><p>头指针指向头结点：</p><ol type="1"><li>头指针指到后面，表就找不着了，很危险</li><li>表为空，头指针就指无可指了</li></ol><p>比数组的好处：</p><ol type="1"><li><p>不知道多少个也可以</p></li><li><p>就算知道多少个，如果好大好大的也可以，但数组可能找不到一个那么大的连续空间</p></li></ol><h2 id="操作">操作</h2><h3 id="两个重要库函数">两个重要库函数</h3><p>头文件：<code>&lt;stdlib.h&gt;</code></p><p>动态存储分配函数<code>void* malloc(int size)</code></p><p>动态分配长度为size个字节的存储区，分配成功，返回首地址</p><p>因为是void*类型，所以要强制转换类型</p><p>释放内存函数<code>void free(void *p)</code></p><p>和malloc配对使用，不然内存空间会泄露！</p><h3 id="申请空间创建表头结点">申请空间创建表头结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE *p,*head;p=(NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));p-&gt;link=<span class="literal">NULL</span>;head = p;</span><br></pre></td></tr></table></figure><h3 id="在表头插入节点">在表头插入节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(NODE*head,<span class="keyword">int</span> n)</span></span>&#123;    NODE*p;    <span class="keyword">for</span>(;n&gt;<span class="number">0</span>;n--)    &#123;        p=(NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));        gets(p -&gt; name);        p -&gt; link = head -&gt; link;        head -&gt; link = p;    &#125;    <span class="keyword">return</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="在表尾插入节点">在表尾插入节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(NODE*head,<span class="keyword">int</span> n)</span></span>&#123;    NODE*p;NODE*tail;tail=head;    <span class="keyword">int</span> i=<span class="number">0</span>;    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    &#123;        p=(NODE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));        gets(p -&gt; name);        p -&gt; link = <span class="literal">NULL</span>;        tail -&gt; link = p;        tail = tail -&gt; link;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="访问链表全部数据节点">访问链表全部数据节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(NODE*head)</span></span>&#123;    NODE*p;    p=head-&gt;link;    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)    &#123;        <span class="built_in">puts</span>(p-&gt;name);        p=p-&gt;link;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="插入节点">插入节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_node</span><span class="params">(NODE*head,NODE*p,<span class="keyword">int</span> k)</span></span>&#123;    NODE*q=head-&gt;link;    <span class="keyword">while</span>(q-&gt;link-&gt;id != k) q=q-&gt;link;        <span class="comment">//q指向插入位置之前那个节点    p-&gt;link=q-&gt;link;    q-&gt;link=p;    return;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除节点">删除节点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_node</span><span class="params">(NODE*head,<span class="keyword">int</span> k)</span></span>&#123;    NODE*q=head-&gt;link;    <span class="keyword">while</span>(q-&gt;link-&gt;id != k) q=q-&gt;link;        NODE*p;    p=q-&gt;link;    q-&gt;link=p-&gt;link;    <span class="built_in">free</span>(p);    <span class="keyword">return</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">B(left)--&gt;|link|C[dead]</span><br><span class="line">C--&gt;|link|D[right]</span><br><span class="line">E(q)--&gt;B</span><br><span class="line">F(p)--&gt;C</span><br></pre></td></tr></table></figure><h3 id="length">length</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(NODE*head)</span></span>&#123;    <span class="keyword">int</span> len=<span class="number">0</span>;    NODE*p=head-&gt;link;    <span class="keyword">for</span>(;p!=<span class="literal">NULL</span>;len++) p=p-&gt;link;    <span class="keyword">return</span> len;&#125;</span><br></pre></td></tr></table></figure><h1 id="文件">文件</h1><p>c的半壁江山，非常重要，<strong>一切皆文件</strong>，屏幕、键盘……</p><h2 id="定义">定义</h2><p>文件：存储在外部介质（磁盘等存储器）上的数据或信息的集合。</p><p>输出：写文件 输入：读文件</p><p>分类：ascii文件和二进制文件。前者可以用text直接阅读，文本文件，给人看的</p><p>缓冲文件系统和非缓冲文件系统。前者是现代计算机，cpu借用io系统；后者是原始计算机或单片机-传感器</p><p>###文件类型FILE</p><p>定义在stdio.h中了，可以直接用</p><h3 id="三个标准设备文件指针">三个标准设备文件指针</h3><p>stdin键盘</p><p>stdout 显示器</p><p>stderr标准错误输出文件</p><h2 id="使用">使用</h2><h3 id="打开文件fopen">打开文件fopen</h3><p>FILE * fp;</p><p>fp=fopen(“文件名”，“文件使用方式”)；</p><p>三种基本方式：</p><p>r：只读。w：只写。a：追加。</p><p>其他：</p><p>r+：读写。w+：读写，如果已经存在，先清空。a+：读追加。rb+：二进制读写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE * fp;<span class="keyword">if</span>((fp=fopen(<span class="string">&quot;filename&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)&#123;    <span class="built_in">printf</span>(<span class="string">&quot;Cannot open file.\n&quot;</span>);    <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//立即退出，啥都不管了。因为磁盘是机械电子装置，太不可靠&#125;</span></span><br></pre></td></tr></table></figure><p>如果写filename=&quot;c://xxx//xxx&quot;，记得用转义//</p><blockquote><p>in Mac os we can use command+option+c to copy the address of files</p></blockquote><h3 id="操作文件">操作文件</h3><p>####顺序操作函数：</p><p>#####1. 字符输入输出</p><p><code>int fgetc(FILE*fp)</code></p><p><code>int fputc（char ch,FILE* fp）</code></p><p>#####2. 字符串输入输出</p><p><code>char* fgets（char* buffer，int n，FILE* fp）</code>从文件fp中拿n-1个字符（最后一个是\0）存入数组缓存区buffer中，返回buffer；出错时返回NULL</p><p>如果读满了n-1个字符，结尾就是\0 如果没满就遇到结尾就是\0</p><p><code>int fputs(char *buffer, FILE *fp)</code>将首地址为buffer的字符串（双引号也行）写入fp中，不写\0，返回0；出错返回EOF</p><p>串之间无分隔符，可以人为加</p><p>#####3. 格式化输入输出</p><p><code>fscanf (fp，格式控制串，输入列表)</code></p><p><code>fprintf(fp，格式控制串，输入列表)</code></p><p>不能处理二进制</p><p>#####4. 二进制数据块输入输出</p><p><code>fread(buffer,size,count,fp)</code>从fp中读count个size大小的数据块存入buffer（char地址），成功返回实际读取的count数</p><p><code>fwrite(buffer,size,count,fp)</code> 将buffer中存入fp</p><p>文件指针在帮忙</p><p>EOF:end of file 文件结束标记</p><p>####文件任意random读写</p><p><code>fseek(fp,n移动字节数,pos位置)</code></p><p>n可正负</p><p>pos：0开头 1当前 2末尾</p><p><code>long ftell（fp）</code> 找寻当前位置返回</p><p><code>rewind（pf）</code>指针回到最初</p><h4 id="文件检测">文件检测</h4><p><code>int feof(FILE* fp)</code>判断文件尾 若文件已经结束，返回非0；文件尚未结束返回0</p><p>use <code>!feof(fp)</code> instead of <code>ch!=EOF</code> because the later one only suits for type of text.</p><p><code>ferror（fp）</code>文件出错，返回非0；文件没毛病返回0 主要用来判断那块磁盘有没有问题</p><p><code>clearer（fp）</code>清除文件出错和结束的标记</p><h3 id="关闭文件">关闭文件</h3><p>fclose(fp);</p><p>ch ^= 0xa3</p><p>期末文件考选填</p><p>自习 考试</p><h1 id="控制流语句">控制流语句</h1><h2 id="if">if</h2><p><strong>能用？：尽量用它，其次是if，再其次是函数</strong></p><p>if()</p><p>{</p><p>​ xxx;</p><p>}</p><p>else</p><p>​ xxx;</p><p>else与最近的if配对</p><p>解决：用{}</p><h2 id="switch">switch</h2><p>switch(运算){</p><p>​ case 常量表达式:</p><p>​ xxx;</p><p>​ break;</p><p>​ case 常量表达式2:</p><p>​ xxx;</p><p>​ break;</p><p>​ ...</p><p>​ default: // 缺省，即以上case都不满足时执行</p><p>​ xxx;</p><p>}</p><p>一旦进入某一个case，就会一直往下运行，如果没有碰到break，会直接进去下一个case运行，直到运行完或者碰到break</p><h2 id="for">for</h2><p>计数器：count++</p><p>累加器；total+=count</p><p>for(s1;s2;s3)</p><p>{</p><p>​ xxx;</p><p>}</p><p>s1和s3可以是逗号连接的好几个表达式</p><p>循环控制语句里定义一个int i=0; 与之外的已经有的i互不干扰</p><p>循环体可以为空 for（）； 这样效率最高</p><h2 id="while">while</h2><p>当不是要循环多少次数，而是要等到某种条件达成时候，可以用while，它的结构比for简单</p><p>while()</p><p>{</p><p>}</p><ol type="1"><li>for while do-while 可相互通用</li><li>while用于不知循环次数；for用于已知循环次数；do-while用于上来就要先干活的</li></ol><h2 id="goto">goto</h2><p>强制转到同一函数的任意位置。</p><p>不推荐用，除非用于跳出多重循环</p><p>但也可用立flag来解决</p><p>p:xxx</p><p>goto：p</p><h1 id="注释">注释</h1><p>单行：<code>//</code></p><p>多行：<code>/*             //*/</code></p><h1 id="debug">debug</h1><p><code>system(&quot;PAUSE&quot;)</code>妙啊</p><p>判断时，常数写在左！！！</p><p>2==a</p><p>这样如果少一个=，直接报错</p><p>只保留最原始数据，不存计算后的数据，需要时现算，否则冗余混乱</p><p>测试用字符串：<code>abracadabra</code></p><p>写一段测一段</p><p>不要在for循环里写strlen() 不然每次循环都要调用一次，太蠢了</p><p>妙法：</p><p><code>for(i=0;i&lt;strlen(s);++i)</code>写成<code>for(i=0;s[i];++i)</code></p><p>因为s[i]只有在'\0'时等于0，也就是循环条件为假</p><p>pow(,)返回双精度类型！！！当整数用的时候记得加(int)</p><p>小数常量默认为double类型</p><p>浮点数不可以用==判等 很多编译器支持，但有的时候不确定 因为float进寄存器会被变成double，额外的4个字节不能保证都是0</p><p>计算机中避免用小数 因为运算起来不稳定 像银行所有程序都没有小数</p><h1 id="算法">算法</h1><h2 id="排序">排序</h2><p>要求：冒泡能背；三个排序能写能读，期末考一个</p><h3 id="冒泡排序">冒泡排序</h3><p>有n个数要从小到大排序，外循环共n-1次，在第j次的内循环共n-j次.O(n<sup>2</sup>)</p><p>10 9 8 7 6 5 4 3 2 1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=size<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">      <span class="comment">//size-1次外循环，size-1次比较</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">          <span class="comment">//i次内循环</span></span><br><span class="line">         <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">          &#123;<span class="comment">//交换值</span></span><br><span class="line">              <span class="keyword">int</span> t=a[j];</span><br><span class="line">             a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">              a[j+<span class="number">1</span>]=t;</span><br><span class="line">          &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序">选择排序</h3><p>比冒泡快，O(n<sup>2</sup>)。有n个数，循环n-1次，每次循环把第i小的元素放好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">  &#123;<span class="comment">//每次循环把第i小的元素放在第i处</span></span><br><span class="line">      <span class="keyword">int</span> tmpMin=i;</span><br><span class="line">      <span class="comment">//记录从第i个到最后一个元素中，最小的那个元素的下标</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;size<span class="number">-1</span>;j++)    </span><br><span class="line">          <span class="keyword">if</span>(a[j]&lt;a[tmpMin]) </span><br><span class="line">            tmpMin=j;</span><br><span class="line">      <span class="keyword">if</span> (tmpMin!=i) </span><br><span class="line">      &#123;<span class="comment">//如果最小的不是最初的值，就把最小的交换到最初</span></span><br><span class="line">          <span class="keyword">int</span> tmp=a[i];</span><br><span class="line">          a[i]=a[tmpMin];</span><br><span class="line">          a[tmpMin]=tmp;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序">插入排序</h3><p>更快，O(n<sup>2</sup>)。类似摸牌😂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i,j,t,x,LearnTime[<span class="number">10</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;please enter 10 number:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span>==i) LearnTime[i]=x; <span class="comment">//第一个数放在数组中</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">for</span>(j=i<span class="number">-1</span>;LearnTime[j]&gt;x&amp;&amp;j&gt;=<span class="number">0</span>;j--)<span class="comment">//从后往前依次和新来的x比，比x大的数往后挪一位</span></span><br><span class="line">          &#123;</span><br><span class="line">            LearnTime[j+<span class="number">1</span>]=LearnTime[j];</span><br><span class="line">          &#125;</span><br><span class="line">          LearnTime[j+<span class="number">1</span>]=x;<span class="comment">//全部挪完后，把x放进多的空里</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;the sorted number:\n&quot;</span>);</span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,LearnTime[i]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更好的排序">更好的排序</h3><p>快速排序、归并排序，O(<span class="math inline">\(n log_2n\)</span>)</p><h2 id="二分查找">二分查找</h2><p>每次比较，查找范围减半。</p><p>前提：要查找的内容必须是有序的，才能比较.</p><p>O(log(n))</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> size,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>;<span class="keyword">int</span> R=size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=L+(R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//为了防止L+R过大</span></span><br><span class="line">        <span class="keyword">if</span>(p==a[mid])</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p&gt;a[mid])</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            R=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LowerBound</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> size,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//找比p小的下标最大的元素，返回其下标</span></span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>;<span class="keyword">int</span> R=size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> lastPos=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=L+(R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;=p)</span><br><span class="line">            R=mid<span class="number">-1</span>;;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            lastPos=mid;</span><br><span class="line">        L=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> lastPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契">斐波那契</h2><p>c=a+b; a=b; b=c;</p><h2 id="abba">a,b=b,a</h2><p>a=a+b;</p><p>b=a-b;</p><p>a=a-b;</p><h2 id="isprime">isPrime</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n/<span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取每一位">取每一位</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(w=j,i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++,w/=<span class="number">10</span>)<span class="comment">//3位数j</span></span><br><span class="line">    a[i]=w%<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>关键是w%10得个位数，w/=10去掉个位数</p><h2 id="字符串和数相互转换">字符串和数相互转换</h2><p><code>#include&lt;stdlib.h&gt;</code></p><p><code>n=atoi(s)</code> 将字符串s转换为整型</p><p>把整数n打印成一个字符串保存在s 中。 <code>sprintf(s, &quot;%d&quot;, n);</code></p><blockquote><p>atof() 将字符串转换为双精度浮点型值 atol() 将字符串转换为长整型值 strtod() 将字符串转换为双精度浮点型值，并报告不能被转换的所有剩余数字 strtol() 将字符串转换为长整值，并报告不能被转换的所有剩余数字 strtoul() 将字符串转换为无符号长整型值，并报告不能被转换的所有剩余数字</p></blockquote><h2 id="图形">图形</h2><p>别被坑了……分上下两部分，上半部分i递增，下半部分i对应递减，内容一样就行。</p><p>递减的就是n-i，递增的就是i，看着办就行</p><p>多多试运行，趋势太大就调整倍数，平移的话加减常数就行</p><p>数字循环题，每次都mod 10就行了 但如果递变得比较复杂……先加后减跟i关系不明显的，数字自+-得了</p><p>左右对称就别分开写了吧md，又要考虑奇偶又要考虑末尾的回车啥的 ，必要时候还是变量自己++—把</p><p>先看清楚每行的个数规律 别鸡儿瞎写</p><p>如果空格多的话，还有一个不寻常的写法：如果是在哪哪位置，输出数字，否则空格。</p><p>我的「晕」是按层来的，简直妙绝……</p><p>4 A</p><p>c++;</p><p>c=c&gt;'Z'?'A':c;</p><p>x=c+(Ijvsjowfwe);</p><p>while(x&gt;'Z') x-=26;m</p><p>pr(,(f+1)%10)</p><p>((c+1)-'A')%26+'A'</p>]]></content>
      
      
      <categories>
          
          <category> Computer Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探险家</title>
      <link href="/blog/explorers/"/>
      <url>/blog/explorers/</url>
      
        <content type="html"><![CDATA[<p>我们询问一位探险家：<br />「您是怎样走出人生的阴霾的？」<br />「多走几步。」<br />于是<br />我们有的掉进了前方的悬崖<br />有的陷进了前方的泥淖<br />有的在沼泽里挣扎<br />有的被灌木里的毒蛇撕咬<br />有的被石子绊倒<br />有的被从天而降的陨石砸中<br />还有的走着走着<br />被同行的人暗地里伸出一只脚<br />于是我们知道<br />探险家是骗子<br />他是命运之神真正的嫡孙<br />我们是草芥</p><p>18.7.24凌晨一点三十九</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>想</title>
      <link href="/blog/thinking/"/>
      <url>/blog/thinking/</url>
      
        <content type="html"><![CDATA[<p>夜里的风<br />像一串唇覆住大地，<br />嘘，不要吐出急转的气息，<br />让一切缓缓进行，在燥热的空气里：<br />轻纱的云褪去，<br />重山对视星星。<br />院里是谁家幼小的狗<br />快快牵回屋里。</p><p>让一切悄悄开启，在树梢的鸟鸣里：<br />长蛇让出路来，<br />探险队向密林进军。<br />我背着手走在下山的路上，<br />只有夜里的风吹在我身边。</p><p>18.7.18</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>18.7.5</title>
      <link href="/blog/18-7-5/"/>
      <url>/blog/18-7-5/</url>
      
        <content type="html"><![CDATA[<p>天上的星星出来夜跑<br />我出来看看他们<br />夜在星底下搔首弄姿地自拍<br />但是背光</p><p>小飞蛾小壁虎<br />比我年纪轻<br />但如何在夜的乡野做一名生物<br />我向他们学也学不来</p><p>蚊子诗兴大发<br />嗡嗡作对<br />有狗名Maria时不时地吠</p><p>此时此刻我在大地的中央<br />甘做配角</p><p>18.7.5在河南睢县向阳小学</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>和lhy一同醒来</title>
      <link href="/blog/wake-up-with-lhy/"/>
      <url>/blog/wake-up-with-lhy/</url>
      
        <content type="html"><![CDATA[<p>夜里有七发子弹射向我<br />只有一发不幸射中我<br />醒来冰冷的早晨<br />发现我缺失了<br />一个头朝下的夜晚<br />玻璃外是静止的灯光和楼<br />玻璃里是黑暗的楼梯和你和我<br />那些交谈都缺失了<br />只闪烁着那个身影<br />是萤火虫般的闪烁<br />原来那个夜晚的你的我是在下坠啊<br />我跌到无何有之所<br />一发子弹射向我<br />醒来粘稠的生活</p><p>18.6.25给李惠英生日</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>18.5.23</title>
      <link href="/blog/18-5-23/"/>
      <url>/blog/18-5-23/</url>
      
        <content type="html"><![CDATA[<p>我头里欲裂的是你的身子<br />翻过身背对着是你的影子<br />我握着你的钢笔<br />我画不出汹涌的江<br />画不出泛滥的海<br />画不出连绵的雾<br />画不出蒸腾的水汽<br />没有你在身边的晚上<br />压在我身上的只有干柴<br />在等火</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>好的小说不造梦</title>
      <link href="/blog/good-novel-do-not-make-dream/"/>
      <url>/blog/good-novel-do-not-make-dream/</url>
      
        <content type="html"><![CDATA[<h3 id="记录-姜楠老师-18.4.17晚课">记录 姜楠老师 18.4.17晚课</h3><p>有人以为小说只造梦，只作生活之消遣；其境之虚而情之假，于人万无一益。实不然：好的小说不造梦，而是以生活中之事虚构的心灵之世界。话先总述：好的小说是在揭示真相，是叫人认清生活的本质，读好的小说实则对人有益：提高思考，认识世界的方式。</p><p>小说有二永恒主题：爱与死。不是说美满结局、轻松愉悦的造梦式小说不好，而是说其于人无益，并不揭示生活之本质。夫《红楼梦》虚假吗？并不，它正是生活的本来面目。又言劳伦斯，勿以其为情色作家，而应为严肃作家；其小说正是在思考与探讨爱情之本质，其曰：</p><p>爱情之本质是性。</p><p>但一电影名《哭泣的游戏》更上一层。故事简述：白人共和军看守一人质时，产生友情，答应为其照顾一姑娘。而后与姑娘自然生情愫，准备在一起时发现，竟是男的。而后情节？而后是将这种感情往前推一步，是泯灭了性的更本质的爱。白人仍帮助「姑娘」，仍有深爱。</p><p>有句话言：</p><p>「人在命运的漂流中，爱情带有岸的面目。」</p><p>不论大家理不理解，师言，此言妙矣，道出爱情本质。</p><p>又如《呼啸山庄》，试问，希斯克里夫为凯瑟琳，折磨对方，又折磨自己；那是爱吗？</p><p>是的，那是艾米莉·勃朗特所揭示的爱的本质。</p><p>艾米莉有一种能力：外面的世界四分五裂，她有整合的能力。</p><p>再如《巴黎圣母院》，那个神降临在人间的故事，那也是雨果所揭示的爱情之本质。</p><p>遑论对与不对，至少好的小说，作者都在努力去触及。</p><p>所以说，好的小说是在叫人认清生活之本质。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.1.18</title>
      <link href="/blog/18-1-18/"/>
      <url>/blog/18-1-18/</url>
      
        <content type="html"><![CDATA[<p>又该回家了，<br />这轮莫比乌斯之轨道<br />又要在深冬终结了。<br />一成不变的时间的圆上<br />翻覆的自己和世间。</p><p>我曾企图以反思<br />捕捉万变之宗之踪，<br />奉斯宾诺莎的永恒轮回为圭臬，<br />以老子所谓反者道之动为参照，<br />最后发现，<br />几年积累来的，<br />无尽奥妙般的言语，<br />不过是堆在心里的轻飘飘的羽毛。<br />一触就飞散，<br />握不住<br />而无意义矣。</p><p>「人当自救」？<br />屁股坐对位置<br />快乐就完事了；<br />「何处合成愁」？<br />秋夜里偶尔冷的时候<br />搓搓手就忘却了。<br />况且还有冬日呢。<br />一切都可以被简化，<br />管它在心底供养着的，<br />是一株草，一颗星，还是一道彩虹，<br />昂头走路的时候<br />把脚印踩准就是了。</p><p>当我开始谈论生活，<br />就不再是那个故作深沉的小孩子了。 <br />我是什么样的大人呢？</p><p>18.1.18深夜</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>17.8.17</title>
      <link href="/blog/17-8-17/"/>
      <url>/blog/17-8-17/</url>
      
        <content type="html"><![CDATA[<p>往后是从一本书里走进另一本书里<br />我不能成为斯通纳<br />斑斑的人生写不成完整一部书<br />或许努力试试<br />当个思特里克兰德<br />从某一部分开始醒悟<br />酿成艺术<br />其实不反感当个金俊斌<br />戏剧终结 不必瞩目<br />最向往是做个爱罗先珂<br />分割成短篇故事 主题是勘察寂寞<br />我愿心内不住大庭叶藏<br />我愿永远不遇方鸿渐 哈兰姆<br />渡边彻是庸庸碌碌加遇人不淑<br />田村卡夫卡是命运的捉弄和天意的眷顾<br />其实我也明白了<br />人生最真不过如沈复</p><p>17.8.17凌晨四点瞎感</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有的系鞋带方式能带来一辆红色大福特</title>
      <link href="/blog/red-fort/"/>
      <url>/blog/red-fort/</url>
      
        <content type="html"><![CDATA[<p>是掉进梦里<br />从一个装满肥兔子的屋里<br />摸爬起来的<br />有的系鞋带方式<br />能带来一辆红色大福特<br />在路上<br />不戴耳机<br />就没带清醒的脑子<br />在路上</p><p>——高三午休后上学路上</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为成人礼试写关于责任的诗</title>
      <link href="/blog/about-responsibility/"/>
      <url>/blog/about-responsibility/</url>
      
        <content type="html"><![CDATA[<p>从今天起我要放弃做巨人<br />填海的是精卫<br />推石头有西西弗<br />我啊？<br />我啊，暂且被封印在这七尺躯<br />那我去读民附<br />我去孝敬父母<br />为了地球环境<br />我去栽一棵树</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三月对善恶的思考</title>
      <link href="/blog/thought-about-march/"/>
      <url>/blog/thought-about-march/</url>
      
        <content type="html"><![CDATA[<blockquote><p>17年3月13的老日记了，现在看主要是思考的那股劲儿值得玩味。</p><p>—— now</p></blockquote><p>无疑我此阶段是一个不善良者。</p><p>但我粗浅地提出一个假设：</p><p>世上有两种善良，</p><p>一种是混沌式善良。是不假思索的，凭着某种本性和执念的，低智商的善良。</p><p>另一种是空灵式善良。是高境界的逻辑自洽的善良，也是真正的善良。</p><p>我认为从混沌式善良转入空灵式善良的路上，很可能会经过一个迷惘时期，是随着观察样本的扩大以及思考的不断前进，自己曾经构建于心中的瘸腿善良之建筑轰然倒塌，因而信念缺失，举足无路，陷入自我崩坏中。</p><p>也就是我此刻正在经历的时期。</p><p>当然我认为有许多人会长久乃至永久地止步于此时期，也有许多天资异秉的人生来跳过了混沌式善良时期直接步入此过渡时期。</p><p>然而后路何在呢？我想一是继续思考继续扩大样本范围，二是吸取古来圣人德人高尚之人的思索之成果，也即多读一些书。</p><p>可能等到复行数十步会豁然开朗，才见土地平旷屋舍俨然吧。那才是真正的世界的样子，是归宿的样子，是生命不去想死的真正原因。</p><p>那么我们不妨来随意思考一下那些圣母婊的性质。</p><p>我想一个处于迷惘期乃至空灵期的人都是不屑于伪装或是成为一个圣母婊的，因为他们已经对善良进行了一番思考 自然能看出圣母婊式善良的残缺所在。</p><p>所以我想圣母婊必然是混沌式善良中人。但是细想的话，其特质仍可分为二：</p><p>一则虚伪型。当然此虚伪不是主观式虚伪，而是客观式虚伪，是心智或是意志还没有成长到意识或是接受他人及自己人性中阴暗的一面的人。因此他们遇上「给你180亿元踩死一只小狗」的空想实验会掷地有声地发表言论称「我才不选钱并且你们这些选钱的都是无可救药之人」。但实际上是他们并未真正把自己代入那样的真实情境去思考，而是仅凭直觉上的道义做出了粗略的判断。当他们真正面临这样的情景，绝大多数可能会食言反悔，暴露真面目，是为虚伪。</p><p>二则愚昧型。此类可能是年龄较小，当然也可能是天生止步于此。</p><p>我也曾经是此类人。</p><p>愚昧型圣母婊心中的善恶标准是模糊乃至错误的，他们会把某些原本该用另一套跳脱出善恶的尺规来衡量的事物，划分入不善良的体系，进而做出一些行为来阻遏它，此种行为却造成了真正意义上的恶。例如爱狗人士砸饭店，或是盲目爱国等。</p><p>此种圣母婊，颠倒黑白，逻辑混乱。</p>]]></content>
      
      
      <categories>
          
          <category> thoughts </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>书📚</title>
      <link href="/blog/my-books/"/>
      <url>/blog/my-books/</url>
      
        <content type="html"><![CDATA[<p>书太无情了<br />是在把冰冷的思考刺进你<br />如果有一天我因为书自杀了<br />那不怪我</p><p>17.2.4</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文化的满月</title>
      <link href="/blog/%E6%96%87%E5%8C%96%E7%9A%84%E6%BB%A1%E6%9C%88/"/>
      <url>/blog/%E6%96%87%E5%8C%96%E7%9A%84%E6%BB%A1%E6%9C%88/</url>
      
        <content type="html"><![CDATA[<p>满月的那一晚<br />A好巧不巧爱上了一桶水<br />不是谁人像水<br />不是水暗指谁人<br />这桶水就是一桶普通的水<br />但它现在不一般了<br />不是因为这些水<br />与木桶在满月的晚上相遇<br />被赋予价值<br />而是因为<br />它是世界上第一桶被人类爱上的水<br />从此刻开始<br />文化粒子溶解在了这桶水里<br />它成了一桶文化！<br />这让A联想到<br />祖先第一次抬头赏月的那一刻起<br />天上赫然挂了一轮人化的月亮！<br />此一刻<br />真真乃人性光辉<br />大爱光辉新新闪耀一刻<br />不知道那桶水作何感想</p><p>16.9.16中秋夜</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>16.4.25</title>
      <link href="/blog/16-4-25/"/>
      <url>/blog/16-4-25/</url>
      
        <content type="html"><![CDATA[<p>我有一张青面<br />一副獠牙<br />斑点满身<br />从来趁夜深人静<br />背朝月光静立</p><p>可是远远的你<br />只看见<br />暗绿色的无际草地背景<br />模糊糊的<br />你以为我披着洁白的云</p><p>我欲向你坦言我的模样<br />无奈月色暗淡<br />星光也颤颤的 将熄未熄<br />我端起镜子<br />没法照清自己</p><p>16.4.25凌晨两点</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15.12.9</title>
      <link href="/blog/15-12-9/"/>
      <url>/blog/15-12-9/</url>
      
        <content type="html"><![CDATA[<p>我爱上了一颗星<br />终日沉沦于黑夜<br />我忘了怀里的那株草<br />猛然发现<br />它一直在等<br />等天亮</p><p>15.12.9</p>]]></content>
      
      
      <categories>
          
          <category> poems </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
